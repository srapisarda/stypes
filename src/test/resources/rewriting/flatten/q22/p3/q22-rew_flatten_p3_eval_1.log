WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT s_2.y AS X0, r_0.x AS X1 FROM s AS s_2 INNER JOIN r AS r_1 on s_2.x = r_1.y INNER JOIN r AS r_0 on r_1.x = r_0.y )), p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1 FROM p12 AS p12_4 INNER JOIN r AS r_3 ON r_3.y = p12_4.X1 INNER JOIN r AS r_2 ON r_2.y = r_3.x INNER JOIN r AS r_1 ON r_1.y = r_2.x INNER JOIN s as s_0 ON s_0.y = r_1.x UNION (SELECT a_0.x AS X0, p12_3.X0 AS X1 FROM a AS a_0 INNER JOIN r AS r_1 ON a_0.x = r_1.x INNER JOIN r AS r_2 ON r_1.y = r_2.x INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1

------------> using sink uuid: d6c05114_8f2a_4ce9_8f98_930775e1762e

Adding statistics for table s number 3 
Adding statistics for table a number 3 
Adding statistics for table b number 3 
Adding statistics for table r number 3 
Adding statistics for table t number 3 
sql argument: WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1
             FROM r AS r_0
                      INNER JOIN b AS b_1 ON r_0.y = b_1.x
             UNION
             (SELECT s_2.y AS X0, r_0.x AS X1
              FROM s AS s_2
                       INNER JOIN r AS r_1 on s_2.x = r_1.y
                       INNER JOIN r AS r_0 on r_1.x = r_0.y
             )),
     p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1
            FROM p12 AS p12_4
                INNER JOIN r AS r_3 ON r_3.y = p12_4.X1
                INNER JOIN r AS r_2 ON r_2.y = r_3.x
                INNER JOIN r AS r_1 ON r_1.y = r_2.x
                INNER JOIN s as s_0 ON s_0.y = r_1.x
            UNION
            (SELECT a_0.x AS X0, p12_3.X0 AS X1
            FROM a AS a_0
                     INNER JOIN r AS r_1 ON a_0.x = r_1.x
                     INNER JOIN r AS r_2 ON r_1.y = r_2.x
                     INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalProject(X0=[$8], X1=[$0])
   :  +- LogicalJoin(condition=[=($9, $6)], joinType=[inner])
   :     :- LogicalJoin(condition=[=($7, $4)], joinType=[inner])
   :     :  :- LogicalJoin(condition=[=($5, $2)], joinType=[inner])
   :     :  :  :- LogicalJoin(condition=[=($3, $1)], joinType=[inner])
   :     :  :  :  :- LogicalUnion(all=[false])
   :     :  :  :  :  :- LogicalProject(X0=[$1], X1=[$0])
   :     :  :  :  :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :     :  :  :  :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :     :  :  :  :  +- LogicalProject(X0=[$1], X1=[$4])
   :     :  :  :  :     +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
   :     :  :  :  :        :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
   :     :  :  :  :        :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$5])
      +- LogicalJoin(condition=[=($4, $6)], joinType=[inner])
         :- LogicalJoin(condition=[=($2, $3)], joinType=[inner])
         :  :- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :  :  :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         +- LogicalUnion(all=[false])
            :- LogicalProject(X0=[$1], X1=[$0])
            :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
            :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
            :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
            +- LogicalProject(X0=[$1], X1=[$4])
               +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
                  :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
                  :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
                  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
                  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 3790.9948130732264, cumulative cost = {5349212.605712252 rows, 2.4686694229042447E8 cpu, 6.777042E7 io, 3.1914274594442565E7 network, 1.7118917494364534E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 3790.9948130732264, cumulative cost = {5345421.610899178 rows, 2.468062863734153E8 cpu, 6.777042E7 io, 3.1914274594442565E7 network, 1.6876293826327845E7 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 3790.9948130732264, cumulative cost = {5341630.616086105 rows, 2.461390712863144E8 cpu, 6.777042E7 io, 3.1823290718928806E7 network, 1.6876293826327845E7 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 20913.612636698977, cumulative cost = {5337839.621273031 rows, 2.4580445348412722E8 cpu, 6.777042E7 io, 3.1823290718928806E7 network, 1.6633670158291157E7 memory}
         :- Calc(select=[x000 AS X0, X0 AS X1]): rowcount = 9023.201118868677, cumulative cost = {3091009.5187409017 rows, 1.6663085590528482E8 cpu, 3.6965268E7 io, 2.211428563803798E7 network, 9555444.679145578 memory}
         :  +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[X0, X1, y, x000], isBroadcast=[true], build=[left]): rowcount = 9023.201118868677, cumulative cost = {3081986.317622033 rows, 1.6663085590528482E8 cpu, 3.6965268E7 io, 2.211428563803798E7 network, 9555444.679145578 memory}
         :     :- Exchange(distribution=[broadcast]): rowcount = 15007.73412579119, cumulative cost = {1450815.4365031645 rows, 6.09644459122785E7 cpu, 1.8482916E7 io, 7805855.238037977 network, 4078989.9681012724 memory}
         :     :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 15007.73412579119, cumulative cost = {1435807.7023773734 rows, 5.856320845215191E7 cpu, 1.8482916E7 io, 7445669.619018989 network, 4078989.9681012724 memory}
         :     :     +- Exchange(distribution=[hash[X0, X1]]): rowcount = 15007.73412579119, cumulative cost = {1420799.9682515822 rows, 5.832308470613925E7 cpu, 1.8482916E7 io, 7445669.619018989 network, 3118494.984050636 memory}
         :     :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 15007.73412579119, cumulative cost = {1405792.2341257911 rows, 5.56817235E7 cpu, 1.8482916E7 io, 7085484.0 network, 3118494.984050636 memory}
         :     :           +- Union(all=[true], union=[X0, X1]): rowcount = 82792.5, cumulative cost = {1390784.5 rows, 5.43570435E7 cpu, 1.8482916E7 io, 7085484.0 network, 2158000.0 memory}
         :     :              :- Calc(select=[y AS X0, x AS X1]): rowcount = 38511.9, cumulative cost = {333816.80000000005 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :     :              :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 38511.9, cumulative cost = {295304.9 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :     :              :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :     :              :     +- Exchange(distribution=[broadcast]): rowcount = 47.0, cumulative cost = {94.0 rows, 7520.0 cpu, 564.0 io, 564.0 network, 0.0 memory}
         :     :              :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 47.0, cumulative cost = {47.0 rows, 0.0 cpu, 564.0 io, 0.0 network, 0.0 memory}
         :     :              +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 44280.6, cumulative cost = {974175.2 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
         :     :                 +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 44280.6, cumulative cost = {929894.6 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
         :     :                    :- Exchange(distribution=[hash[y]]): rowcount = 256699.0, cumulative cost = {513398.0 rows, 4.3125432E7 cpu, 6160776.0 io, 6160776.0 network, 0.0 memory}
         :     :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :     :                    +- Exchange(distribution=[hash[x]]): rowcount = 38505.0, cumulative cost = {372216.0 rows, 6725699.0 cpu, 6160800.0 io, 924144.0 network, 28.0 memory}
         :     :                       +- Calc(select=[x, y0]): rowcount = 38505.0, cumulative cost = {333711.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
         :     :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 38505.0, cumulative cost = {295206.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
         :     :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :     :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :     :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :     +- Calc(select=[y, x00 AS x000]): rowcount = 45146.939999999995, cumulative cost = {1622147.6799999997 rows, 1.051851726E8 cpu, 1.8482352E7 io, 1.43084304E7 network, 4636021.6 memory}
         :        +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x00], build=[right]): rowcount = 45146.939999999995, cumulative cost = {1577000.7399999998 rows, 1.051851726E8 cpu, 1.8482352E7 io, 1.43084304E7 network, 4636021.6 memory}
         :           :- Exchange(distribution=[hash[x]]): rowcount = 256699.0, cumulative cost = {513398.0 rows, 4.3125432E7 cpu, 6160776.0 io, 6160776.0 network, 0.0 memory}
         :           :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :           +- Exchange(distribution=[hash[y]]): rowcount = 44280.6, cumulative cost = {1018455.7999999999 rows, 5.96519038E7 cpu, 1.2321576E7 io, 8147654.4 network, 2156308.0 memory}
         :              +- Calc(select=[y, x0 AS x00]): rowcount = 44280.6, cumulative cost = {974175.2 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
         :                 +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x0], build=[right]): rowcount = 44280.6, cumulative cost = {929894.6 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
         :                    :- Exchange(distribution=[hash[x]]): rowcount = 256699.0, cumulative cost = {513398.0 rows, 4.3125432E7 cpu, 6160776.0 io, 6160776.0 network, 0.0 memory}
         :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :                    +- Exchange(distribution=[hash[y]]): rowcount = 38505.0, cumulative cost = {372216.0 rows, 6725699.0 cpu, 6160800.0 io, 924144.0 network, 28.0 memory}
         :                       +- Calc(select=[y, x0]): rowcount = 38505.0, cumulative cost = {333711.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
         :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, x0, y0], build=[right]): rowcount = 38505.0, cumulative cost = {295206.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
         :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x0 AS X0, X0 AS X1]): rowcount = 11890.411517830302, cumulative cost = {2225916.489895431 rows, 7.915268396620572E7 cpu, 3.0805152E7 io, 9709005.080890825 network, 7078225.479145579 memory}
            +- HashJoin(joinType=[InnerJoin], where=[=(y, x)], select=[x, X0, y, x0], build=[right]): rowcount = 11890.411517830302, cumulative cost = {2214026.0783776008 rows, 7.915268396620572E7 cpu, 3.0805152E7 io, 9709005.080890825 network, 7078225.479145579 memory}
               :- Exchange(distribution=[hash[x]]): rowcount = 40756.010118868675, cumulative cost = {1829782.4668597705 rows, 6.998510948525476E7 cpu, 2.4643692E7 io, 8783999.480890825 network, 4919423.079145579 memory}
               :  +- Calc(select=[x, X0]): rowcount = 40756.010118868675, cumulative cost = {1789026.4567409018 rows, 6.313809978528483E7 cpu, 2.4643692E7 io, 7805855.238037977 network, 4919423.079145579 memory}
               :     +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[x, y, X0, X1], isBroadcast=[true], build=[right]): rowcount = 40756.010118868675, cumulative cost = {1748270.4466220331 rows, 6.313809978528483E7 cpu, 2.4643692E7 io, 7805855.238037977 network, 4919423.079145579 memory}
               :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
               :        +- Exchange(distribution=[broadcast]): rowcount = 15007.73412579119, cumulative cost = {1450815.4365031645 rows, 6.09644459122785E7 cpu, 1.8482916E7 io, 7805855.238037977 network, 4078989.9681012724 memory}
               :           +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 15007.73412579119, cumulative cost = {1435807.7023773734 rows, 5.856320845215191E7 cpu, 1.8482916E7 io, 7445669.619018989 network, 4078989.9681012724 memory}
               :              +- Exchange(distribution=[hash[X0, X1]]): rowcount = 15007.73412579119, cumulative cost = {1420799.9682515822 rows, 5.832308470613925E7 cpu, 1.8482916E7 io, 7445669.619018989 network, 3118494.984050636 memory}
               :                 +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 15007.73412579119, cumulative cost = {1405792.2341257911 rows, 5.56817235E7 cpu, 1.8482916E7 io, 7085484.0 network, 3118494.984050636 memory}
               :                    +- Union(all=[true], union=[X0, X1]): rowcount = 82792.5, cumulative cost = {1390784.5 rows, 5.43570435E7 cpu, 1.8482916E7 io, 7085484.0 network, 2158000.0 memory}
               :                       :- Calc(select=[y AS X0, x AS X1]): rowcount = 38511.9, cumulative cost = {333816.80000000005 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
               :                       :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 38511.9, cumulative cost = {295304.9 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
               :                       :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
               :                       :     +- Exchange(distribution=[broadcast]): rowcount = 47.0, cumulative cost = {94.0 rows, 7520.0 cpu, 564.0 io, 564.0 network, 0.0 memory}
               :                       :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 47.0, cumulative cost = {47.0 rows, 0.0 cpu, 564.0 io, 0.0 network, 0.0 memory}
               :                       +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 44280.6, cumulative cost = {974175.2 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
               :                          +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 44280.6, cumulative cost = {929894.6 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
               :                             :- Exchange(distribution=[hash[y]]): rowcount = 256699.0, cumulative cost = {513398.0 rows, 4.3125432E7 cpu, 6160776.0 io, 6160776.0 network, 0.0 memory}
               :                             :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
               :                             +- Exchange(distribution=[hash[x]]): rowcount = 38505.0, cumulative cost = {372216.0 rows, 6725699.0 cpu, 6160800.0 io, 924144.0 network, 28.0 memory}
               :                                +- Calc(select=[x, y0]): rowcount = 38505.0, cumulative cost = {333711.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
               :                                   +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 38505.0, cumulative cost = {295206.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
               :                                      :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
               :                                      +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
               :                                         +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[hash[y]]): rowcount = 38513.4, cumulative cost = {372353.20000000007 rows, 8533419.2 cpu, 6161460.0 io, 925005.6000000001 network, 2052.0 memory}
                  +- Calc(select=[y, x0]): rowcount = 38513.4, cumulative cost = {333839.80000000005 rows, 2063168.0 cpu, 6161460.0 io, 684.0 network, 2052.0 memory}
                     +- HashJoin(joinType=[InnerJoin], where=[=(x0, x)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 38513.4, cumulative cost = {295326.4 rows, 2063168.0 cpu, 6161460.0 io, 684.0 network, 2052.0 memory}
                        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
                        +- Exchange(distribution=[broadcast]): rowcount = 57.0, cumulative cost = {114.0 rows, 9120.0 cpu, 684.0 io, 684.0 network, 0.0 memory}
                           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 57.0, cumulative cost = {57.0 rows, 0.0 cpu, 684.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[x000 AS X0, X0 AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[X0, X1, y, x000], isBroadcast=[true], build=[left])\n:     :- [#1] Exchange(distribution=[broadcast])\n:     +- Calc(select=[y, x00 AS x000])\n:        +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x00], build=[right])\n:           :- [#4] Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])\n:           +- [#5] Exchange(distribution=[hash[y]])\n+- Calc(select=[x0 AS X0, X0 AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(y = x)], select=[x, X0, y, x0], build=[right])\n      :- [#2] Exchange(distribution=[hash[x]])\n      +- [#3] Exchange(distribution=[hash[y]])\n])
         :- Exchange(distribution=[broadcast])(reuse_id=[2])
         :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
         :     +- Exchange(distribution=[hash[X0, X1]])
         :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
         :           +- MultipleInput(readOrder=[1,0,2,1], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[y AS X0, x AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:     :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- Calc(select=[y0 AS X0, x AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])\n      :- [#3] Exchange(distribution=[hash[y]])\n      +- [#4] Exchange(distribution=[hash[x]])\n])
         :              :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :              :- Exchange(distribution=[broadcast])
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :              :- Exchange(distribution=[hash[y]])
         :              :  +- Reused(reference_id=[1])
         :              +- Exchange(distribution=[hash[x]])
         :                 +- Calc(select=[x, y0])
         :                    +- NestedLoopJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])
         :                       :- Reused(reference_id=[1])
         :                       +- Exchange(distribution=[broadcast])(reuse_id=[3])
         :                          +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
         :- Exchange(distribution=[hash[x]])
         :  +- Calc(select=[x, X0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[x, y, X0, X1], isBroadcast=[true], build=[right])
         :        :- Exchange(distribution=[any], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Reused(reference_id=[2])
         :- Exchange(distribution=[hash[y]])
         :  +- Calc(select=[y, x0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(x0 = x)], select=[x, y, x0], isBroadcast=[true], build=[right])
         :        :- Reused(reference_id=[1])
         :        +- Exchange(distribution=[broadcast])
         :           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])
         :  +- Reused(reference_id=[1])
         +- Exchange(distribution=[hash[y]])
            +- Calc(select=[y, x0 AS x00])
               +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x0], build=[right])
                  :- Exchange(distribution=[hash[x]])
                  :  +- Reused(reference_id=[1])
                  +- Exchange(distribution=[hash[y]])
                     +- Calc(select=[y, x0])
                        +- NestedLoopJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, x0, y0], build=[right])
                           :- Reused(reference_id=[1])
                           +- Reused(reference_id=[3])

Job has been submitted with JobID 6966d545877132f439172d16c0070b2f
WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT s_2.y AS X0, r_0.x AS X1 FROM s AS s_2 INNER JOIN r AS r_1 on s_2.x = r_1.y INNER JOIN r AS r_0 on r_1.x = r_0.y )), p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1 FROM p12 AS p12_4 INNER JOIN r AS r_3 ON r_3.y = p12_4.X1 INNER JOIN r AS r_2 ON r_2.y = r_3.x INNER JOIN r AS r_1 ON r_1.y = r_2.x INNER JOIN s as s_0 ON s_0.y = r_1.x UNION (SELECT a_0.x AS X0, p12_3.X0 AS X1 FROM a AS a_0 INNER JOIN r AS r_1 ON a_0.x = r_1.x INNER JOIN r AS r_2 ON r_1.y = r_2.x INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...

------------> using sink uuid: c38e53b4_a803_424e_923d_56187c452f94

Adding statistics for table s number 3 
Adding statistics for table a number 3 
Adding statistics for table b number 3 
Adding statistics for table r number 3 
Adding statistics for table t number 3 
sql argument: WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1
             FROM r AS r_0
                      INNER JOIN b AS b_1 ON r_0.y = b_1.x
             UNION
             (SELECT s_2.y AS X0, r_0.x AS X1
              FROM s AS s_2
                       INNER JOIN r AS r_1 on s_2.x = r_1.y
                       INNER JOIN r AS r_0 on r_1.x = r_0.y
             )),
     p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1
            FROM p12 AS p12_4
                INNER JOIN r AS r_3 ON r_3.y = p12_4.X1
                INNER JOIN r AS r_2 ON r_2.y = r_3.x
                INNER JOIN r AS r_1 ON r_1.y = r_2.x
                INNER JOIN s as s_0 ON s_0.y = r_1.x
            UNION
            (SELECT a_0.x AS X0, p12_3.X0 AS X1
            FROM a AS a_0
                     INNER JOIN r AS r_1 ON a_0.x = r_1.x
                     INNER JOIN r AS r_2 ON r_1.y = r_2.x
                     INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalProject(X0=[$8], X1=[$0])
   :  +- LogicalJoin(condition=[=($9, $6)], joinType=[inner])
   :     :- LogicalJoin(condition=[=($7, $4)], joinType=[inner])
   :     :  :- LogicalJoin(condition=[=($5, $2)], joinType=[inner])
   :     :  :  :- LogicalJoin(condition=[=($3, $1)], joinType=[inner])
   :     :  :  :  :- LogicalUnion(all=[false])
   :     :  :  :  :  :- LogicalProject(X0=[$1], X1=[$0])
   :     :  :  :  :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :     :  :  :  :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :     :  :  :  :  +- LogicalProject(X0=[$1], X1=[$4])
   :     :  :  :  :     +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
   :     :  :  :  :        :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
   :     :  :  :  :        :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$5])
      +- LogicalJoin(condition=[=($4, $6)], joinType=[inner])
         :- LogicalJoin(condition=[=($2, $3)], joinType=[inner])
         :  :- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :  :  :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         +- LogicalUnion(all=[false])
            :- LogicalProject(X0=[$1], X1=[$0])
            :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
            :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
            :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
            +- LogicalProject(X0=[$1], X1=[$4])
               +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
                  :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
                  :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
                  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
                  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 3790.9948130732264, cumulative cost = {5349212.605712252 rows, 2.4686694229042447E8 cpu, 6.777042E7 io, 3.1914274594442565E7 network, 1.7118917494364534E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 3790.9948130732264, cumulative cost = {5345421.610899178 rows, 2.468062863734153E8 cpu, 6.777042E7 io, 3.1914274594442565E7 network, 1.6876293826327845E7 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 3790.9948130732264, cumulative cost = {5341630.616086105 rows, 2.461390712863144E8 cpu, 6.777042E7 io, 3.1823290718928806E7 network, 1.6876293826327845E7 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 20913.612636698977, cumulative cost = {5337839.621273031 rows, 2.4580445348412722E8 cpu, 6.777042E7 io, 3.1823290718928806E7 network, 1.6633670158291157E7 memory}
         :- Calc(select=[x000 AS X0, X0 AS X1]): rowcount = 9023.201118868677, cumulative cost = {3091009.5187409017 rows, 1.6663085590528482E8 cpu, 3.6965268E7 io, 2.211428563803798E7 network, 9555444.679145578 memory}
         :  +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[X0, X1, y, x000], isBroadcast=[true], build=[left]): rowcount = 9023.201118868677, cumulative cost = {3081986.317622033 rows, 1.6663085590528482E8 cpu, 3.6965268E7 io, 2.211428563803798E7 network, 9555444.679145578 memory}
         :     :- Exchange(distribution=[broadcast]): rowcount = 15007.73412579119, cumulative cost = {1450815.4365031645 rows, 6.09644459122785E7 cpu, 1.8482916E7 io, 7805855.238037977 network, 4078989.9681012724 memory}
         :     :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 15007.73412579119, cumulative cost = {1435807.7023773734 rows, 5.856320845215191E7 cpu, 1.8482916E7 io, 7445669.619018989 network, 4078989.9681012724 memory}
         :     :     +- Exchange(distribution=[hash[X0, X1]]): rowcount = 15007.73412579119, cumulative cost = {1420799.9682515822 rows, 5.832308470613925E7 cpu, 1.8482916E7 io, 7445669.619018989 network, 3118494.984050636 memory}
         :     :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 15007.73412579119, cumulative cost = {1405792.2341257911 rows, 5.56817235E7 cpu, 1.8482916E7 io, 7085484.0 network, 3118494.984050636 memory}
         :     :           +- Union(all=[true], union=[X0, X1]): rowcount = 82792.5, cumulative cost = {1390784.5 rows, 5.43570435E7 cpu, 1.8482916E7 io, 7085484.0 network, 2158000.0 memory}
         :     :              :- Calc(select=[y AS X0, x AS X1]): rowcount = 38511.9, cumulative cost = {333816.80000000005 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :     :              :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 38511.9, cumulative cost = {295304.9 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :     :              :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :     :              :     +- Exchange(distribution=[broadcast]): rowcount = 47.0, cumulative cost = {94.0 rows, 7520.0 cpu, 564.0 io, 564.0 network, 0.0 memory}
         :     :              :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 47.0, cumulative cost = {47.0 rows, 0.0 cpu, 564.0 io, 0.0 network, 0.0 memory}
         :     :              +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 44280.6, cumulative cost = {974175.2 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
         :     :                 +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 44280.6, cumulative cost = {929894.6 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
         :     :                    :- Exchange(distribution=[hash[y]]): rowcount = 256699.0, cumulative cost = {513398.0 rows, 4.3125432E7 cpu, 6160776.0 io, 6160776.0 network, 0.0 memory}
         :     :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :     :                    +- Exchange(distribution=[hash[x]]): rowcount = 38505.0, cumulative cost = {372216.0 rows, 6725699.0 cpu, 6160800.0 io, 924144.0 network, 28.0 memory}
         :     :                       +- Calc(select=[x, y0]): rowcount = 38505.0, cumulative cost = {333711.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
         :     :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 38505.0, cumulative cost = {295206.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
         :     :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :     :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :     :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :     +- Calc(select=[y, x00 AS x000]): rowcount = 45146.939999999995, cumulative cost = {1622147.6799999997 rows, 1.051851726E8 cpu, 1.8482352E7 io, 1.43084304E7 network, 4636021.6 memory}
         :        +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x00], build=[right]): rowcount = 45146.939999999995, cumulative cost = {1577000.7399999998 rows, 1.051851726E8 cpu, 1.8482352E7 io, 1.43084304E7 network, 4636021.6 memory}
         :           :- Exchange(distribution=[hash[x]]): rowcount = 256699.0, cumulative cost = {513398.0 rows, 4.3125432E7 cpu, 6160776.0 io, 6160776.0 network, 0.0 memory}
         :           :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :           +- Exchange(distribution=[hash[y]]): rowcount = 44280.6, cumulative cost = {1018455.7999999999 rows, 5.96519038E7 cpu, 1.2321576E7 io, 8147654.4 network, 2156308.0 memory}
         :              +- Calc(select=[y, x0 AS x00]): rowcount = 44280.6, cumulative cost = {974175.2 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
         :                 +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x0], build=[right]): rowcount = 44280.6, cumulative cost = {929894.6 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
         :                    :- Exchange(distribution=[hash[x]]): rowcount = 256699.0, cumulative cost = {513398.0 rows, 4.3125432E7 cpu, 6160776.0 io, 6160776.0 network, 0.0 memory}
         :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :                    +- Exchange(distribution=[hash[y]]): rowcount = 38505.0, cumulative cost = {372216.0 rows, 6725699.0 cpu, 6160800.0 io, 924144.0 network, 28.0 memory}
         :                       +- Calc(select=[y, x0]): rowcount = 38505.0, cumulative cost = {333711.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
         :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, x0, y0], build=[right]): rowcount = 38505.0, cumulative cost = {295206.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
         :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x0 AS X0, X0 AS X1]): rowcount = 11890.411517830302, cumulative cost = {2225916.489895431 rows, 7.915268396620572E7 cpu, 3.0805152E7 io, 9709005.080890825 network, 7078225.479145579 memory}
            +- HashJoin(joinType=[InnerJoin], where=[=(y, x)], select=[x, X0, y, x0], build=[right]): rowcount = 11890.411517830302, cumulative cost = {2214026.0783776008 rows, 7.915268396620572E7 cpu, 3.0805152E7 io, 9709005.080890825 network, 7078225.479145579 memory}
               :- Exchange(distribution=[hash[x]]): rowcount = 40756.010118868675, cumulative cost = {1829782.4668597705 rows, 6.998510948525476E7 cpu, 2.4643692E7 io, 8783999.480890825 network, 4919423.079145579 memory}
               :  +- Calc(select=[x, X0]): rowcount = 40756.010118868675, cumulative cost = {1789026.4567409018 rows, 6.313809978528483E7 cpu, 2.4643692E7 io, 7805855.238037977 network, 4919423.079145579 memory}
               :     +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[x, y, X0, X1], isBroadcast=[true], build=[right]): rowcount = 40756.010118868675, cumulative cost = {1748270.4466220331 rows, 6.313809978528483E7 cpu, 2.4643692E7 io, 7805855.238037977 network, 4919423.079145579 memory}
               :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
               :        +- Exchange(distribution=[broadcast]): rowcount = 15007.73412579119, cumulative cost = {1450815.4365031645 rows, 6.09644459122785E7 cpu, 1.8482916E7 io, 7805855.238037977 network, 4078989.9681012724 memory}
               :           +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 15007.73412579119, cumulative cost = {1435807.7023773734 rows, 5.856320845215191E7 cpu, 1.8482916E7 io, 7445669.619018989 network, 4078989.9681012724 memory}
               :              +- Exchange(distribution=[hash[X0, X1]]): rowcount = 15007.73412579119, cumulative cost = {1420799.9682515822 rows, 5.832308470613925E7 cpu, 1.8482916E7 io, 7445669.619018989 network, 3118494.984050636 memory}
               :                 +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 15007.73412579119, cumulative cost = {1405792.2341257911 rows, 5.56817235E7 cpu, 1.8482916E7 io, 7085484.0 network, 3118494.984050636 memory}
               :                    +- Union(all=[true], union=[X0, X1]): rowcount = 82792.5, cumulative cost = {1390784.5 rows, 5.43570435E7 cpu, 1.8482916E7 io, 7085484.0 network, 2158000.0 memory}
               :                       :- Calc(select=[y AS X0, x AS X1]): rowcount = 38511.9, cumulative cost = {333816.80000000005 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
               :                       :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 38511.9, cumulative cost = {295304.9 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
               :                       :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
               :                       :     +- Exchange(distribution=[broadcast]): rowcount = 47.0, cumulative cost = {94.0 rows, 7520.0 cpu, 564.0 io, 564.0 network, 0.0 memory}
               :                       :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 47.0, cumulative cost = {47.0 rows, 0.0 cpu, 564.0 io, 0.0 network, 0.0 memory}
               :                       +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 44280.6, cumulative cost = {974175.2 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
               :                          +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 44280.6, cumulative cost = {929894.6 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
               :                             :- Exchange(distribution=[hash[y]]): rowcount = 256699.0, cumulative cost = {513398.0 rows, 4.3125432E7 cpu, 6160776.0 io, 6160776.0 network, 0.0 memory}
               :                             :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
               :                             +- Exchange(distribution=[hash[x]]): rowcount = 38505.0, cumulative cost = {372216.0 rows, 6725699.0 cpu, 6160800.0 io, 924144.0 network, 28.0 memory}
               :                                +- Calc(select=[x, y0]): rowcount = 38505.0, cumulative cost = {333711.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
               :                                   +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 38505.0, cumulative cost = {295206.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
               :                                      :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
               :                                      +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
               :                                         +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[hash[y]]): rowcount = 38513.4, cumulative cost = {372353.20000000007 rows, 8533419.2 cpu, 6161460.0 io, 925005.6000000001 network, 2052.0 memory}
                  +- Calc(select=[y, x0]): rowcount = 38513.4, cumulative cost = {333839.80000000005 rows, 2063168.0 cpu, 6161460.0 io, 684.0 network, 2052.0 memory}
                     +- HashJoin(joinType=[InnerJoin], where=[=(x0, x)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 38513.4, cumulative cost = {295326.4 rows, 2063168.0 cpu, 6161460.0 io, 684.0 network, 2052.0 memory}
                        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
                        +- Exchange(distribution=[broadcast]): rowcount = 57.0, cumulative cost = {114.0 rows, 9120.0 cpu, 684.0 io, 684.0 network, 0.0 memory}
                           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 57.0, cumulative cost = {57.0 rows, 0.0 cpu, 684.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[x000 AS X0, X0 AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[X0, X1, y, x000], isBroadcast=[true], build=[left])\n:     :- [#1] Exchange(distribution=[broadcast])\n:     +- Calc(select=[y, x00 AS x000])\n:        +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x00], build=[right])\n:           :- [#4] Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])\n:           +- [#5] Exchange(distribution=[hash[y]])\n+- Calc(select=[x0 AS X0, X0 AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(y = x)], select=[x, X0, y, x0], build=[right])\n      :- [#2] Exchange(distribution=[hash[x]])\n      +- [#3] Exchange(distribution=[hash[y]])\n])
         :- Exchange(distribution=[broadcast])(reuse_id=[2])
         :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
         :     +- Exchange(distribution=[hash[X0, X1]])
         :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
         :           +- MultipleInput(readOrder=[1,0,2,1], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[y AS X0, x AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:     :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- Calc(select=[y0 AS X0, x AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])\n      :- [#3] Exchange(distribution=[hash[y]])\n      +- [#4] Exchange(distribution=[hash[x]])\n])
         :              :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :              :- Exchange(distribution=[broadcast])
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :              :- Exchange(distribution=[hash[y]])
         :              :  +- Reused(reference_id=[1])
         :              +- Exchange(distribution=[hash[x]])
         :                 +- Calc(select=[x, y0])
         :                    +- NestedLoopJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])
         :                       :- Reused(reference_id=[1])
         :                       +- Exchange(distribution=[broadcast])(reuse_id=[3])
         :                          +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
         :- Exchange(distribution=[hash[x]])
         :  +- Calc(select=[x, X0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[x, y, X0, X1], isBroadcast=[true], build=[right])
         :        :- Exchange(distribution=[any], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Reused(reference_id=[2])
         :- Exchange(distribution=[hash[y]])
         :  +- Calc(select=[y, x0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(x0 = x)], select=[x, y, x0], isBroadcast=[true], build=[right])
         :        :- Reused(reference_id=[1])
         :        +- Exchange(distribution=[broadcast])
         :           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])
         :  +- Reused(reference_id=[1])
         +- Exchange(distribution=[hash[y]])
            +- Calc(select=[y, x0 AS x00])
               +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x0], build=[right])
                  :- Exchange(distribution=[hash[x]])
                  :  +- Reused(reference_id=[1])
                  +- Exchange(distribution=[hash[y]])
                     +- Calc(select=[y, x0])
                        +- NestedLoopJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, x0, y0], build=[right])
                           :- Reused(reference_id=[1])
                           +- Reused(reference_id=[3])

Job has been submitted with JobID 6523fa3fac58d1ba46f17b11e1e46b13
WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT s_2.y AS X0, r_0.x AS X1 FROM s AS s_2 INNER JOIN r AS r_1 on s_2.x = r_1.y INNER JOIN r AS r_0 on r_1.x = r_0.y )), p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1 FROM p12 AS p12_4 INNER JOIN r AS r_3 ON r_3.y = p12_4.X1 INNER JOIN r AS r_2 ON r_2.y = r_3.x INNER JOIN r AS r_1 ON r_1.y = r_2.x INNER JOIN s as s_0 ON s_0.y = r_1.x UNION (SELECT a_0.x AS X0, p12_3.X0 AS X1 FROM a AS a_0 INNER JOIN r AS r_1 ON a_0.x = r_1.x INNER JOIN r AS r_2 ON r_1.y = r_2.x INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...

------------> using sink uuid: dfeecd2a_f097_47ab_8fd6_d2eec047036a

Adding statistics for table s number 3 
Adding statistics for table a number 3 
Adding statistics for table b number 3 
Adding statistics for table r number 3 
Adding statistics for table t number 3 
sql argument: WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1
             FROM r AS r_0
                      INNER JOIN b AS b_1 ON r_0.y = b_1.x
             UNION
             (SELECT s_2.y AS X0, r_0.x AS X1
              FROM s AS s_2
                       INNER JOIN r AS r_1 on s_2.x = r_1.y
                       INNER JOIN r AS r_0 on r_1.x = r_0.y
             )),
     p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1
            FROM p12 AS p12_4
                INNER JOIN r AS r_3 ON r_3.y = p12_4.X1
                INNER JOIN r AS r_2 ON r_2.y = r_3.x
                INNER JOIN r AS r_1 ON r_1.y = r_2.x
                INNER JOIN s as s_0 ON s_0.y = r_1.x
            UNION
            (SELECT a_0.x AS X0, p12_3.X0 AS X1
            FROM a AS a_0
                     INNER JOIN r AS r_1 ON a_0.x = r_1.x
                     INNER JOIN r AS r_2 ON r_1.y = r_2.x
                     INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalProject(X0=[$8], X1=[$0])
   :  +- LogicalJoin(condition=[=($9, $6)], joinType=[inner])
   :     :- LogicalJoin(condition=[=($7, $4)], joinType=[inner])
   :     :  :- LogicalJoin(condition=[=($5, $2)], joinType=[inner])
   :     :  :  :- LogicalJoin(condition=[=($3, $1)], joinType=[inner])
   :     :  :  :  :- LogicalUnion(all=[false])
   :     :  :  :  :  :- LogicalProject(X0=[$1], X1=[$0])
   :     :  :  :  :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :     :  :  :  :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :     :  :  :  :  +- LogicalProject(X0=[$1], X1=[$4])
   :     :  :  :  :     +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
   :     :  :  :  :        :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
   :     :  :  :  :        :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$5])
      +- LogicalJoin(condition=[=($4, $6)], joinType=[inner])
         :- LogicalJoin(condition=[=($2, $3)], joinType=[inner])
         :  :- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :  :  :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         +- LogicalUnion(all=[false])
            :- LogicalProject(X0=[$1], X1=[$0])
            :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
            :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
            :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
            +- LogicalProject(X0=[$1], X1=[$4])
               +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
                  :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
                  :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
                  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
                  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 3790.9948130732264, cumulative cost = {5349212.605712252 rows, 2.4686694229042447E8 cpu, 6.777042E7 io, 3.1914274594442565E7 network, 1.7118917494364534E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 3790.9948130732264, cumulative cost = {5345421.610899178 rows, 2.468062863734153E8 cpu, 6.777042E7 io, 3.1914274594442565E7 network, 1.6876293826327845E7 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 3790.9948130732264, cumulative cost = {5341630.616086105 rows, 2.461390712863144E8 cpu, 6.777042E7 io, 3.1823290718928806E7 network, 1.6876293826327845E7 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 20913.612636698977, cumulative cost = {5337839.621273031 rows, 2.4580445348412722E8 cpu, 6.777042E7 io, 3.1823290718928806E7 network, 1.6633670158291157E7 memory}
         :- Calc(select=[x000 AS X0, X0 AS X1]): rowcount = 9023.201118868677, cumulative cost = {3091009.5187409017 rows, 1.6663085590528482E8 cpu, 3.6965268E7 io, 2.211428563803798E7 network, 9555444.679145578 memory}
         :  +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[X0, X1, y, x000], isBroadcast=[true], build=[left]): rowcount = 9023.201118868677, cumulative cost = {3081986.317622033 rows, 1.6663085590528482E8 cpu, 3.6965268E7 io, 2.211428563803798E7 network, 9555444.679145578 memory}
         :     :- Exchange(distribution=[broadcast]): rowcount = 15007.73412579119, cumulative cost = {1450815.4365031645 rows, 6.09644459122785E7 cpu, 1.8482916E7 io, 7805855.238037977 network, 4078989.9681012724 memory}
         :     :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 15007.73412579119, cumulative cost = {1435807.7023773734 rows, 5.856320845215191E7 cpu, 1.8482916E7 io, 7445669.619018989 network, 4078989.9681012724 memory}
         :     :     +- Exchange(distribution=[hash[X0, X1]]): rowcount = 15007.73412579119, cumulative cost = {1420799.9682515822 rows, 5.832308470613925E7 cpu, 1.8482916E7 io, 7445669.619018989 network, 3118494.984050636 memory}
         :     :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 15007.73412579119, cumulative cost = {1405792.2341257911 rows, 5.56817235E7 cpu, 1.8482916E7 io, 7085484.0 network, 3118494.984050636 memory}
         :     :           +- Union(all=[true], union=[X0, X1]): rowcount = 82792.5, cumulative cost = {1390784.5 rows, 5.43570435E7 cpu, 1.8482916E7 io, 7085484.0 network, 2158000.0 memory}
         :     :              :- Calc(select=[y AS X0, x AS X1]): rowcount = 38511.9, cumulative cost = {333816.80000000005 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :     :              :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 38511.9, cumulative cost = {295304.9 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :     :              :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :     :              :     +- Exchange(distribution=[broadcast]): rowcount = 47.0, cumulative cost = {94.0 rows, 7520.0 cpu, 564.0 io, 564.0 network, 0.0 memory}
         :     :              :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 47.0, cumulative cost = {47.0 rows, 0.0 cpu, 564.0 io, 0.0 network, 0.0 memory}
         :     :              +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 44280.6, cumulative cost = {974175.2 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
         :     :                 +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 44280.6, cumulative cost = {929894.6 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
         :     :                    :- Exchange(distribution=[hash[y]]): rowcount = 256699.0, cumulative cost = {513398.0 rows, 4.3125432E7 cpu, 6160776.0 io, 6160776.0 network, 0.0 memory}
         :     :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :     :                    +- Exchange(distribution=[hash[x]]): rowcount = 38505.0, cumulative cost = {372216.0 rows, 6725699.0 cpu, 6160800.0 io, 924144.0 network, 28.0 memory}
         :     :                       +- Calc(select=[x, y0]): rowcount = 38505.0, cumulative cost = {333711.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
         :     :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 38505.0, cumulative cost = {295206.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
         :     :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :     :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :     :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :     +- Calc(select=[y, x00 AS x000]): rowcount = 45146.939999999995, cumulative cost = {1622147.6799999997 rows, 1.051851726E8 cpu, 1.8482352E7 io, 1.43084304E7 network, 4636021.6 memory}
         :        +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x00], build=[right]): rowcount = 45146.939999999995, cumulative cost = {1577000.7399999998 rows, 1.051851726E8 cpu, 1.8482352E7 io, 1.43084304E7 network, 4636021.6 memory}
         :           :- Exchange(distribution=[hash[x]]): rowcount = 256699.0, cumulative cost = {513398.0 rows, 4.3125432E7 cpu, 6160776.0 io, 6160776.0 network, 0.0 memory}
         :           :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :           +- Exchange(distribution=[hash[y]]): rowcount = 44280.6, cumulative cost = {1018455.7999999999 rows, 5.96519038E7 cpu, 1.2321576E7 io, 8147654.4 network, 2156308.0 memory}
         :              +- Calc(select=[y, x0 AS x00]): rowcount = 44280.6, cumulative cost = {974175.2 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
         :                 +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x0], build=[right]): rowcount = 44280.6, cumulative cost = {929894.6 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
         :                    :- Exchange(distribution=[hash[x]]): rowcount = 256699.0, cumulative cost = {513398.0 rows, 4.3125432E7 cpu, 6160776.0 io, 6160776.0 network, 0.0 memory}
         :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :                    +- Exchange(distribution=[hash[y]]): rowcount = 38505.0, cumulative cost = {372216.0 rows, 6725699.0 cpu, 6160800.0 io, 924144.0 network, 28.0 memory}
         :                       +- Calc(select=[y, x0]): rowcount = 38505.0, cumulative cost = {333711.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
         :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, x0, y0], build=[right]): rowcount = 38505.0, cumulative cost = {295206.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
         :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x0 AS X0, X0 AS X1]): rowcount = 11890.411517830302, cumulative cost = {2225916.489895431 rows, 7.915268396620572E7 cpu, 3.0805152E7 io, 9709005.080890825 network, 7078225.479145579 memory}
            +- HashJoin(joinType=[InnerJoin], where=[=(y, x)], select=[x, X0, y, x0], build=[right]): rowcount = 11890.411517830302, cumulative cost = {2214026.0783776008 rows, 7.915268396620572E7 cpu, 3.0805152E7 io, 9709005.080890825 network, 7078225.479145579 memory}
               :- Exchange(distribution=[hash[x]]): rowcount = 40756.010118868675, cumulative cost = {1829782.4668597705 rows, 6.998510948525476E7 cpu, 2.4643692E7 io, 8783999.480890825 network, 4919423.079145579 memory}
               :  +- Calc(select=[x, X0]): rowcount = 40756.010118868675, cumulative cost = {1789026.4567409018 rows, 6.313809978528483E7 cpu, 2.4643692E7 io, 7805855.238037977 network, 4919423.079145579 memory}
               :     +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[x, y, X0, X1], isBroadcast=[true], build=[right]): rowcount = 40756.010118868675, cumulative cost = {1748270.4466220331 rows, 6.313809978528483E7 cpu, 2.4643692E7 io, 7805855.238037977 network, 4919423.079145579 memory}
               :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
               :        +- Exchange(distribution=[broadcast]): rowcount = 15007.73412579119, cumulative cost = {1450815.4365031645 rows, 6.09644459122785E7 cpu, 1.8482916E7 io, 7805855.238037977 network, 4078989.9681012724 memory}
               :           +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 15007.73412579119, cumulative cost = {1435807.7023773734 rows, 5.856320845215191E7 cpu, 1.8482916E7 io, 7445669.619018989 network, 4078989.9681012724 memory}
               :              +- Exchange(distribution=[hash[X0, X1]]): rowcount = 15007.73412579119, cumulative cost = {1420799.9682515822 rows, 5.832308470613925E7 cpu, 1.8482916E7 io, 7445669.619018989 network, 3118494.984050636 memory}
               :                 +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 15007.73412579119, cumulative cost = {1405792.2341257911 rows, 5.56817235E7 cpu, 1.8482916E7 io, 7085484.0 network, 3118494.984050636 memory}
               :                    +- Union(all=[true], union=[X0, X1]): rowcount = 82792.5, cumulative cost = {1390784.5 rows, 5.43570435E7 cpu, 1.8482916E7 io, 7085484.0 network, 2158000.0 memory}
               :                       :- Calc(select=[y AS X0, x AS X1]): rowcount = 38511.9, cumulative cost = {333816.80000000005 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
               :                       :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 38511.9, cumulative cost = {295304.9 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
               :                       :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
               :                       :     +- Exchange(distribution=[broadcast]): rowcount = 47.0, cumulative cost = {94.0 rows, 7520.0 cpu, 564.0 io, 564.0 network, 0.0 memory}
               :                       :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 47.0, cumulative cost = {47.0 rows, 0.0 cpu, 564.0 io, 0.0 network, 0.0 memory}
               :                       +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 44280.6, cumulative cost = {974175.2 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
               :                          +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 44280.6, cumulative cost = {929894.6 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
               :                             :- Exchange(distribution=[hash[y]]): rowcount = 256699.0, cumulative cost = {513398.0 rows, 4.3125432E7 cpu, 6160776.0 io, 6160776.0 network, 0.0 memory}
               :                             :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
               :                             +- Exchange(distribution=[hash[x]]): rowcount = 38505.0, cumulative cost = {372216.0 rows, 6725699.0 cpu, 6160800.0 io, 924144.0 network, 28.0 memory}
               :                                +- Calc(select=[x, y0]): rowcount = 38505.0, cumulative cost = {333711.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
               :                                   +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 38505.0, cumulative cost = {295206.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
               :                                      :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
               :                                      +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
               :                                         +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[hash[y]]): rowcount = 38513.4, cumulative cost = {372353.20000000007 rows, 8533419.2 cpu, 6161460.0 io, 925005.6000000001 network, 2052.0 memory}
                  +- Calc(select=[y, x0]): rowcount = 38513.4, cumulative cost = {333839.80000000005 rows, 2063168.0 cpu, 6161460.0 io, 684.0 network, 2052.0 memory}
                     +- HashJoin(joinType=[InnerJoin], where=[=(x0, x)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 38513.4, cumulative cost = {295326.4 rows, 2063168.0 cpu, 6161460.0 io, 684.0 network, 2052.0 memory}
                        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
                        +- Exchange(distribution=[broadcast]): rowcount = 57.0, cumulative cost = {114.0 rows, 9120.0 cpu, 684.0 io, 684.0 network, 0.0 memory}
                           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 57.0, cumulative cost = {57.0 rows, 0.0 cpu, 684.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[x000 AS X0, X0 AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[X0, X1, y, x000], isBroadcast=[true], build=[left])\n:     :- [#1] Exchange(distribution=[broadcast])\n:     +- Calc(select=[y, x00 AS x000])\n:        +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x00], build=[right])\n:           :- [#4] Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])\n:           +- [#5] Exchange(distribution=[hash[y]])\n+- Calc(select=[x0 AS X0, X0 AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(y = x)], select=[x, X0, y, x0], build=[right])\n      :- [#2] Exchange(distribution=[hash[x]])\n      +- [#3] Exchange(distribution=[hash[y]])\n])
         :- Exchange(distribution=[broadcast])(reuse_id=[2])
         :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
         :     +- Exchange(distribution=[hash[X0, X1]])
         :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
         :           +- MultipleInput(readOrder=[1,0,2,1], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[y AS X0, x AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:     :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- Calc(select=[y0 AS X0, x AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])\n      :- [#3] Exchange(distribution=[hash[y]])\n      +- [#4] Exchange(distribution=[hash[x]])\n])
         :              :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :              :- Exchange(distribution=[broadcast])
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :              :- Exchange(distribution=[hash[y]])
         :              :  +- Reused(reference_id=[1])
         :              +- Exchange(distribution=[hash[x]])
         :                 +- Calc(select=[x, y0])
         :                    +- NestedLoopJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])
         :                       :- Reused(reference_id=[1])
         :                       +- Exchange(distribution=[broadcast])(reuse_id=[3])
         :                          +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
         :- Exchange(distribution=[hash[x]])
         :  +- Calc(select=[x, X0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[x, y, X0, X1], isBroadcast=[true], build=[right])
         :        :- Exchange(distribution=[any], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Reused(reference_id=[2])
         :- Exchange(distribution=[hash[y]])
         :  +- Calc(select=[y, x0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(x0 = x)], select=[x, y, x0], isBroadcast=[true], build=[right])
         :        :- Reused(reference_id=[1])
         :        +- Exchange(distribution=[broadcast])
         :           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])
         :  +- Reused(reference_id=[1])
         +- Exchange(distribution=[hash[y]])
            +- Calc(select=[y, x0 AS x00])
               +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x0], build=[right])
                  :- Exchange(distribution=[hash[x]])
                  :  +- Reused(reference_id=[1])
                  +- Exchange(distribution=[hash[y]])
                     +- Calc(select=[y, x0])
                        +- NestedLoopJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, x0, y0], build=[right])
                           :- Reused(reference_id=[1])
                           +- Reused(reference_id=[3])

Job has been submitted with JobID 33c451964a3e9289346778cc41f2cda6
WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT s_2.y AS X0, r_0.x AS X1 FROM s AS s_2 INNER JOIN r AS r_1 on s_2.x = r_1.y INNER JOIN r AS r_0 on r_1.x = r_0.y )), p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1 FROM p12 AS p12_4 INNER JOIN r AS r_3 ON r_3.y = p12_4.X1 INNER JOIN r AS r_2 ON r_2.y = r_3.x INNER JOIN r AS r_1 ON r_1.y = r_2.x INNER JOIN s as s_0 ON s_0.y = r_1.x UNION (SELECT a_0.x AS X0, p12_3.X0 AS X1 FROM a AS a_0 INNER JOIN r AS r_1 ON a_0.x = r_1.x INNER JOIN r AS r_2 ON r_1.y = r_2.x INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...

------------> using sink uuid: 5e15f112_b35d_4315_b5dc_997d9e0ea876

Adding statistics for table s number 5 
Adding statistics for table a number 5 
Adding statistics for table b number 5 
Adding statistics for table r number 5 
Adding statistics for table t number 5 
sql argument: WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1
             FROM r AS r_0
                      INNER JOIN b AS b_1 ON r_0.y = b_1.x
             UNION
             (SELECT s_2.y AS X0, r_0.x AS X1
              FROM s AS s_2
                       INNER JOIN r AS r_1 on s_2.x = r_1.y
                       INNER JOIN r AS r_0 on r_1.x = r_0.y
             )),
     p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1
            FROM p12 AS p12_4
                INNER JOIN r AS r_3 ON r_3.y = p12_4.X1
                INNER JOIN r AS r_2 ON r_2.y = r_3.x
                INNER JOIN r AS r_1 ON r_1.y = r_2.x
                INNER JOIN s as s_0 ON s_0.y = r_1.x
            UNION
            (SELECT a_0.x AS X0, p12_3.X0 AS X1
            FROM a AS a_0
                     INNER JOIN r AS r_1 ON a_0.x = r_1.x
                     INNER JOIN r AS r_2 ON r_1.y = r_2.x
                     INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalProject(X0=[$8], X1=[$0])
   :  +- LogicalJoin(condition=[=($9, $6)], joinType=[inner])
   :     :- LogicalJoin(condition=[=($7, $4)], joinType=[inner])
   :     :  :- LogicalJoin(condition=[=($5, $2)], joinType=[inner])
   :     :  :  :- LogicalJoin(condition=[=($3, $1)], joinType=[inner])
   :     :  :  :  :- LogicalUnion(all=[false])
   :     :  :  :  :  :- LogicalProject(X0=[$1], X1=[$0])
   :     :  :  :  :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :     :  :  :  :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :     :  :  :  :  +- LogicalProject(X0=[$1], X1=[$4])
   :     :  :  :  :     +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
   :     :  :  :  :        :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
   :     :  :  :  :        :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$5])
      +- LogicalJoin(condition=[=($4, $6)], joinType=[inner])
         :- LogicalJoin(condition=[=($2, $3)], joinType=[inner])
         :  :- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :  :  :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         +- LogicalUnion(all=[false])
            :- LogicalProject(X0=[$1], X1=[$0])
            :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
            :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
            :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
            +- LogicalProject(X0=[$1], X1=[$4])
               +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
                  :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
                  :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
                  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
                  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 34070.37215974037, cumulative cost = {5.078742322832537E7 rows, 2.6765364600731173E9 cpu, 6.09074928E8 io, 3.519282157360017E8 network, 1.538402018618865E8 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 34070.37215974037, cumulative cost = {5.0753352856165625E7 rows, 2.6759913341185613E9 cpu, 6.09074928E8 io, 3.519282157360017E8 network, 1.516596980436631E8 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 34070.37215974037, cumulative cost = {5.071928248400588E7 rows, 2.669994948618447E9 cpu, 6.09074928E8 io, 3.511105268041679E8 network, 1.516596980436631E8 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 187954.5082150499, cumulative cost = {5.068521211184614E7 rows, 2.666987676487006E9 cpu, 6.09074928E8 io, 3.511105268041679E8 network, 1.4947919422543973E8 memory}
         :- Calc(select=[x000 AS X0, X0 AS X1]): rowcount = 81094.7509057499, cumulative cost = {2.8185652542006496E7 rows, 1.5668072051229396E9 cpu, 3.32220108E8 io, 2.0848646537483996E8 network, 8.587522756271987E7 memory}
         :  +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[X0, X1, y, x000], build=[left]): rowcount = 81094.7509057499, cumulative cost = {2.8104557791100748E7 rows, 1.5668072051229396E9 cpu, 3.32220108E8 io, 2.0848646537483996E8 network, 8.587522756271987E7 memory}
         :     :- Exchange(distribution=[hash[X1]]): rowcount = 134878.5470799993, cumulative cost = {1.3038856400819996E7 rows, 5.489769892362998E8 cpu, 1.66112196E8 io, 7.015317225983997E7 network, 3.665659602623991E7 memory}
         :     :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 134878.5470799993, cumulative cost = {1.2903977853739997E7 rows, 5.263173933268599E8 cpu, 1.66112196E8 io, 6.691608712991998E7 network, 3.665659602623991E7 memory}
         :     :     +- Exchange(distribution=[hash[X0, X1]]): rowcount = 134878.5470799993, cumulative cost = {1.2769099306659998E7 rows, 5.241593365735799E8 cpu, 1.66112196E8 io, 6.691608712991998E7 network, 2.8024369013119955E7 memory}
         :     :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 134878.5470799993, cumulative cost = {1.263422075958E7 rows, 5.004207122875E8 cpu, 1.66112196E8 io, 6.3679002E7 network, 2.8024369013119955E7 memory}
         :     :           +- Union(all=[true], union=[X0, X1]): rowcount = 744078.4874999999, cumulative cost = {1.24993422125E7 rows, 4.885154564875E8 cpu, 1.66112196E8 io, 6.3679002E7 network, 1.9392142E7 memory}
         :     :              :- Calc(select=[y AS X0, x AS X1]): rowcount = 346111.64999999997, cumulative cost = {2999991.3 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :     :              :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 346111.64999999997, cumulative cost = {2653879.65 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :     :              :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :     :              :     +- Exchange(distribution=[broadcast]): rowcount = 357.0, cumulative cost = {714.0 rows, 57120.0 cpu, 4284.0 io, 4284.0 network, 0.0 memory}
         :     :              :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 357.0, cumulative cost = {357.0 rows, 0.0 cpu, 4284.0 io, 0.0 network, 0.0 memory}
         :     :              +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 397966.83749999997, cumulative cost = {8755272.425 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
         :     :                 +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 397966.83749999997, cumulative cost = {8357305.5875 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
         :     :                    :- Exchange(distribution=[hash[y]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
         :     :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :     :                    +- Exchange(distribution=[hash[x]]): rowcount = 346058.25, cumulative cost = {3345230.75 rows, 6.0445E7 cpu, 5.536932E7 io, 8305422.0 network, 28.0 memory}
         :     :                       +- Calc(select=[x, y0]): rowcount = 346058.25, cumulative cost = {2999172.5 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
         :     :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 346058.25, cumulative cost = {2653114.25 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
         :     :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :     :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :     :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :     +- Exchange(distribution=[hash[y]]): rowcount = 405753.125625, cumulative cost = {1.4984606639375001E7 rows, 1.013505162505E9 cpu, 1.66107912E8 io, 1.38333293115E8 network, 4.16654329E7 memory}
         :        +- Calc(select=[y, x00 AS x000]): rowcount = 405753.125625, cumulative cost = {1.4578853513750002E7 rows, 9.453386374E8 cpu, 1.66107912E8 io, 1.285952181E8 network, 4.16654329E7 memory}
         :           +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x00], build=[right]): rowcount = 405753.125625, cumulative cost = {1.4173100388125002E7 rows, 9.453386374E8 cpu, 1.66107912E8 io, 1.285952181E8 network, 4.16654329E7 memory}
         :              :- Exchange(distribution=[hash[x]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :              +- Exchange(distribution=[hash[y]]): rowcount = 397966.83749999997, cumulative cost = {9153239.262500001 rows, 5.361133987E8 cpu, 1.10738616E8 io, 7.32259221E7 network, 1.937929E7 memory}
         :                 +- Calc(select=[y, x0 AS x00]): rowcount = 397966.83749999997, cumulative cost = {8755272.425 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
         :                    +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x0], build=[right]): rowcount = 397966.83749999997, cumulative cost = {8357305.5875 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
         :                       :- Exchange(distribution=[hash[x]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
         :                       :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :                       +- Exchange(distribution=[hash[y]]): rowcount = 346058.25, cumulative cost = {3345230.75 rows, 6.0445E7 cpu, 5.536932E7 io, 8305422.0 network, 28.0 memory}
         :                          +- Calc(select=[y, x0]): rowcount = 346058.25, cumulative cost = {2999172.5 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
         :                             +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, x0, y0], build=[right]): rowcount = 346058.25, cumulative cost = {2653114.25 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
         :                                :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :                                +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                                   +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x0 AS X0, X0 AS X1]): rowcount = 106859.7573093, cumulative cost = {2.2311605061624594E7 rows, 1.099992516855852E9 cpu, 2.7685482E8 io, 1.4262406142932796E8 network, 6.360396666271987E7 memory}
            +- HashJoin(joinType=[InnerJoin], where=[=(y, x)], select=[x, X0, y, x0], build=[right]): rowcount = 106859.7573093, cumulative cost = {2.2204745304315295E7 rows, 1.099992516855852E9 cpu, 2.7685482E8 io, 1.4262406142932796E8 network, 6.360396666271987E7 memory}
               :- Exchange(distribution=[hash[x]]): rowcount = 366289.88206199993, cumulative cost = {1.8751834047005996E7 rows, 1.0176342217993559E9 cpu, 2.21481492E8 io, 1.3431342542932796E8 network, 4.420979466271987E7 memory}
               :  +- Calc(select=[x, X0]): rowcount = 366289.88206199993, cumulative cost = {1.8385544164943997E7 rows, 9.560975216129398E8 cpu, 2.21481492E8 io, 1.2552246825983997E8 network, 4.420979466271987E7 memory}
               :     +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[x, y, X0, X1], build=[right]): rowcount = 366289.88206199993, cumulative cost = {1.8019254282881998E7 rows, 9.560975216129398E8 cpu, 2.21481492E8 io, 1.2552246825983997E8 network, 4.420979466271987E7 memory}
               :        :- Exchange(distribution=[hash[y]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
               :        :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
               :        +- Exchange(distribution=[hash[X1]]): rowcount = 134878.5470799993, cumulative cost = {1.3038856400819996E7 rows, 5.489769892362998E8 cpu, 1.66112196E8 io, 7.015317225983997E7 network, 3.665659602623991E7 memory}
               :           +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 134878.5470799993, cumulative cost = {1.2903977853739997E7 rows, 5.263173933268599E8 cpu, 1.66112196E8 io, 6.691608712991998E7 network, 3.665659602623991E7 memory}
               :              +- Exchange(distribution=[hash[X0, X1]]): rowcount = 134878.5470799993, cumulative cost = {1.2769099306659998E7 rows, 5.241593365735799E8 cpu, 1.66112196E8 io, 6.691608712991998E7 network, 2.8024369013119955E7 memory}
               :                 +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 134878.5470799993, cumulative cost = {1.263422075958E7 rows, 5.004207122875E8 cpu, 1.66112196E8 io, 6.3679002E7 network, 2.8024369013119955E7 memory}
               :                    +- Union(all=[true], union=[X0, X1]): rowcount = 744078.4874999999, cumulative cost = {1.24993422125E7 rows, 4.885154564875E8 cpu, 1.66112196E8 io, 6.3679002E7 network, 1.9392142E7 memory}
               :                       :- Calc(select=[y AS X0, x AS X1]): rowcount = 346111.64999999997, cumulative cost = {2999991.3 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
               :                       :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 346111.64999999997, cumulative cost = {2653879.65 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
               :                       :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
               :                       :     +- Exchange(distribution=[broadcast]): rowcount = 357.0, cumulative cost = {714.0 rows, 57120.0 cpu, 4284.0 io, 4284.0 network, 0.0 memory}
               :                       :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 357.0, cumulative cost = {357.0 rows, 0.0 cpu, 4284.0 io, 0.0 network, 0.0 memory}
               :                       +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 397966.83749999997, cumulative cost = {8755272.425 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
               :                          +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 397966.83749999997, cumulative cost = {8357305.5875 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
               :                             :- Exchange(distribution=[hash[y]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
               :                             :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
               :                             +- Exchange(distribution=[hash[x]]): rowcount = 346058.25, cumulative cost = {3345230.75 rows, 6.0445E7 cpu, 5.536932E7 io, 8305422.0 network, 28.0 memory}
               :                                +- Calc(select=[x, y0]): rowcount = 346058.25, cumulative cost = {2999172.5 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
               :                                   +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 346058.25, cumulative cost = {2653114.25 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
               :                                      :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
               :                                      +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
               :                                         +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[hash[y]]): rowcount = 346108.5, cumulative cost = {3346051.5 rows, 7.6659108E7 cpu, 5.5373328E7 io, 8310636.0 network, 12096.0 memory}
                  +- Calc(select=[y, x0]): rowcount = 346108.5, cumulative cost = {2999943.0 rows, 1.851288E7 cpu, 5.5373328E7 io, 4032.0 network, 12096.0 memory}
                     +- HashJoin(joinType=[InnerJoin], where=[=(x0, x)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 346108.5, cumulative cost = {2653834.5 rows, 1.851288E7 cpu, 5.5373328E7 io, 4032.0 network, 12096.0 memory}
                        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
                        +- Exchange(distribution=[broadcast]): rowcount = 336.0, cumulative cost = {672.0 rows, 53760.0 cpu, 4032.0 io, 4032.0 network, 0.0 memory}
                           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 336.0, cumulative cost = {336.0 rows, 0.0 cpu, 4032.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[0,1,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[x000 AS X0, X0 AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[X0, X1, y, x000], build=[left])\n:     :- [#1] Exchange(distribution=[hash[X1]])\n:     +- [#2] Exchange(distribution=[hash[y]])\n+- Calc(select=[x0 AS X0, X0 AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(y = x)], select=[x, X0, y, x0], build=[right])\n      :- [#3] Exchange(distribution=[hash[x]])\n      +- [#4] Exchange(distribution=[hash[y]])\n])
         :- Exchange(distribution=[hash[X1]])(reuse_id=[3])
         :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
         :     +- Exchange(distribution=[hash[X0, X1]])
         :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
         :           +- MultipleInput(readOrder=[1,0,2,1], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[y AS X0, x AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:     :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- Calc(select=[y0 AS X0, x AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])\n      :- [#3] Exchange(distribution=[hash[y]])\n      +- [#4] Exchange(distribution=[hash[x]])\n])
         :              :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :              :- Exchange(distribution=[broadcast])
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :              :- Exchange(distribution=[hash[y]])
         :              :  +- Reused(reference_id=[1])
         :              +- Exchange(distribution=[hash[x]])
         :                 +- Calc(select=[x, y0])
         :                    +- NestedLoopJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])
         :                       :- Reused(reference_id=[1])
         :                       +- Exchange(distribution=[broadcast])(reuse_id=[2])
         :                          +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
         :- Exchange(distribution=[hash[y]])
         :  +- Calc(select=[y, x00 AS x000])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x00], build=[right])
         :        :- Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Exchange(distribution=[hash[y]])
         :           +- Calc(select=[y, x0 AS x00])
         :              +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x0], build=[right])
         :                 :- Exchange(distribution=[hash[x]])
         :                 :  +- Reused(reference_id=[1])
         :                 +- Exchange(distribution=[hash[y]])
         :                    +- Calc(select=[y, x0])
         :                       +- NestedLoopJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, x0, y0], build=[right])
         :                          :- Reused(reference_id=[1])
         :                          +- Reused(reference_id=[2])
         :- Exchange(distribution=[hash[x]])
         :  +- Calc(select=[x, X0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[x, y, X0, X1], build=[right])
         :        :- Exchange(distribution=[hash[y]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Reused(reference_id=[3])
         +- Exchange(distribution=[hash[y]])
            +- Calc(select=[y, x0])
               +- HashJoin(joinType=[InnerJoin], where=[(x0 = x)], select=[x, y, x0], isBroadcast=[true], build=[right])
                  :- Reused(reference_id=[1])
                  +- Exchange(distribution=[broadcast])
                     +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])

Job has been submitted with JobID 3d576478269a0ee750b13dd1826af872
WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT s_2.y AS X0, r_0.x AS X1 FROM s AS s_2 INNER JOIN r AS r_1 on s_2.x = r_1.y INNER JOIN r AS r_0 on r_1.x = r_0.y )), p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1 FROM p12 AS p12_4 INNER JOIN r AS r_3 ON r_3.y = p12_4.X1 INNER JOIN r AS r_2 ON r_2.y = r_3.x INNER JOIN r AS r_1 ON r_1.y = r_2.x INNER JOIN s as s_0 ON s_0.y = r_1.x UNION (SELECT a_0.x AS X0, p12_3.X0 AS X1 FROM a AS a_0 INNER JOIN r AS r_1 ON a_0.x = r_1.x INNER JOIN r AS r_2 ON r_1.y = r_2.x INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...
waiting...

------------> using sink uuid: 81b840fd_51f1_421b_8d09_684c6740d2e8

Adding statistics for table s number 5 
Adding statistics for table a number 5 
Adding statistics for table b number 5 
Adding statistics for table r number 5 
Adding statistics for table t number 5 
sql argument: WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1
             FROM r AS r_0
                      INNER JOIN b AS b_1 ON r_0.y = b_1.x
             UNION
             (SELECT s_2.y AS X0, r_0.x AS X1
              FROM s AS s_2
                       INNER JOIN r AS r_1 on s_2.x = r_1.y
                       INNER JOIN r AS r_0 on r_1.x = r_0.y
             )),
     p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1
            FROM p12 AS p12_4
                INNER JOIN r AS r_3 ON r_3.y = p12_4.X1
                INNER JOIN r AS r_2 ON r_2.y = r_3.x
                INNER JOIN r AS r_1 ON r_1.y = r_2.x
                INNER JOIN s as s_0 ON s_0.y = r_1.x
            UNION
            (SELECT a_0.x AS X0, p12_3.X0 AS X1
            FROM a AS a_0
                     INNER JOIN r AS r_1 ON a_0.x = r_1.x
                     INNER JOIN r AS r_2 ON r_1.y = r_2.x
                     INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalProject(X0=[$8], X1=[$0])
   :  +- LogicalJoin(condition=[=($9, $6)], joinType=[inner])
   :     :- LogicalJoin(condition=[=($7, $4)], joinType=[inner])
   :     :  :- LogicalJoin(condition=[=($5, $2)], joinType=[inner])
   :     :  :  :- LogicalJoin(condition=[=($3, $1)], joinType=[inner])
   :     :  :  :  :- LogicalUnion(all=[false])
   :     :  :  :  :  :- LogicalProject(X0=[$1], X1=[$0])
   :     :  :  :  :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :     :  :  :  :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :     :  :  :  :  +- LogicalProject(X0=[$1], X1=[$4])
   :     :  :  :  :     +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
   :     :  :  :  :        :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
   :     :  :  :  :        :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$5])
      +- LogicalJoin(condition=[=($4, $6)], joinType=[inner])
         :- LogicalJoin(condition=[=($2, $3)], joinType=[inner])
         :  :- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :  :  :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         +- LogicalUnion(all=[false])
            :- LogicalProject(X0=[$1], X1=[$0])
            :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
            :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
            :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
            +- LogicalProject(X0=[$1], X1=[$4])
               +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
                  :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
                  :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
                  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
                  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 34070.37215974037, cumulative cost = {5.078742322832537E7 rows, 2.6765364600731173E9 cpu, 6.09074928E8 io, 3.519282157360017E8 network, 1.538402018618865E8 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 34070.37215974037, cumulative cost = {5.0753352856165625E7 rows, 2.6759913341185613E9 cpu, 6.09074928E8 io, 3.519282157360017E8 network, 1.516596980436631E8 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 34070.37215974037, cumulative cost = {5.071928248400588E7 rows, 2.669994948618447E9 cpu, 6.09074928E8 io, 3.511105268041679E8 network, 1.516596980436631E8 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 187954.5082150499, cumulative cost = {5.068521211184614E7 rows, 2.666987676487006E9 cpu, 6.09074928E8 io, 3.511105268041679E8 network, 1.4947919422543973E8 memory}
         :- Calc(select=[x000 AS X0, X0 AS X1]): rowcount = 81094.7509057499, cumulative cost = {2.8185652542006496E7 rows, 1.5668072051229396E9 cpu, 3.32220108E8 io, 2.0848646537483996E8 network, 8.587522756271987E7 memory}
         :  +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[X0, X1, y, x000], build=[left]): rowcount = 81094.7509057499, cumulative cost = {2.8104557791100748E7 rows, 1.5668072051229396E9 cpu, 3.32220108E8 io, 2.0848646537483996E8 network, 8.587522756271987E7 memory}
         :     :- Exchange(distribution=[hash[X1]]): rowcount = 134878.5470799993, cumulative cost = {1.3038856400819996E7 rows, 5.489769892362998E8 cpu, 1.66112196E8 io, 7.015317225983997E7 network, 3.665659602623991E7 memory}
         :     :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 134878.5470799993, cumulative cost = {1.2903977853739997E7 rows, 5.263173933268599E8 cpu, 1.66112196E8 io, 6.691608712991998E7 network, 3.665659602623991E7 memory}
         :     :     +- Exchange(distribution=[hash[X0, X1]]): rowcount = 134878.5470799993, cumulative cost = {1.2769099306659998E7 rows, 5.241593365735799E8 cpu, 1.66112196E8 io, 6.691608712991998E7 network, 2.8024369013119955E7 memory}
         :     :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 134878.5470799993, cumulative cost = {1.263422075958E7 rows, 5.004207122875E8 cpu, 1.66112196E8 io, 6.3679002E7 network, 2.8024369013119955E7 memory}
         :     :           +- Union(all=[true], union=[X0, X1]): rowcount = 744078.4874999999, cumulative cost = {1.24993422125E7 rows, 4.885154564875E8 cpu, 1.66112196E8 io, 6.3679002E7 network, 1.9392142E7 memory}
         :     :              :- Calc(select=[y AS X0, x AS X1]): rowcount = 346111.64999999997, cumulative cost = {2999991.3 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :     :              :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 346111.64999999997, cumulative cost = {2653879.65 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :     :              :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :     :              :     +- Exchange(distribution=[broadcast]): rowcount = 357.0, cumulative cost = {714.0 rows, 57120.0 cpu, 4284.0 io, 4284.0 network, 0.0 memory}
         :     :              :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 357.0, cumulative cost = {357.0 rows, 0.0 cpu, 4284.0 io, 0.0 network, 0.0 memory}
         :     :              +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 397966.83749999997, cumulative cost = {8755272.425 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
         :     :                 +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 397966.83749999997, cumulative cost = {8357305.5875 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
         :     :                    :- Exchange(distribution=[hash[y]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
         :     :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :     :                    +- Exchange(distribution=[hash[x]]): rowcount = 346058.25, cumulative cost = {3345230.75 rows, 6.0445E7 cpu, 5.536932E7 io, 8305422.0 network, 28.0 memory}
         :     :                       +- Calc(select=[x, y0]): rowcount = 346058.25, cumulative cost = {2999172.5 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
         :     :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 346058.25, cumulative cost = {2653114.25 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
         :     :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :     :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :     :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :     +- Exchange(distribution=[hash[y]]): rowcount = 405753.125625, cumulative cost = {1.4984606639375001E7 rows, 1.013505162505E9 cpu, 1.66107912E8 io, 1.38333293115E8 network, 4.16654329E7 memory}
         :        +- Calc(select=[y, x00 AS x000]): rowcount = 405753.125625, cumulative cost = {1.4578853513750002E7 rows, 9.453386374E8 cpu, 1.66107912E8 io, 1.285952181E8 network, 4.16654329E7 memory}
         :           +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x00], build=[right]): rowcount = 405753.125625, cumulative cost = {1.4173100388125002E7 rows, 9.453386374E8 cpu, 1.66107912E8 io, 1.285952181E8 network, 4.16654329E7 memory}
         :              :- Exchange(distribution=[hash[x]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :              +- Exchange(distribution=[hash[y]]): rowcount = 397966.83749999997, cumulative cost = {9153239.262500001 rows, 5.361133987E8 cpu, 1.10738616E8 io, 7.32259221E7 network, 1.937929E7 memory}
         :                 +- Calc(select=[y, x0 AS x00]): rowcount = 397966.83749999997, cumulative cost = {8755272.425 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
         :                    +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x0], build=[right]): rowcount = 397966.83749999997, cumulative cost = {8357305.5875 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
         :                       :- Exchange(distribution=[hash[x]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
         :                       :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :                       +- Exchange(distribution=[hash[y]]): rowcount = 346058.25, cumulative cost = {3345230.75 rows, 6.0445E7 cpu, 5.536932E7 io, 8305422.0 network, 28.0 memory}
         :                          +- Calc(select=[y, x0]): rowcount = 346058.25, cumulative cost = {2999172.5 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
         :                             +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, x0, y0], build=[right]): rowcount = 346058.25, cumulative cost = {2653114.25 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
         :                                :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :                                +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                                   +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x0 AS X0, X0 AS X1]): rowcount = 106859.7573093, cumulative cost = {2.2311605061624594E7 rows, 1.099992516855852E9 cpu, 2.7685482E8 io, 1.4262406142932796E8 network, 6.360396666271987E7 memory}
            +- HashJoin(joinType=[InnerJoin], where=[=(y, x)], select=[x, X0, y, x0], build=[right]): rowcount = 106859.7573093, cumulative cost = {2.2204745304315295E7 rows, 1.099992516855852E9 cpu, 2.7685482E8 io, 1.4262406142932796E8 network, 6.360396666271987E7 memory}
               :- Exchange(distribution=[hash[x]]): rowcount = 366289.88206199993, cumulative cost = {1.8751834047005996E7 rows, 1.0176342217993559E9 cpu, 2.21481492E8 io, 1.3431342542932796E8 network, 4.420979466271987E7 memory}
               :  +- Calc(select=[x, X0]): rowcount = 366289.88206199993, cumulative cost = {1.8385544164943997E7 rows, 9.560975216129398E8 cpu, 2.21481492E8 io, 1.2552246825983997E8 network, 4.420979466271987E7 memory}
               :     +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[x, y, X0, X1], build=[right]): rowcount = 366289.88206199993, cumulative cost = {1.8019254282881998E7 rows, 9.560975216129398E8 cpu, 2.21481492E8 io, 1.2552246825983997E8 network, 4.420979466271987E7 memory}
               :        :- Exchange(distribution=[hash[y]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
               :        :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
               :        +- Exchange(distribution=[hash[X1]]): rowcount = 134878.5470799993, cumulative cost = {1.3038856400819996E7 rows, 5.489769892362998E8 cpu, 1.66112196E8 io, 7.015317225983997E7 network, 3.665659602623991E7 memory}
               :           +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 134878.5470799993, cumulative cost = {1.2903977853739997E7 rows, 5.263173933268599E8 cpu, 1.66112196E8 io, 6.691608712991998E7 network, 3.665659602623991E7 memory}
               :              +- Exchange(distribution=[hash[X0, X1]]): rowcount = 134878.5470799993, cumulative cost = {1.2769099306659998E7 rows, 5.241593365735799E8 cpu, 1.66112196E8 io, 6.691608712991998E7 network, 2.8024369013119955E7 memory}
               :                 +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 134878.5470799993, cumulative cost = {1.263422075958E7 rows, 5.004207122875E8 cpu, 1.66112196E8 io, 6.3679002E7 network, 2.8024369013119955E7 memory}
               :                    +- Union(all=[true], union=[X0, X1]): rowcount = 744078.4874999999, cumulative cost = {1.24993422125E7 rows, 4.885154564875E8 cpu, 1.66112196E8 io, 6.3679002E7 network, 1.9392142E7 memory}
               :                       :- Calc(select=[y AS X0, x AS X1]): rowcount = 346111.64999999997, cumulative cost = {2999991.3 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
               :                       :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 346111.64999999997, cumulative cost = {2653879.65 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
               :                       :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
               :                       :     +- Exchange(distribution=[broadcast]): rowcount = 357.0, cumulative cost = {714.0 rows, 57120.0 cpu, 4284.0 io, 4284.0 network, 0.0 memory}
               :                       :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 357.0, cumulative cost = {357.0 rows, 0.0 cpu, 4284.0 io, 0.0 network, 0.0 memory}
               :                       +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 397966.83749999997, cumulative cost = {8755272.425 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
               :                          +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 397966.83749999997, cumulative cost = {8357305.5875 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
               :                             :- Exchange(distribution=[hash[y]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
               :                             :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
               :                             +- Exchange(distribution=[hash[x]]): rowcount = 346058.25, cumulative cost = {3345230.75 rows, 6.0445E7 cpu, 5.536932E7 io, 8305422.0 network, 28.0 memory}
               :                                +- Calc(select=[x, y0]): rowcount = 346058.25, cumulative cost = {2999172.5 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
               :                                   +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 346058.25, cumulative cost = {2653114.25 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
               :                                      :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
               :                                      +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
               :                                         +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[hash[y]]): rowcount = 346108.5, cumulative cost = {3346051.5 rows, 7.6659108E7 cpu, 5.5373328E7 io, 8310636.0 network, 12096.0 memory}
                  +- Calc(select=[y, x0]): rowcount = 346108.5, cumulative cost = {2999943.0 rows, 1.851288E7 cpu, 5.5373328E7 io, 4032.0 network, 12096.0 memory}
                     +- HashJoin(joinType=[InnerJoin], where=[=(x0, x)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 346108.5, cumulative cost = {2653834.5 rows, 1.851288E7 cpu, 5.5373328E7 io, 4032.0 network, 12096.0 memory}
                        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
                        +- Exchange(distribution=[broadcast]): rowcount = 336.0, cumulative cost = {672.0 rows, 53760.0 cpu, 4032.0 io, 4032.0 network, 0.0 memory}
                           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 336.0, cumulative cost = {336.0 rows, 0.0 cpu, 4032.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[0,1,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[x000 AS X0, X0 AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[X0, X1, y, x000], build=[left])\n:     :- [#1] Exchange(distribution=[hash[X1]])\n:     +- [#2] Exchange(distribution=[hash[y]])\n+- Calc(select=[x0 AS X0, X0 AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(y = x)], select=[x, X0, y, x0], build=[right])\n      :- [#3] Exchange(distribution=[hash[x]])\n      +- [#4] Exchange(distribution=[hash[y]])\n])
         :- Exchange(distribution=[hash[X1]])(reuse_id=[3])
         :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
         :     +- Exchange(distribution=[hash[X0, X1]])
         :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
         :           +- MultipleInput(readOrder=[1,0,2,1], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[y AS X0, x AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:     :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- Calc(select=[y0 AS X0, x AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])\n      :- [#3] Exchange(distribution=[hash[y]])\n      +- [#4] Exchange(distribution=[hash[x]])\n])
         :              :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :              :- Exchange(distribution=[broadcast])
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :              :- Exchange(distribution=[hash[y]])
         :              :  +- Reused(reference_id=[1])
         :              +- Exchange(distribution=[hash[x]])
         :                 +- Calc(select=[x, y0])
         :                    +- NestedLoopJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])
         :                       :- Reused(reference_id=[1])
         :                       +- Exchange(distribution=[broadcast])(reuse_id=[2])
         :                          +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
         :- Exchange(distribution=[hash[y]])
         :  +- Calc(select=[y, x00 AS x000])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x00], build=[right])
         :        :- Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Exchange(distribution=[hash[y]])
         :           +- Calc(select=[y, x0 AS x00])
         :              +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x0], build=[right])
         :                 :- Exchange(distribution=[hash[x]])
         :                 :  +- Reused(reference_id=[1])
         :                 +- Exchange(distribution=[hash[y]])
         :                    +- Calc(select=[y, x0])
         :                       +- NestedLoopJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, x0, y0], build=[right])
         :                          :- Reused(reference_id=[1])
         :                          +- Reused(reference_id=[2])
         :- Exchange(distribution=[hash[x]])
         :  +- Calc(select=[x, X0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[x, y, X0, X1], build=[right])
         :        :- Exchange(distribution=[hash[y]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Reused(reference_id=[3])
         +- Exchange(distribution=[hash[y]])
            +- Calc(select=[y, x0])
               +- HashJoin(joinType=[InnerJoin], where=[(x0 = x)], select=[x, y, x0], isBroadcast=[true], build=[right])
                  :- Reused(reference_id=[1])
                  +- Exchange(distribution=[broadcast])
                     +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])

Job has been submitted with JobID 940ca25c4c5a9fd4871bbe57e50637a8
WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT s_2.y AS X0, r_0.x AS X1 FROM s AS s_2 INNER JOIN r AS r_1 on s_2.x = r_1.y INNER JOIN r AS r_0 on r_1.x = r_0.y )), p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1 FROM p12 AS p12_4 INNER JOIN r AS r_3 ON r_3.y = p12_4.X1 INNER JOIN r AS r_2 ON r_2.y = r_3.x INNER JOIN r AS r_1 ON r_1.y = r_2.x INNER JOIN s as s_0 ON s_0.y = r_1.x UNION (SELECT a_0.x AS X0, p12_3.X0 AS X1 FROM a AS a_0 INNER JOIN r AS r_1 ON a_0.x = r_1.x INNER JOIN r AS r_2 ON r_1.y = r_2.x INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...
waiting...

------------> using sink uuid: e4078dd8_1d42_4ead_ab2e_e4459dba5f4d

Adding statistics for table s number 5 
Adding statistics for table a number 5 
Adding statistics for table b number 5 
Adding statistics for table r number 5 
Adding statistics for table t number 5 
sql argument: WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1
             FROM r AS r_0
                      INNER JOIN b AS b_1 ON r_0.y = b_1.x
             UNION
             (SELECT s_2.y AS X0, r_0.x AS X1
              FROM s AS s_2
                       INNER JOIN r AS r_1 on s_2.x = r_1.y
                       INNER JOIN r AS r_0 on r_1.x = r_0.y
             )),
     p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1
            FROM p12 AS p12_4
                INNER JOIN r AS r_3 ON r_3.y = p12_4.X1
                INNER JOIN r AS r_2 ON r_2.y = r_3.x
                INNER JOIN r AS r_1 ON r_1.y = r_2.x
                INNER JOIN s as s_0 ON s_0.y = r_1.x
            UNION
            (SELECT a_0.x AS X0, p12_3.X0 AS X1
            FROM a AS a_0
                     INNER JOIN r AS r_1 ON a_0.x = r_1.x
                     INNER JOIN r AS r_2 ON r_1.y = r_2.x
                     INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalProject(X0=[$8], X1=[$0])
   :  +- LogicalJoin(condition=[=($9, $6)], joinType=[inner])
   :     :- LogicalJoin(condition=[=($7, $4)], joinType=[inner])
   :     :  :- LogicalJoin(condition=[=($5, $2)], joinType=[inner])
   :     :  :  :- LogicalJoin(condition=[=($3, $1)], joinType=[inner])
   :     :  :  :  :- LogicalUnion(all=[false])
   :     :  :  :  :  :- LogicalProject(X0=[$1], X1=[$0])
   :     :  :  :  :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :     :  :  :  :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :     :  :  :  :  +- LogicalProject(X0=[$1], X1=[$4])
   :     :  :  :  :     +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
   :     :  :  :  :        :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
   :     :  :  :  :        :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$5])
      +- LogicalJoin(condition=[=($4, $6)], joinType=[inner])
         :- LogicalJoin(condition=[=($2, $3)], joinType=[inner])
         :  :- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :  :  :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         +- LogicalUnion(all=[false])
            :- LogicalProject(X0=[$1], X1=[$0])
            :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
            :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
            :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
            +- LogicalProject(X0=[$1], X1=[$4])
               +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
                  :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
                  :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
                  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
                  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 34070.37215974037, cumulative cost = {5.078742322832537E7 rows, 2.6765364600731173E9 cpu, 6.09074928E8 io, 3.519282157360017E8 network, 1.538402018618865E8 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 34070.37215974037, cumulative cost = {5.0753352856165625E7 rows, 2.6759913341185613E9 cpu, 6.09074928E8 io, 3.519282157360017E8 network, 1.516596980436631E8 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 34070.37215974037, cumulative cost = {5.071928248400588E7 rows, 2.669994948618447E9 cpu, 6.09074928E8 io, 3.511105268041679E8 network, 1.516596980436631E8 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 187954.5082150499, cumulative cost = {5.068521211184614E7 rows, 2.666987676487006E9 cpu, 6.09074928E8 io, 3.511105268041679E8 network, 1.4947919422543973E8 memory}
         :- Calc(select=[x000 AS X0, X0 AS X1]): rowcount = 81094.7509057499, cumulative cost = {2.8185652542006496E7 rows, 1.5668072051229396E9 cpu, 3.32220108E8 io, 2.0848646537483996E8 network, 8.587522756271987E7 memory}
         :  +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[X0, X1, y, x000], build=[left]): rowcount = 81094.7509057499, cumulative cost = {2.8104557791100748E7 rows, 1.5668072051229396E9 cpu, 3.32220108E8 io, 2.0848646537483996E8 network, 8.587522756271987E7 memory}
         :     :- Exchange(distribution=[hash[X1]]): rowcount = 134878.5470799993, cumulative cost = {1.3038856400819996E7 rows, 5.489769892362998E8 cpu, 1.66112196E8 io, 7.015317225983997E7 network, 3.665659602623991E7 memory}
         :     :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 134878.5470799993, cumulative cost = {1.2903977853739997E7 rows, 5.263173933268599E8 cpu, 1.66112196E8 io, 6.691608712991998E7 network, 3.665659602623991E7 memory}
         :     :     +- Exchange(distribution=[hash[X0, X1]]): rowcount = 134878.5470799993, cumulative cost = {1.2769099306659998E7 rows, 5.241593365735799E8 cpu, 1.66112196E8 io, 6.691608712991998E7 network, 2.8024369013119955E7 memory}
         :     :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 134878.5470799993, cumulative cost = {1.263422075958E7 rows, 5.004207122875E8 cpu, 1.66112196E8 io, 6.3679002E7 network, 2.8024369013119955E7 memory}
         :     :           +- Union(all=[true], union=[X0, X1]): rowcount = 744078.4874999999, cumulative cost = {1.24993422125E7 rows, 4.885154564875E8 cpu, 1.66112196E8 io, 6.3679002E7 network, 1.9392142E7 memory}
         :     :              :- Calc(select=[y AS X0, x AS X1]): rowcount = 346111.64999999997, cumulative cost = {2999991.3 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :     :              :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 346111.64999999997, cumulative cost = {2653879.65 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :     :              :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :     :              :     +- Exchange(distribution=[broadcast]): rowcount = 357.0, cumulative cost = {714.0 rows, 57120.0 cpu, 4284.0 io, 4284.0 network, 0.0 memory}
         :     :              :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 357.0, cumulative cost = {357.0 rows, 0.0 cpu, 4284.0 io, 0.0 network, 0.0 memory}
         :     :              +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 397966.83749999997, cumulative cost = {8755272.425 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
         :     :                 +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 397966.83749999997, cumulative cost = {8357305.5875 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
         :     :                    :- Exchange(distribution=[hash[y]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
         :     :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :     :                    +- Exchange(distribution=[hash[x]]): rowcount = 346058.25, cumulative cost = {3345230.75 rows, 6.0445E7 cpu, 5.536932E7 io, 8305422.0 network, 28.0 memory}
         :     :                       +- Calc(select=[x, y0]): rowcount = 346058.25, cumulative cost = {2999172.5 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
         :     :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 346058.25, cumulative cost = {2653114.25 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
         :     :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :     :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :     :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :     +- Exchange(distribution=[hash[y]]): rowcount = 405753.125625, cumulative cost = {1.4984606639375001E7 rows, 1.013505162505E9 cpu, 1.66107912E8 io, 1.38333293115E8 network, 4.16654329E7 memory}
         :        +- Calc(select=[y, x00 AS x000]): rowcount = 405753.125625, cumulative cost = {1.4578853513750002E7 rows, 9.453386374E8 cpu, 1.66107912E8 io, 1.285952181E8 network, 4.16654329E7 memory}
         :           +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x00], build=[right]): rowcount = 405753.125625, cumulative cost = {1.4173100388125002E7 rows, 9.453386374E8 cpu, 1.66107912E8 io, 1.285952181E8 network, 4.16654329E7 memory}
         :              :- Exchange(distribution=[hash[x]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :              +- Exchange(distribution=[hash[y]]): rowcount = 397966.83749999997, cumulative cost = {9153239.262500001 rows, 5.361133987E8 cpu, 1.10738616E8 io, 7.32259221E7 network, 1.937929E7 memory}
         :                 +- Calc(select=[y, x0 AS x00]): rowcount = 397966.83749999997, cumulative cost = {8755272.425 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
         :                    +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x0], build=[right]): rowcount = 397966.83749999997, cumulative cost = {8357305.5875 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
         :                       :- Exchange(distribution=[hash[x]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
         :                       :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :                       +- Exchange(distribution=[hash[y]]): rowcount = 346058.25, cumulative cost = {3345230.75 rows, 6.0445E7 cpu, 5.536932E7 io, 8305422.0 network, 28.0 memory}
         :                          +- Calc(select=[y, x0]): rowcount = 346058.25, cumulative cost = {2999172.5 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
         :                             +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, x0, y0], build=[right]): rowcount = 346058.25, cumulative cost = {2653114.25 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
         :                                :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :                                +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                                   +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x0 AS X0, X0 AS X1]): rowcount = 106859.7573093, cumulative cost = {2.2311605061624594E7 rows, 1.099992516855852E9 cpu, 2.7685482E8 io, 1.4262406142932796E8 network, 6.360396666271987E7 memory}
            +- HashJoin(joinType=[InnerJoin], where=[=(y, x)], select=[x, X0, y, x0], build=[right]): rowcount = 106859.7573093, cumulative cost = {2.2204745304315295E7 rows, 1.099992516855852E9 cpu, 2.7685482E8 io, 1.4262406142932796E8 network, 6.360396666271987E7 memory}
               :- Exchange(distribution=[hash[x]]): rowcount = 366289.88206199993, cumulative cost = {1.8751834047005996E7 rows, 1.0176342217993559E9 cpu, 2.21481492E8 io, 1.3431342542932796E8 network, 4.420979466271987E7 memory}
               :  +- Calc(select=[x, X0]): rowcount = 366289.88206199993, cumulative cost = {1.8385544164943997E7 rows, 9.560975216129398E8 cpu, 2.21481492E8 io, 1.2552246825983997E8 network, 4.420979466271987E7 memory}
               :     +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[x, y, X0, X1], build=[right]): rowcount = 366289.88206199993, cumulative cost = {1.8019254282881998E7 rows, 9.560975216129398E8 cpu, 2.21481492E8 io, 1.2552246825983997E8 network, 4.420979466271987E7 memory}
               :        :- Exchange(distribution=[hash[y]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
               :        :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
               :        +- Exchange(distribution=[hash[X1]]): rowcount = 134878.5470799993, cumulative cost = {1.3038856400819996E7 rows, 5.489769892362998E8 cpu, 1.66112196E8 io, 7.015317225983997E7 network, 3.665659602623991E7 memory}
               :           +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 134878.5470799993, cumulative cost = {1.2903977853739997E7 rows, 5.263173933268599E8 cpu, 1.66112196E8 io, 6.691608712991998E7 network, 3.665659602623991E7 memory}
               :              +- Exchange(distribution=[hash[X0, X1]]): rowcount = 134878.5470799993, cumulative cost = {1.2769099306659998E7 rows, 5.241593365735799E8 cpu, 1.66112196E8 io, 6.691608712991998E7 network, 2.8024369013119955E7 memory}
               :                 +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 134878.5470799993, cumulative cost = {1.263422075958E7 rows, 5.004207122875E8 cpu, 1.66112196E8 io, 6.3679002E7 network, 2.8024369013119955E7 memory}
               :                    +- Union(all=[true], union=[X0, X1]): rowcount = 744078.4874999999, cumulative cost = {1.24993422125E7 rows, 4.885154564875E8 cpu, 1.66112196E8 io, 6.3679002E7 network, 1.9392142E7 memory}
               :                       :- Calc(select=[y AS X0, x AS X1]): rowcount = 346111.64999999997, cumulative cost = {2999991.3 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
               :                       :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 346111.64999999997, cumulative cost = {2653879.65 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
               :                       :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
               :                       :     +- Exchange(distribution=[broadcast]): rowcount = 357.0, cumulative cost = {714.0 rows, 57120.0 cpu, 4284.0 io, 4284.0 network, 0.0 memory}
               :                       :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 357.0, cumulative cost = {357.0 rows, 0.0 cpu, 4284.0 io, 0.0 network, 0.0 memory}
               :                       +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 397966.83749999997, cumulative cost = {8755272.425 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
               :                          +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 397966.83749999997, cumulative cost = {8357305.5875 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
               :                             :- Exchange(distribution=[hash[y]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
               :                             :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
               :                             +- Exchange(distribution=[hash[x]]): rowcount = 346058.25, cumulative cost = {3345230.75 rows, 6.0445E7 cpu, 5.536932E7 io, 8305422.0 network, 28.0 memory}
               :                                +- Calc(select=[x, y0]): rowcount = 346058.25, cumulative cost = {2999172.5 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
               :                                   +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 346058.25, cumulative cost = {2653114.25 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
               :                                      :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
               :                                      +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
               :                                         +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[hash[y]]): rowcount = 346108.5, cumulative cost = {3346051.5 rows, 7.6659108E7 cpu, 5.5373328E7 io, 8310636.0 network, 12096.0 memory}
                  +- Calc(select=[y, x0]): rowcount = 346108.5, cumulative cost = {2999943.0 rows, 1.851288E7 cpu, 5.5373328E7 io, 4032.0 network, 12096.0 memory}
                     +- HashJoin(joinType=[InnerJoin], where=[=(x0, x)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 346108.5, cumulative cost = {2653834.5 rows, 1.851288E7 cpu, 5.5373328E7 io, 4032.0 network, 12096.0 memory}
                        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
                        +- Exchange(distribution=[broadcast]): rowcount = 336.0, cumulative cost = {672.0 rows, 53760.0 cpu, 4032.0 io, 4032.0 network, 0.0 memory}
                           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 336.0, cumulative cost = {336.0 rows, 0.0 cpu, 4032.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[0,1,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[x000 AS X0, X0 AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[X0, X1, y, x000], build=[left])\n:     :- [#1] Exchange(distribution=[hash[X1]])\n:     +- [#2] Exchange(distribution=[hash[y]])\n+- Calc(select=[x0 AS X0, X0 AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(y = x)], select=[x, X0, y, x0], build=[right])\n      :- [#3] Exchange(distribution=[hash[x]])\n      +- [#4] Exchange(distribution=[hash[y]])\n])
         :- Exchange(distribution=[hash[X1]])(reuse_id=[3])
         :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
         :     +- Exchange(distribution=[hash[X0, X1]])
         :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
         :           +- MultipleInput(readOrder=[1,0,2,1], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[y AS X0, x AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:     :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- Calc(select=[y0 AS X0, x AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])\n      :- [#3] Exchange(distribution=[hash[y]])\n      +- [#4] Exchange(distribution=[hash[x]])\n])
         :              :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :              :- Exchange(distribution=[broadcast])
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :              :- Exchange(distribution=[hash[y]])
         :              :  +- Reused(reference_id=[1])
         :              +- Exchange(distribution=[hash[x]])
         :                 +- Calc(select=[x, y0])
         :                    +- NestedLoopJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])
         :                       :- Reused(reference_id=[1])
         :                       +- Exchange(distribution=[broadcast])(reuse_id=[2])
         :                          +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
         :- Exchange(distribution=[hash[y]])
         :  +- Calc(select=[y, x00 AS x000])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x00], build=[right])
         :        :- Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Exchange(distribution=[hash[y]])
         :           +- Calc(select=[y, x0 AS x00])
         :              +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x0], build=[right])
         :                 :- Exchange(distribution=[hash[x]])
         :                 :  +- Reused(reference_id=[1])
         :                 +- Exchange(distribution=[hash[y]])
         :                    +- Calc(select=[y, x0])
         :                       +- NestedLoopJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, x0, y0], build=[right])
         :                          :- Reused(reference_id=[1])
         :                          +- Reused(reference_id=[2])
         :- Exchange(distribution=[hash[x]])
         :  +- Calc(select=[x, X0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[x, y, X0, X1], build=[right])
         :        :- Exchange(distribution=[hash[y]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Reused(reference_id=[3])
         +- Exchange(distribution=[hash[y]])
            +- Calc(select=[y, x0])
               +- HashJoin(joinType=[InnerJoin], where=[(x0 = x)], select=[x, y, x0], isBroadcast=[true], build=[right])
                  :- Reused(reference_id=[1])
                  +- Exchange(distribution=[broadcast])
                     +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])

Job has been submitted with JobID cb17e339c2b47ff7189e1a4835ddb316
WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT s_2.y AS X0, r_0.x AS X1 FROM s AS s_2 INNER JOIN r AS r_1 on s_2.x = r_1.y INNER JOIN r AS r_0 on r_1.x = r_0.y )), p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1 FROM p12 AS p12_4 INNER JOIN r AS r_3 ON r_3.y = p12_4.X1 INNER JOIN r AS r_2 ON r_2.y = r_3.x INNER JOIN r AS r_1 ON r_1.y = r_2.x INNER JOIN s as s_0 ON s_0.y = r_1.x UNION (SELECT a_0.x AS X0, p12_3.X0 AS X1 FROM a AS a_0 INNER JOIN r AS r_1 ON a_0.x = r_1.x INNER JOIN r AS r_2 ON r_1.y = r_2.x INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...
waiting...

------------> using sink uuid: 4365bc14_2342_4ef6_ba11_66ee528134fc

Adding statistics for table s number 7 
Adding statistics for table a number 7 
Adding statistics for table b number 7 
Adding statistics for table r number 7 
Adding statistics for table t number 7 
sql argument: WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1
             FROM r AS r_0
                      INNER JOIN b AS b_1 ON r_0.y = b_1.x
             UNION
             (SELECT s_2.y AS X0, r_0.x AS X1
              FROM s AS s_2
                       INNER JOIN r AS r_1 on s_2.x = r_1.y
                       INNER JOIN r AS r_0 on r_1.x = r_0.y
             )),
     p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1
            FROM p12 AS p12_4
                INNER JOIN r AS r_3 ON r_3.y = p12_4.X1
                INNER JOIN r AS r_2 ON r_2.y = r_3.x
                INNER JOIN r AS r_1 ON r_1.y = r_2.x
                INNER JOIN s as s_0 ON s_0.y = r_1.x
            UNION
            (SELECT a_0.x AS X0, p12_3.X0 AS X1
            FROM a AS a_0
                     INNER JOIN r AS r_1 ON a_0.x = r_1.x
                     INNER JOIN r AS r_2 ON r_1.y = r_2.x
                     INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalProject(X0=[$8], X1=[$0])
   :  +- LogicalJoin(condition=[=($9, $6)], joinType=[inner])
   :     :- LogicalJoin(condition=[=($7, $4)], joinType=[inner])
   :     :  :- LogicalJoin(condition=[=($5, $2)], joinType=[inner])
   :     :  :  :- LogicalJoin(condition=[=($3, $1)], joinType=[inner])
   :     :  :  :  :- LogicalUnion(all=[false])
   :     :  :  :  :  :- LogicalProject(X0=[$1], X1=[$0])
   :     :  :  :  :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :     :  :  :  :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :     :  :  :  :  +- LogicalProject(X0=[$1], X1=[$4])
   :     :  :  :  :     +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
   :     :  :  :  :        :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
   :     :  :  :  :        :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$5])
      +- LogicalJoin(condition=[=($4, $6)], joinType=[inner])
         :- LogicalJoin(condition=[=($2, $3)], joinType=[inner])
         :  :- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :  :  :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         +- LogicalUnion(all=[false])
            :- LogicalProject(X0=[$1], X1=[$0])
            :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
            :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
            :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
            +- LogicalProject(X0=[$1], X1=[$4])
               +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
                  :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
                  :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
                  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
                  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 94661.99978162195, cumulative cost = {1.4110860038951352E8 rows, 7.436472461903848E9 cpu, 1.692285912E9 io, 9.778074315402737E8 network, 4.27391124176841E8 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 94661.99978162195, cumulative cost = {1.410139383897319E8 rows, 7.434957869907342E9 cpu, 1.692285912E9 io, 9.778074315402737E8 network, 4.2133275619081724E8 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 94661.99978162195, cumulative cost = {1.409192763899503E8 rows, 7.418297357945777E9 cpu, 1.692285912E9 io, 9.755355435455147E8 network, 4.2133275619081724E8 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 522217.647995997, cumulative cost = {1.408246143901687E8 rows, 7.409941875577841E9 cpu, 1.692285912E9 io, 9.755355435455147E8 network, 4.1527438820479345E8 memory}
         :- Calc(select=[x000 AS X0, X0 AS X1]): rowcount = 225318.10511282345, cumulative cost = {7.831206441173425E7 rows, 4.353259023198794E9 cpu, 9.23060508E8 io, 5.792689356001035E8 network, 2.3858465178239673E8 memory}
         :  +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[X0, X1, y, x000], build=[left]): rowcount = 225318.10511282345, cumulative cost = {7.808674630662143E7 rows, 4.353259023198794E9 cpu, 9.23060508E8 io, 5.792689356001035E8 network, 2.3858465178239673E8 memory}
         :     :- Exchange(distribution=[hash[X1]]): rowcount = 374745.2392521563, cumulative cost = {3.622705738700863E7 rows, 1.5252422625007763E9 cpu, 4.61533644E8 io, 1.949132010841035E8 network, 1.01832565024276E8 memory}
         :     :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 374745.2392521563, cumulative cost = {3.585231214775647E7 rows, 1.4622850623064141E9 cpu, 4.61533644E8 io, 1.8591931534205174E8 network, 1.01832565024276E8 memory}
         :     :     +- Exchange(distribution=[hash[X0, X1]]): rowcount = 374745.2392521563, cumulative cost = {3.5477566908504315E7 rows, 1.4562891384783797E9 cpu, 4.61533644E8 io, 1.8591931534205174E8 network, 7.7848869712138E7 memory}
         :     :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 374745.2392521563, cumulative cost = {3.510282166925216E7 rows, 1.3903339763700001E9 cpu, 4.61533644E8 io, 1.769254296E8 network, 7.7848869712138E7 memory}
         :     :           +- Union(all=[true], union=[X0, X1]): rowcount = 2067340.41, cumulative cost = {3.472807643E7 rows, 1.3572565298100002E9 cpu, 4.61533644E8 io, 1.769254296E8 network, 5.38651744E7 memory}
         :     :              :- Calc(select=[y AS X0, x AS X1]): rowcount = 961599.0, cumulative cost = {8334423.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :     :              :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 961599.0, cumulative cost = {7372824.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :     :              :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :     :              :     +- Exchange(distribution=[broadcast]): rowcount = 565.0, cumulative cost = {1130.0 rows, 90400.0 cpu, 6780.0 io, 6780.0 network, 0.0 memory}
         :     :              :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 565.0, cumulative cost = {565.0 rows, 0.0 cpu, 6780.0 io, 0.0 network, 0.0 memory}
         :     :              +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 1105741.41, cumulative cost = {2.432631302E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
         :     :                 +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 1105741.41, cumulative cost = {2.322057161E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
         :     :                    :- Exchange(distribution=[hash[y]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
         :     :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :     :                    +- Exchange(distribution=[hash[x]]): rowcount = 961514.3999999999, cumulative cost = {9294640.200000001 rows, 1.679446742E8 cpu, 1.53842304E8 io, 2.3076369599999998E7 network, 28.0 memory}
         :     :                       +- Calc(select=[x, y0]): rowcount = 961514.3999999999, cumulative cost = {8333125.800000001 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
         :     :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 961514.3999999999, cumulative cost = {7371611.4 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
         :     :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :     :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :     :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :     +- Exchange(distribution=[hash[y]]): rowcount = 1127375.4615, cumulative cost = {4.163437081449999E7 rows, 2.8159997950920005E9 cpu, 4.61526864E8 io, 3.84355734516E8 network, 1.1576635335999998E8 memory}
         :        +- Calc(select=[y, x00 AS x000]): rowcount = 1127375.4615, cumulative cost = {4.050699535299999E7 rows, 2.6266007175600004E9 cpu, 4.61526864E8 io, 3.5729872344E8 network, 1.1576635335999998E8 memory}
         :           +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x00], build=[right]): rowcount = 1127375.4615, cumulative cost = {3.9379619891499996E7 rows, 2.6266007175600004E9 cpu, 4.61526864E8 io, 3.5729872344E8 network, 1.1576635335999998E8 memory}
         :              :- Exchange(distribution=[hash[x]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :              +- Exchange(distribution=[hash[y]]): rowcount = 1105741.41, cumulative cost = {2.543205443E7 rows, 1.4895780662800002E9 cpu, 3.07684584E8 io, 2.0345644344E8 network, 5.38448344E7 memory}
         :                 +- Calc(select=[y, x0 AS x00]): rowcount = 1105741.41, cumulative cost = {2.432631302E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
         :                    +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x0], build=[right]): rowcount = 1105741.41, cumulative cost = {2.322057161E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
         :                       :- Exchange(distribution=[hash[x]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
         :                       :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :                       +- Exchange(distribution=[hash[y]]): rowcount = 961514.3999999999, cumulative cost = {9294640.200000001 rows, 1.679446742E8 cpu, 1.53842304E8 io, 2.3076369599999998E7 network, 28.0 memory}
         :                          +- Calc(select=[y, x0]): rowcount = 961514.3999999999, cumulative cost = {8333125.800000001 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
         :                             +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, x0, y0], build=[right]): rowcount = 961514.3999999999, cumulative cost = {7371611.4 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
         :                                :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :                                +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                                   +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x0 AS X0, X0 AS X1]): rowcount = 296899.5428831735, cumulative cost = {6.199033233043844E7 rows, 3.0561606347310505E9 cpu, 7.69225404E8 io, 3.962666079454112E8 network, 1.7668973642239675E8 memory}
            +- HashJoin(joinType=[InnerJoin], where=[=(y, x)], select=[x, X0, y, x0], build=[right]): rowcount = 296899.5428831735, cumulative cost = {6.169343278755527E7 rows, 3.0561606347310505E9 cpu, 7.69225404E8 io, 3.962666079454112E8 network, 1.7668973642239675E8 memory}
               :- Exchange(distribution=[hash[x]]): rowcount = 1017726.0358878234, cumulative cost = {5.21004254946721E7 rows, 2.827394918443948E9 cpu, 6.15375924E8 io, 3.731809059454112E8 network, 1.2281829842239675E8 memory}
               :  +- Calc(select=[x, X0]): rowcount = 1017726.0358878234, cumulative cost = {5.1082699458784275E7 rows, 2.6564169444147935E9 cpu, 6.15375924E8 io, 3.4875548108410347E8 network, 1.2281829842239675E8 memory}
               :     +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[x, y, X0, X1], build=[right]): rowcount = 1017726.0358878234, cumulative cost = {5.006497342289645E7 rows, 2.6564169444147935E9 cpu, 6.15375924E8 io, 3.4875548108410347E8 network, 1.2281829842239675E8 memory}
               :        :- Exchange(distribution=[hash[y]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
               :        :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
               :        +- Exchange(distribution=[hash[X1]]): rowcount = 374745.2392521563, cumulative cost = {3.622705738700863E7 rows, 1.5252422625007763E9 cpu, 4.61533644E8 io, 1.949132010841035E8 network, 1.01832565024276E8 memory}
               :           +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 374745.2392521563, cumulative cost = {3.585231214775647E7 rows, 1.4622850623064141E9 cpu, 4.61533644E8 io, 1.8591931534205174E8 network, 1.01832565024276E8 memory}
               :              +- Exchange(distribution=[hash[X0, X1]]): rowcount = 374745.2392521563, cumulative cost = {3.5477566908504315E7 rows, 1.4562891384783797E9 cpu, 4.61533644E8 io, 1.8591931534205174E8 network, 7.7848869712138E7 memory}
               :                 +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 374745.2392521563, cumulative cost = {3.510282166925216E7 rows, 1.3903339763700001E9 cpu, 4.61533644E8 io, 1.769254296E8 network, 7.7848869712138E7 memory}
               :                    +- Union(all=[true], union=[X0, X1]): rowcount = 2067340.41, cumulative cost = {3.472807643E7 rows, 1.3572565298100002E9 cpu, 4.61533644E8 io, 1.769254296E8 network, 5.38651744E7 memory}
               :                       :- Calc(select=[y AS X0, x AS X1]): rowcount = 961599.0, cumulative cost = {8334423.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
               :                       :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 961599.0, cumulative cost = {7372824.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
               :                       :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
               :                       :     +- Exchange(distribution=[broadcast]): rowcount = 565.0, cumulative cost = {1130.0 rows, 90400.0 cpu, 6780.0 io, 6780.0 network, 0.0 memory}
               :                       :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 565.0, cumulative cost = {565.0 rows, 0.0 cpu, 6780.0 io, 0.0 network, 0.0 memory}
               :                       +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 1105741.41, cumulative cost = {2.432631302E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
               :                          +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 1105741.41, cumulative cost = {2.322057161E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
               :                             :- Exchange(distribution=[hash[y]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
               :                             :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
               :                             +- Exchange(distribution=[hash[x]]): rowcount = 961514.3999999999, cumulative cost = {9294640.200000001 rows, 1.679446742E8 cpu, 1.53842304E8 io, 2.3076369599999998E7 network, 28.0 memory}
               :                                +- Calc(select=[x, y0]): rowcount = 961514.3999999999, cumulative cost = {8333125.800000001 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
               :                                   +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 961514.3999999999, cumulative cost = {7371611.4 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
               :                                      :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
               :                                      +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
               :                                         +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[hash[y]]): rowcount = 961604.25, cumulative cost = {9296107.75 rows, 2.12931074E8 cpu, 1.5384948E8 io, 2.3085702E7 network, 21600.0 memory}
                  +- Calc(select=[y, x0]): rowcount = 961604.25, cumulative cost = {8334503.5 rows, 5.138156E7 cpu, 1.5384948E8 io, 7200.0 network, 21600.0 memory}
                     +- HashJoin(joinType=[InnerJoin], where=[=(x0, x)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 961604.25, cumulative cost = {7372899.25 rows, 5.138156E7 cpu, 1.5384948E8 io, 7200.0 network, 21600.0 memory}
                        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
                        +- Exchange(distribution=[broadcast]): rowcount = 600.0, cumulative cost = {1200.0 rows, 96000.0 cpu, 7200.0 io, 7200.0 network, 0.0 memory}
                           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 600.0, cumulative cost = {600.0 rows, 0.0 cpu, 7200.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[0,1,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[x000 AS X0, X0 AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[X0, X1, y, x000], build=[left])\n:     :- [#1] Exchange(distribution=[hash[X1]])\n:     +- [#2] Exchange(distribution=[hash[y]])\n+- Calc(select=[x0 AS X0, X0 AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(y = x)], select=[x, X0, y, x0], build=[right])\n      :- [#3] Exchange(distribution=[hash[x]])\n      +- [#4] Exchange(distribution=[hash[y]])\n])
         :- Exchange(distribution=[hash[X1]])(reuse_id=[3])
         :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
         :     +- Exchange(distribution=[hash[X0, X1]])
         :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
         :           +- MultipleInput(readOrder=[1,0,2,1], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[y AS X0, x AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:     :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- Calc(select=[y0 AS X0, x AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])\n      :- [#3] Exchange(distribution=[hash[y]])\n      +- [#4] Exchange(distribution=[hash[x]])\n])
         :              :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :              :- Exchange(distribution=[broadcast])
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :              :- Exchange(distribution=[hash[y]])
         :              :  +- Reused(reference_id=[1])
         :              +- Exchange(distribution=[hash[x]])
         :                 +- Calc(select=[x, y0])
         :                    +- NestedLoopJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])
         :                       :- Reused(reference_id=[1])
         :                       +- Exchange(distribution=[broadcast])(reuse_id=[2])
         :                          +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
         :- Exchange(distribution=[hash[y]])
         :  +- Calc(select=[y, x00 AS x000])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x00], build=[right])
         :        :- Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Exchange(distribution=[hash[y]])
         :           +- Calc(select=[y, x0 AS x00])
         :              +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x0], build=[right])
         :                 :- Exchange(distribution=[hash[x]])
         :                 :  +- Reused(reference_id=[1])
         :                 +- Exchange(distribution=[hash[y]])
         :                    +- Calc(select=[y, x0])
         :                       +- NestedLoopJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, x0, y0], build=[right])
         :                          :- Reused(reference_id=[1])
         :                          +- Reused(reference_id=[2])
         :- Exchange(distribution=[hash[x]])
         :  +- Calc(select=[x, X0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[x, y, X0, X1], build=[right])
         :        :- Exchange(distribution=[hash[y]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Reused(reference_id=[3])
         +- Exchange(distribution=[hash[y]])
            +- Calc(select=[y, x0])
               +- HashJoin(joinType=[InnerJoin], where=[(x0 = x)], select=[x, y, x0], isBroadcast=[true], build=[right])
                  :- Reused(reference_id=[1])
                  +- Exchange(distribution=[broadcast])
                     +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])

Job has been submitted with JobID bf3681a01b46a61de854f003ca843592
WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT s_2.y AS X0, r_0.x AS X1 FROM s AS s_2 INNER JOIN r AS r_1 on s_2.x = r_1.y INNER JOIN r AS r_0 on r_1.x = r_0.y )), p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1 FROM p12 AS p12_4 INNER JOIN r AS r_3 ON r_3.y = p12_4.X1 INNER JOIN r AS r_2 ON r_2.y = r_3.x INNER JOIN r AS r_1 ON r_1.y = r_2.x INNER JOIN s as s_0 ON s_0.y = r_1.x UNION (SELECT a_0.x AS X0, p12_3.X0 AS X1 FROM a AS a_0 INNER JOIN r AS r_1 ON a_0.x = r_1.x INNER JOIN r AS r_2 ON r_1.y = r_2.x INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...
waiting...
waiting...
waiting...
waiting...

------------> using sink uuid: 9fa70c94_d203_4da2_ac77_76a17cb6b7af

Adding statistics for table s number 7 
Adding statistics for table a number 7 
Adding statistics for table b number 7 
Adding statistics for table r number 7 
Adding statistics for table t number 7 
sql argument: WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1
             FROM r AS r_0
                      INNER JOIN b AS b_1 ON r_0.y = b_1.x
             UNION
             (SELECT s_2.y AS X0, r_0.x AS X1
              FROM s AS s_2
                       INNER JOIN r AS r_1 on s_2.x = r_1.y
                       INNER JOIN r AS r_0 on r_1.x = r_0.y
             )),
     p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1
            FROM p12 AS p12_4
                INNER JOIN r AS r_3 ON r_3.y = p12_4.X1
                INNER JOIN r AS r_2 ON r_2.y = r_3.x
                INNER JOIN r AS r_1 ON r_1.y = r_2.x
                INNER JOIN s as s_0 ON s_0.y = r_1.x
            UNION
            (SELECT a_0.x AS X0, p12_3.X0 AS X1
            FROM a AS a_0
                     INNER JOIN r AS r_1 ON a_0.x = r_1.x
                     INNER JOIN r AS r_2 ON r_1.y = r_2.x
                     INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalProject(X0=[$8], X1=[$0])
   :  +- LogicalJoin(condition=[=($9, $6)], joinType=[inner])
   :     :- LogicalJoin(condition=[=($7, $4)], joinType=[inner])
   :     :  :- LogicalJoin(condition=[=($5, $2)], joinType=[inner])
   :     :  :  :- LogicalJoin(condition=[=($3, $1)], joinType=[inner])
   :     :  :  :  :- LogicalUnion(all=[false])
   :     :  :  :  :  :- LogicalProject(X0=[$1], X1=[$0])
   :     :  :  :  :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :     :  :  :  :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :     :  :  :  :  +- LogicalProject(X0=[$1], X1=[$4])
   :     :  :  :  :     +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
   :     :  :  :  :        :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
   :     :  :  :  :        :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$5])
      +- LogicalJoin(condition=[=($4, $6)], joinType=[inner])
         :- LogicalJoin(condition=[=($2, $3)], joinType=[inner])
         :  :- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :  :  :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         +- LogicalUnion(all=[false])
            :- LogicalProject(X0=[$1], X1=[$0])
            :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
            :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
            :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
            +- LogicalProject(X0=[$1], X1=[$4])
               +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
                  :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
                  :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
                  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
                  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 94661.99978162195, cumulative cost = {1.4110860038951352E8 rows, 7.436472461903848E9 cpu, 1.692285912E9 io, 9.778074315402737E8 network, 4.27391124176841E8 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 94661.99978162195, cumulative cost = {1.410139383897319E8 rows, 7.434957869907342E9 cpu, 1.692285912E9 io, 9.778074315402737E8 network, 4.2133275619081724E8 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 94661.99978162195, cumulative cost = {1.409192763899503E8 rows, 7.418297357945777E9 cpu, 1.692285912E9 io, 9.755355435455147E8 network, 4.2133275619081724E8 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 522217.647995997, cumulative cost = {1.408246143901687E8 rows, 7.409941875577841E9 cpu, 1.692285912E9 io, 9.755355435455147E8 network, 4.1527438820479345E8 memory}
         :- Calc(select=[x000 AS X0, X0 AS X1]): rowcount = 225318.10511282345, cumulative cost = {7.831206441173425E7 rows, 4.353259023198794E9 cpu, 9.23060508E8 io, 5.792689356001035E8 network, 2.3858465178239673E8 memory}
         :  +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[X0, X1, y, x000], build=[left]): rowcount = 225318.10511282345, cumulative cost = {7.808674630662143E7 rows, 4.353259023198794E9 cpu, 9.23060508E8 io, 5.792689356001035E8 network, 2.3858465178239673E8 memory}
         :     :- Exchange(distribution=[hash[X1]]): rowcount = 374745.2392521563, cumulative cost = {3.622705738700863E7 rows, 1.5252422625007763E9 cpu, 4.61533644E8 io, 1.949132010841035E8 network, 1.01832565024276E8 memory}
         :     :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 374745.2392521563, cumulative cost = {3.585231214775647E7 rows, 1.4622850623064141E9 cpu, 4.61533644E8 io, 1.8591931534205174E8 network, 1.01832565024276E8 memory}
         :     :     +- Exchange(distribution=[hash[X0, X1]]): rowcount = 374745.2392521563, cumulative cost = {3.5477566908504315E7 rows, 1.4562891384783797E9 cpu, 4.61533644E8 io, 1.8591931534205174E8 network, 7.7848869712138E7 memory}
         :     :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 374745.2392521563, cumulative cost = {3.510282166925216E7 rows, 1.3903339763700001E9 cpu, 4.61533644E8 io, 1.769254296E8 network, 7.7848869712138E7 memory}
         :     :           +- Union(all=[true], union=[X0, X1]): rowcount = 2067340.41, cumulative cost = {3.472807643E7 rows, 1.3572565298100002E9 cpu, 4.61533644E8 io, 1.769254296E8 network, 5.38651744E7 memory}
         :     :              :- Calc(select=[y AS X0, x AS X1]): rowcount = 961599.0, cumulative cost = {8334423.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :     :              :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 961599.0, cumulative cost = {7372824.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :     :              :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :     :              :     +- Exchange(distribution=[broadcast]): rowcount = 565.0, cumulative cost = {1130.0 rows, 90400.0 cpu, 6780.0 io, 6780.0 network, 0.0 memory}
         :     :              :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 565.0, cumulative cost = {565.0 rows, 0.0 cpu, 6780.0 io, 0.0 network, 0.0 memory}
         :     :              +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 1105741.41, cumulative cost = {2.432631302E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
         :     :                 +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 1105741.41, cumulative cost = {2.322057161E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
         :     :                    :- Exchange(distribution=[hash[y]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
         :     :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :     :                    +- Exchange(distribution=[hash[x]]): rowcount = 961514.3999999999, cumulative cost = {9294640.200000001 rows, 1.679446742E8 cpu, 1.53842304E8 io, 2.3076369599999998E7 network, 28.0 memory}
         :     :                       +- Calc(select=[x, y0]): rowcount = 961514.3999999999, cumulative cost = {8333125.800000001 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
         :     :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 961514.3999999999, cumulative cost = {7371611.4 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
         :     :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :     :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :     :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :     +- Exchange(distribution=[hash[y]]): rowcount = 1127375.4615, cumulative cost = {4.163437081449999E7 rows, 2.8159997950920005E9 cpu, 4.61526864E8 io, 3.84355734516E8 network, 1.1576635335999998E8 memory}
         :        +- Calc(select=[y, x00 AS x000]): rowcount = 1127375.4615, cumulative cost = {4.050699535299999E7 rows, 2.6266007175600004E9 cpu, 4.61526864E8 io, 3.5729872344E8 network, 1.1576635335999998E8 memory}
         :           +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x00], build=[right]): rowcount = 1127375.4615, cumulative cost = {3.9379619891499996E7 rows, 2.6266007175600004E9 cpu, 4.61526864E8 io, 3.5729872344E8 network, 1.1576635335999998E8 memory}
         :              :- Exchange(distribution=[hash[x]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :              +- Exchange(distribution=[hash[y]]): rowcount = 1105741.41, cumulative cost = {2.543205443E7 rows, 1.4895780662800002E9 cpu, 3.07684584E8 io, 2.0345644344E8 network, 5.38448344E7 memory}
         :                 +- Calc(select=[y, x0 AS x00]): rowcount = 1105741.41, cumulative cost = {2.432631302E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
         :                    +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x0], build=[right]): rowcount = 1105741.41, cumulative cost = {2.322057161E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
         :                       :- Exchange(distribution=[hash[x]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
         :                       :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :                       +- Exchange(distribution=[hash[y]]): rowcount = 961514.3999999999, cumulative cost = {9294640.200000001 rows, 1.679446742E8 cpu, 1.53842304E8 io, 2.3076369599999998E7 network, 28.0 memory}
         :                          +- Calc(select=[y, x0]): rowcount = 961514.3999999999, cumulative cost = {8333125.800000001 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
         :                             +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, x0, y0], build=[right]): rowcount = 961514.3999999999, cumulative cost = {7371611.4 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
         :                                :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :                                +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                                   +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x0 AS X0, X0 AS X1]): rowcount = 296899.5428831735, cumulative cost = {6.199033233043844E7 rows, 3.0561606347310505E9 cpu, 7.69225404E8 io, 3.962666079454112E8 network, 1.7668973642239675E8 memory}
            +- HashJoin(joinType=[InnerJoin], where=[=(y, x)], select=[x, X0, y, x0], build=[right]): rowcount = 296899.5428831735, cumulative cost = {6.169343278755527E7 rows, 3.0561606347310505E9 cpu, 7.69225404E8 io, 3.962666079454112E8 network, 1.7668973642239675E8 memory}
               :- Exchange(distribution=[hash[x]]): rowcount = 1017726.0358878234, cumulative cost = {5.21004254946721E7 rows, 2.827394918443948E9 cpu, 6.15375924E8 io, 3.731809059454112E8 network, 1.2281829842239675E8 memory}
               :  +- Calc(select=[x, X0]): rowcount = 1017726.0358878234, cumulative cost = {5.1082699458784275E7 rows, 2.6564169444147935E9 cpu, 6.15375924E8 io, 3.4875548108410347E8 network, 1.2281829842239675E8 memory}
               :     +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[x, y, X0, X1], build=[right]): rowcount = 1017726.0358878234, cumulative cost = {5.006497342289645E7 rows, 2.6564169444147935E9 cpu, 6.15375924E8 io, 3.4875548108410347E8 network, 1.2281829842239675E8 memory}
               :        :- Exchange(distribution=[hash[y]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
               :        :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
               :        +- Exchange(distribution=[hash[X1]]): rowcount = 374745.2392521563, cumulative cost = {3.622705738700863E7 rows, 1.5252422625007763E9 cpu, 4.61533644E8 io, 1.949132010841035E8 network, 1.01832565024276E8 memory}
               :           +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 374745.2392521563, cumulative cost = {3.585231214775647E7 rows, 1.4622850623064141E9 cpu, 4.61533644E8 io, 1.8591931534205174E8 network, 1.01832565024276E8 memory}
               :              +- Exchange(distribution=[hash[X0, X1]]): rowcount = 374745.2392521563, cumulative cost = {3.5477566908504315E7 rows, 1.4562891384783797E9 cpu, 4.61533644E8 io, 1.8591931534205174E8 network, 7.7848869712138E7 memory}
               :                 +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 374745.2392521563, cumulative cost = {3.510282166925216E7 rows, 1.3903339763700001E9 cpu, 4.61533644E8 io, 1.769254296E8 network, 7.7848869712138E7 memory}
               :                    +- Union(all=[true], union=[X0, X1]): rowcount = 2067340.41, cumulative cost = {3.472807643E7 rows, 1.3572565298100002E9 cpu, 4.61533644E8 io, 1.769254296E8 network, 5.38651744E7 memory}
               :                       :- Calc(select=[y AS X0, x AS X1]): rowcount = 961599.0, cumulative cost = {8334423.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
               :                       :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 961599.0, cumulative cost = {7372824.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
               :                       :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
               :                       :     +- Exchange(distribution=[broadcast]): rowcount = 565.0, cumulative cost = {1130.0 rows, 90400.0 cpu, 6780.0 io, 6780.0 network, 0.0 memory}
               :                       :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 565.0, cumulative cost = {565.0 rows, 0.0 cpu, 6780.0 io, 0.0 network, 0.0 memory}
               :                       +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 1105741.41, cumulative cost = {2.432631302E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
               :                          +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 1105741.41, cumulative cost = {2.322057161E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
               :                             :- Exchange(distribution=[hash[y]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
               :                             :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
               :                             +- Exchange(distribution=[hash[x]]): rowcount = 961514.3999999999, cumulative cost = {9294640.200000001 rows, 1.679446742E8 cpu, 1.53842304E8 io, 2.3076369599999998E7 network, 28.0 memory}
               :                                +- Calc(select=[x, y0]): rowcount = 961514.3999999999, cumulative cost = {8333125.800000001 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
               :                                   +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 961514.3999999999, cumulative cost = {7371611.4 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
               :                                      :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
               :                                      +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
               :                                         +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[hash[y]]): rowcount = 961604.25, cumulative cost = {9296107.75 rows, 2.12931074E8 cpu, 1.5384948E8 io, 2.3085702E7 network, 21600.0 memory}
                  +- Calc(select=[y, x0]): rowcount = 961604.25, cumulative cost = {8334503.5 rows, 5.138156E7 cpu, 1.5384948E8 io, 7200.0 network, 21600.0 memory}
                     +- HashJoin(joinType=[InnerJoin], where=[=(x0, x)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 961604.25, cumulative cost = {7372899.25 rows, 5.138156E7 cpu, 1.5384948E8 io, 7200.0 network, 21600.0 memory}
                        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
                        +- Exchange(distribution=[broadcast]): rowcount = 600.0, cumulative cost = {1200.0 rows, 96000.0 cpu, 7200.0 io, 7200.0 network, 0.0 memory}
                           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 600.0, cumulative cost = {600.0 rows, 0.0 cpu, 7200.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[0,1,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[x000 AS X0, X0 AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[X0, X1, y, x000], build=[left])\n:     :- [#1] Exchange(distribution=[hash[X1]])\n:     +- [#2] Exchange(distribution=[hash[y]])\n+- Calc(select=[x0 AS X0, X0 AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(y = x)], select=[x, X0, y, x0], build=[right])\n      :- [#3] Exchange(distribution=[hash[x]])\n      +- [#4] Exchange(distribution=[hash[y]])\n])
         :- Exchange(distribution=[hash[X1]])(reuse_id=[3])
         :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
         :     +- Exchange(distribution=[hash[X0, X1]])
         :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
         :           +- MultipleInput(readOrder=[1,0,2,1], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[y AS X0, x AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:     :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- Calc(select=[y0 AS X0, x AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])\n      :- [#3] Exchange(distribution=[hash[y]])\n      +- [#4] Exchange(distribution=[hash[x]])\n])
         :              :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :              :- Exchange(distribution=[broadcast])
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :              :- Exchange(distribution=[hash[y]])
         :              :  +- Reused(reference_id=[1])
         :              +- Exchange(distribution=[hash[x]])
         :                 +- Calc(select=[x, y0])
         :                    +- NestedLoopJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])
         :                       :- Reused(reference_id=[1])
         :                       +- Exchange(distribution=[broadcast])(reuse_id=[2])
         :                          +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
         :- Exchange(distribution=[hash[y]])
         :  +- Calc(select=[y, x00 AS x000])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x00], build=[right])
         :        :- Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Exchange(distribution=[hash[y]])
         :           +- Calc(select=[y, x0 AS x00])
         :              +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x0], build=[right])
         :                 :- Exchange(distribution=[hash[x]])
         :                 :  +- Reused(reference_id=[1])
         :                 +- Exchange(distribution=[hash[y]])
         :                    +- Calc(select=[y, x0])
         :                       +- NestedLoopJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, x0, y0], build=[right])
         :                          :- Reused(reference_id=[1])
         :                          +- Reused(reference_id=[2])
         :- Exchange(distribution=[hash[x]])
         :  +- Calc(select=[x, X0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[x, y, X0, X1], build=[right])
         :        :- Exchange(distribution=[hash[y]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Reused(reference_id=[3])
         +- Exchange(distribution=[hash[y]])
            +- Calc(select=[y, x0])
               +- HashJoin(joinType=[InnerJoin], where=[(x0 = x)], select=[x, y, x0], isBroadcast=[true], build=[right])
                  :- Reused(reference_id=[1])
                  +- Exchange(distribution=[broadcast])
                     +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])

Job has been submitted with JobID 33f8b77bd982d8fd1fca86a421cb3fca
WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT s_2.y AS X0, r_0.x AS X1 FROM s AS s_2 INNER JOIN r AS r_1 on s_2.x = r_1.y INNER JOIN r AS r_0 on r_1.x = r_0.y )), p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1 FROM p12 AS p12_4 INNER JOIN r AS r_3 ON r_3.y = p12_4.X1 INNER JOIN r AS r_2 ON r_2.y = r_3.x INNER JOIN r AS r_1 ON r_1.y = r_2.x INNER JOIN s as s_0 ON s_0.y = r_1.x UNION (SELECT a_0.x AS X0, p12_3.X0 AS X1 FROM a AS a_0 INNER JOIN r AS r_1 ON a_0.x = r_1.x INNER JOIN r AS r_2 ON r_1.y = r_2.x INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...
waiting...
waiting...
waiting...
waiting...

------------> using sink uuid: 656c4b30_3423_4466_83e5_9de5da13d90f

Adding statistics for table s number 7 
Adding statistics for table a number 7 
Adding statistics for table b number 7 
Adding statistics for table r number 7 
Adding statistics for table t number 7 
sql argument: WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1
             FROM r AS r_0
                      INNER JOIN b AS b_1 ON r_0.y = b_1.x
             UNION
             (SELECT s_2.y AS X0, r_0.x AS X1
              FROM s AS s_2
                       INNER JOIN r AS r_1 on s_2.x = r_1.y
                       INNER JOIN r AS r_0 on r_1.x = r_0.y
             )),
     p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1
            FROM p12 AS p12_4
                INNER JOIN r AS r_3 ON r_3.y = p12_4.X1
                INNER JOIN r AS r_2 ON r_2.y = r_3.x
                INNER JOIN r AS r_1 ON r_1.y = r_2.x
                INNER JOIN s as s_0 ON s_0.y = r_1.x
            UNION
            (SELECT a_0.x AS X0, p12_3.X0 AS X1
            FROM a AS a_0
                     INNER JOIN r AS r_1 ON a_0.x = r_1.x
                     INNER JOIN r AS r_2 ON r_1.y = r_2.x
                     INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalProject(X0=[$8], X1=[$0])
   :  +- LogicalJoin(condition=[=($9, $6)], joinType=[inner])
   :     :- LogicalJoin(condition=[=($7, $4)], joinType=[inner])
   :     :  :- LogicalJoin(condition=[=($5, $2)], joinType=[inner])
   :     :  :  :- LogicalJoin(condition=[=($3, $1)], joinType=[inner])
   :     :  :  :  :- LogicalUnion(all=[false])
   :     :  :  :  :  :- LogicalProject(X0=[$1], X1=[$0])
   :     :  :  :  :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :     :  :  :  :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :     :  :  :  :  +- LogicalProject(X0=[$1], X1=[$4])
   :     :  :  :  :     +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
   :     :  :  :  :        :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
   :     :  :  :  :        :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$5])
      +- LogicalJoin(condition=[=($4, $6)], joinType=[inner])
         :- LogicalJoin(condition=[=($2, $3)], joinType=[inner])
         :  :- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :  :  :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         +- LogicalUnion(all=[false])
            :- LogicalProject(X0=[$1], X1=[$0])
            :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
            :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
            :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
            +- LogicalProject(X0=[$1], X1=[$4])
               +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
                  :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
                  :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
                  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
                  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 94661.99978162195, cumulative cost = {1.4110860038951352E8 rows, 7.436472461903848E9 cpu, 1.692285912E9 io, 9.778074315402737E8 network, 4.27391124176841E8 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 94661.99978162195, cumulative cost = {1.410139383897319E8 rows, 7.434957869907342E9 cpu, 1.692285912E9 io, 9.778074315402737E8 network, 4.2133275619081724E8 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 94661.99978162195, cumulative cost = {1.409192763899503E8 rows, 7.418297357945777E9 cpu, 1.692285912E9 io, 9.755355435455147E8 network, 4.2133275619081724E8 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 522217.647995997, cumulative cost = {1.408246143901687E8 rows, 7.409941875577841E9 cpu, 1.692285912E9 io, 9.755355435455147E8 network, 4.1527438820479345E8 memory}
         :- Calc(select=[x000 AS X0, X0 AS X1]): rowcount = 225318.10511282345, cumulative cost = {7.831206441173425E7 rows, 4.353259023198794E9 cpu, 9.23060508E8 io, 5.792689356001035E8 network, 2.3858465178239673E8 memory}
         :  +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[X0, X1, y, x000], build=[left]): rowcount = 225318.10511282345, cumulative cost = {7.808674630662143E7 rows, 4.353259023198794E9 cpu, 9.23060508E8 io, 5.792689356001035E8 network, 2.3858465178239673E8 memory}
         :     :- Exchange(distribution=[hash[X1]]): rowcount = 374745.2392521563, cumulative cost = {3.622705738700863E7 rows, 1.5252422625007763E9 cpu, 4.61533644E8 io, 1.949132010841035E8 network, 1.01832565024276E8 memory}
         :     :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 374745.2392521563, cumulative cost = {3.585231214775647E7 rows, 1.4622850623064141E9 cpu, 4.61533644E8 io, 1.8591931534205174E8 network, 1.01832565024276E8 memory}
         :     :     +- Exchange(distribution=[hash[X0, X1]]): rowcount = 374745.2392521563, cumulative cost = {3.5477566908504315E7 rows, 1.4562891384783797E9 cpu, 4.61533644E8 io, 1.8591931534205174E8 network, 7.7848869712138E7 memory}
         :     :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 374745.2392521563, cumulative cost = {3.510282166925216E7 rows, 1.3903339763700001E9 cpu, 4.61533644E8 io, 1.769254296E8 network, 7.7848869712138E7 memory}
         :     :           +- Union(all=[true], union=[X0, X1]): rowcount = 2067340.41, cumulative cost = {3.472807643E7 rows, 1.3572565298100002E9 cpu, 4.61533644E8 io, 1.769254296E8 network, 5.38651744E7 memory}
         :     :              :- Calc(select=[y AS X0, x AS X1]): rowcount = 961599.0, cumulative cost = {8334423.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :     :              :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 961599.0, cumulative cost = {7372824.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :     :              :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :     :              :     +- Exchange(distribution=[broadcast]): rowcount = 565.0, cumulative cost = {1130.0 rows, 90400.0 cpu, 6780.0 io, 6780.0 network, 0.0 memory}
         :     :              :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 565.0, cumulative cost = {565.0 rows, 0.0 cpu, 6780.0 io, 0.0 network, 0.0 memory}
         :     :              +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 1105741.41, cumulative cost = {2.432631302E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
         :     :                 +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 1105741.41, cumulative cost = {2.322057161E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
         :     :                    :- Exchange(distribution=[hash[y]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
         :     :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :     :                    +- Exchange(distribution=[hash[x]]): rowcount = 961514.3999999999, cumulative cost = {9294640.200000001 rows, 1.679446742E8 cpu, 1.53842304E8 io, 2.3076369599999998E7 network, 28.0 memory}
         :     :                       +- Calc(select=[x, y0]): rowcount = 961514.3999999999, cumulative cost = {8333125.800000001 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
         :     :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 961514.3999999999, cumulative cost = {7371611.4 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
         :     :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :     :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :     :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :     +- Exchange(distribution=[hash[y]]): rowcount = 1127375.4615, cumulative cost = {4.163437081449999E7 rows, 2.8159997950920005E9 cpu, 4.61526864E8 io, 3.84355734516E8 network, 1.1576635335999998E8 memory}
         :        +- Calc(select=[y, x00 AS x000]): rowcount = 1127375.4615, cumulative cost = {4.050699535299999E7 rows, 2.6266007175600004E9 cpu, 4.61526864E8 io, 3.5729872344E8 network, 1.1576635335999998E8 memory}
         :           +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x00], build=[right]): rowcount = 1127375.4615, cumulative cost = {3.9379619891499996E7 rows, 2.6266007175600004E9 cpu, 4.61526864E8 io, 3.5729872344E8 network, 1.1576635335999998E8 memory}
         :              :- Exchange(distribution=[hash[x]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :              +- Exchange(distribution=[hash[y]]): rowcount = 1105741.41, cumulative cost = {2.543205443E7 rows, 1.4895780662800002E9 cpu, 3.07684584E8 io, 2.0345644344E8 network, 5.38448344E7 memory}
         :                 +- Calc(select=[y, x0 AS x00]): rowcount = 1105741.41, cumulative cost = {2.432631302E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
         :                    +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x0], build=[right]): rowcount = 1105741.41, cumulative cost = {2.322057161E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
         :                       :- Exchange(distribution=[hash[x]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
         :                       :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :                       +- Exchange(distribution=[hash[y]]): rowcount = 961514.3999999999, cumulative cost = {9294640.200000001 rows, 1.679446742E8 cpu, 1.53842304E8 io, 2.3076369599999998E7 network, 28.0 memory}
         :                          +- Calc(select=[y, x0]): rowcount = 961514.3999999999, cumulative cost = {8333125.800000001 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
         :                             +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, x0, y0], build=[right]): rowcount = 961514.3999999999, cumulative cost = {7371611.4 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
         :                                :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :                                +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                                   +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x0 AS X0, X0 AS X1]): rowcount = 296899.5428831735, cumulative cost = {6.199033233043844E7 rows, 3.0561606347310505E9 cpu, 7.69225404E8 io, 3.962666079454112E8 network, 1.7668973642239675E8 memory}
            +- HashJoin(joinType=[InnerJoin], where=[=(y, x)], select=[x, X0, y, x0], build=[right]): rowcount = 296899.5428831735, cumulative cost = {6.169343278755527E7 rows, 3.0561606347310505E9 cpu, 7.69225404E8 io, 3.962666079454112E8 network, 1.7668973642239675E8 memory}
               :- Exchange(distribution=[hash[x]]): rowcount = 1017726.0358878234, cumulative cost = {5.21004254946721E7 rows, 2.827394918443948E9 cpu, 6.15375924E8 io, 3.731809059454112E8 network, 1.2281829842239675E8 memory}
               :  +- Calc(select=[x, X0]): rowcount = 1017726.0358878234, cumulative cost = {5.1082699458784275E7 rows, 2.6564169444147935E9 cpu, 6.15375924E8 io, 3.4875548108410347E8 network, 1.2281829842239675E8 memory}
               :     +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[x, y, X0, X1], build=[right]): rowcount = 1017726.0358878234, cumulative cost = {5.006497342289645E7 rows, 2.6564169444147935E9 cpu, 6.15375924E8 io, 3.4875548108410347E8 network, 1.2281829842239675E8 memory}
               :        :- Exchange(distribution=[hash[y]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
               :        :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
               :        +- Exchange(distribution=[hash[X1]]): rowcount = 374745.2392521563, cumulative cost = {3.622705738700863E7 rows, 1.5252422625007763E9 cpu, 4.61533644E8 io, 1.949132010841035E8 network, 1.01832565024276E8 memory}
               :           +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 374745.2392521563, cumulative cost = {3.585231214775647E7 rows, 1.4622850623064141E9 cpu, 4.61533644E8 io, 1.8591931534205174E8 network, 1.01832565024276E8 memory}
               :              +- Exchange(distribution=[hash[X0, X1]]): rowcount = 374745.2392521563, cumulative cost = {3.5477566908504315E7 rows, 1.4562891384783797E9 cpu, 4.61533644E8 io, 1.8591931534205174E8 network, 7.7848869712138E7 memory}
               :                 +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 374745.2392521563, cumulative cost = {3.510282166925216E7 rows, 1.3903339763700001E9 cpu, 4.61533644E8 io, 1.769254296E8 network, 7.7848869712138E7 memory}
               :                    +- Union(all=[true], union=[X0, X1]): rowcount = 2067340.41, cumulative cost = {3.472807643E7 rows, 1.3572565298100002E9 cpu, 4.61533644E8 io, 1.769254296E8 network, 5.38651744E7 memory}
               :                       :- Calc(select=[y AS X0, x AS X1]): rowcount = 961599.0, cumulative cost = {8334423.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
               :                       :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 961599.0, cumulative cost = {7372824.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
               :                       :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
               :                       :     +- Exchange(distribution=[broadcast]): rowcount = 565.0, cumulative cost = {1130.0 rows, 90400.0 cpu, 6780.0 io, 6780.0 network, 0.0 memory}
               :                       :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 565.0, cumulative cost = {565.0 rows, 0.0 cpu, 6780.0 io, 0.0 network, 0.0 memory}
               :                       +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 1105741.41, cumulative cost = {2.432631302E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
               :                          +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 1105741.41, cumulative cost = {2.322057161E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
               :                             :- Exchange(distribution=[hash[y]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
               :                             :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
               :                             +- Exchange(distribution=[hash[x]]): rowcount = 961514.3999999999, cumulative cost = {9294640.200000001 rows, 1.679446742E8 cpu, 1.53842304E8 io, 2.3076369599999998E7 network, 28.0 memory}
               :                                +- Calc(select=[x, y0]): rowcount = 961514.3999999999, cumulative cost = {8333125.800000001 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
               :                                   +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 961514.3999999999, cumulative cost = {7371611.4 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
               :                                      :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
               :                                      +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
               :                                         +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[hash[y]]): rowcount = 961604.25, cumulative cost = {9296107.75 rows, 2.12931074E8 cpu, 1.5384948E8 io, 2.3085702E7 network, 21600.0 memory}
                  +- Calc(select=[y, x0]): rowcount = 961604.25, cumulative cost = {8334503.5 rows, 5.138156E7 cpu, 1.5384948E8 io, 7200.0 network, 21600.0 memory}
                     +- HashJoin(joinType=[InnerJoin], where=[=(x0, x)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 961604.25, cumulative cost = {7372899.25 rows, 5.138156E7 cpu, 1.5384948E8 io, 7200.0 network, 21600.0 memory}
                        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
                        +- Exchange(distribution=[broadcast]): rowcount = 600.0, cumulative cost = {1200.0 rows, 96000.0 cpu, 7200.0 io, 7200.0 network, 0.0 memory}
                           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 600.0, cumulative cost = {600.0 rows, 0.0 cpu, 7200.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[0,1,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[x000 AS X0, X0 AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[X0, X1, y, x000], build=[left])\n:     :- [#1] Exchange(distribution=[hash[X1]])\n:     +- [#2] Exchange(distribution=[hash[y]])\n+- Calc(select=[x0 AS X0, X0 AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(y = x)], select=[x, X0, y, x0], build=[right])\n      :- [#3] Exchange(distribution=[hash[x]])\n      +- [#4] Exchange(distribution=[hash[y]])\n])
         :- Exchange(distribution=[hash[X1]])(reuse_id=[3])
         :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
         :     +- Exchange(distribution=[hash[X0, X1]])
         :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
         :           +- MultipleInput(readOrder=[1,0,2,1], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[y AS X0, x AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:     :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- Calc(select=[y0 AS X0, x AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])\n      :- [#3] Exchange(distribution=[hash[y]])\n      +- [#4] Exchange(distribution=[hash[x]])\n])
         :              :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :              :- Exchange(distribution=[broadcast])
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :              :- Exchange(distribution=[hash[y]])
         :              :  +- Reused(reference_id=[1])
         :              +- Exchange(distribution=[hash[x]])
         :                 +- Calc(select=[x, y0])
         :                    +- NestedLoopJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])
         :                       :- Reused(reference_id=[1])
         :                       +- Exchange(distribution=[broadcast])(reuse_id=[2])
         :                          +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
         :- Exchange(distribution=[hash[y]])
         :  +- Calc(select=[y, x00 AS x000])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x00], build=[right])
         :        :- Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Exchange(distribution=[hash[y]])
         :           +- Calc(select=[y, x0 AS x00])
         :              +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x0], build=[right])
         :                 :- Exchange(distribution=[hash[x]])
         :                 :  +- Reused(reference_id=[1])
         :                 +- Exchange(distribution=[hash[y]])
         :                    +- Calc(select=[y, x0])
         :                       +- NestedLoopJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, x0, y0], build=[right])
         :                          :- Reused(reference_id=[1])
         :                          +- Reused(reference_id=[2])
         :- Exchange(distribution=[hash[x]])
         :  +- Calc(select=[x, X0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[x, y, X0, X1], build=[right])
         :        :- Exchange(distribution=[hash[y]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Reused(reference_id=[3])
         +- Exchange(distribution=[hash[y]])
            +- Calc(select=[y, x0])
               +- HashJoin(joinType=[InnerJoin], where=[(x0 = x)], select=[x, y, x0], isBroadcast=[true], build=[right])
                  :- Reused(reference_id=[1])
                  +- Exchange(distribution=[broadcast])
                     +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])

Job has been submitted with JobID c73d8542a349cc9e0d0bf94789eb0b7e
WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT s_2.y AS X0, r_0.x AS X1 FROM s AS s_2 INNER JOIN r AS r_1 on s_2.x = r_1.y INNER JOIN r AS r_0 on r_1.x = r_0.y )), p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1 FROM p12 AS p12_4 INNER JOIN r AS r_3 ON r_3.y = p12_4.X1 INNER JOIN r AS r_2 ON r_2.y = r_3.x INNER JOIN r AS r_1 ON r_1.y = r_2.x INNER JOIN s as s_0 ON s_0.y = r_1.x UNION (SELECT a_0.x AS X0, p12_3.X0 AS X1 FROM a AS a_0 INNER JOIN r AS r_1 ON a_0.x = r_1.x INNER JOIN r AS r_2 ON r_1.y = r_2.x INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...
waiting...
waiting...
waiting...
waiting...

------------> using sink uuid: 3ce4f7b7_d2d3_40fc_be9b_b22eea0dd758

Adding statistics for table s number 9 
Adding statistics for table a number 9 
Adding statistics for table b number 9 
Adding statistics for table r number 9 
Adding statistics for table t number 9 
sql argument: WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1
             FROM r AS r_0
                      INNER JOIN b AS b_1 ON r_0.y = b_1.x
             UNION
             (SELECT s_2.y AS X0, r_0.x AS X1
              FROM s AS s_2
                       INNER JOIN r AS r_1 on s_2.x = r_1.y
                       INNER JOIN r AS r_0 on r_1.x = r_0.y
             )),
     p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1
            FROM p12 AS p12_4
                INNER JOIN r AS r_3 ON r_3.y = p12_4.X1
                INNER JOIN r AS r_2 ON r_2.y = r_3.x
                INNER JOIN r AS r_1 ON r_1.y = r_2.x
                INNER JOIN s as s_0 ON s_0.y = r_1.x
            UNION
            (SELECT a_0.x AS X0, p12_3.X0 AS X1
            FROM a AS a_0
                     INNER JOIN r AS r_1 ON a_0.x = r_1.x
                     INNER JOIN r AS r_2 ON r_1.y = r_2.x
                     INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalProject(X0=[$8], X1=[$0])
   :  +- LogicalJoin(condition=[=($9, $6)], joinType=[inner])
   :     :- LogicalJoin(condition=[=($7, $4)], joinType=[inner])
   :     :  :- LogicalJoin(condition=[=($5, $2)], joinType=[inner])
   :     :  :  :- LogicalJoin(condition=[=($3, $1)], joinType=[inner])
   :     :  :  :  :- LogicalUnion(all=[false])
   :     :  :  :  :  :- LogicalProject(X0=[$1], X1=[$0])
   :     :  :  :  :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :     :  :  :  :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :     :  :  :  :  +- LogicalProject(X0=[$1], X1=[$4])
   :     :  :  :  :     +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
   :     :  :  :  :        :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
   :     :  :  :  :        :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$5])
      +- LogicalJoin(condition=[=($4, $6)], joinType=[inner])
         :- LogicalJoin(condition=[=($2, $3)], joinType=[inner])
         :  :- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :  :  :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         +- LogicalUnion(all=[false])
            :- LogicalProject(X0=[$1], X1=[$0])
            :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
            :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
            :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
            +- LogicalProject(X0=[$1], X1=[$4])
               +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
                  :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
                  :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
                  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
                  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 60572.11526244861, cumulative cost = {9.02922779559936E7 rows, 4.75845055108896E9 cpu, 1.082850576E9 io, 6.25676293930597E8 network, 2.7348895396489584E8 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 60572.11526244861, cumulative cost = {9.023170584073114E7 rows, 4.7574813972447605E9 cpu, 1.082850576E9 io, 6.25676293930597E8 network, 2.696123385880991E8 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 60572.11526244861, cumulative cost = {9.01711337254687E7 rows, 4.74682070495857E9 cpu, 1.082850576E9 io, 6.242225631642982E8 network, 2.696123385880991E8 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 334155.49681467295, cumulative cost = {9.011056161020625E7 rows, 4.741474217009535E9 cpu, 1.082850576E9 io, 6.242225631642982E8 network, 2.6573572321130243E8 memory}
         :- Calc(select=[x000 AS X0, X0 AS X1]): rowcount = 144175.22029781347, cumulative cost = {5.0109980246745646E7 rows, 2.785548164870803E9 cpu, 5.90642052E8 io, 3.7065949555230033E8 network, 1.5266788889565122E8 memory}
         :  +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[X0, X1, y, x000], build=[left]): rowcount = 144175.22029781347, cumulative cost = {4.996580502644783E7 rows, 2.785548164870803E9 cpu, 5.90642052E8 io, 3.7065949555230033E8 network, 1.5266788889565122E8 memory}
         :     :- Exchange(distribution=[hash[X1]]): rowcount = 239791.84519375666, cumulative cost = {2.318094978327502E7 rows, 9.759785867672524E8 cpu, 2.95323804E8 io, 1.2472091136930032E8 network, 6.5163853384800844E7 memory}
         :     :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 239791.84519375666, cumulative cost = {2.2941157938081264E7 rows, 9.356935567747014E8 cpu, 2.95323804E8 io, 1.1896590708465016E8 network, 6.5163853384800844E7 memory}
         :     :     +- Exchange(distribution=[hash[X0, X1]]): rowcount = 239791.84519375666, cumulative cost = {2.270136609288751E7 rows, 9.318568872516012E8 cpu, 2.95323804E8 io, 1.1896590708465016E8 network, 4.981717529240042E7 memory}
         :     :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 239791.84519375666, cumulative cost = {2.2461574247693755E7 rows, 8.896535224975001E8 cpu, 2.95323804E8 io, 1.132109028E8 network, 4.981717529240042E7 memory}
         :     :           +- Union(all=[true], union=[X0, X1]): rowcount = 1322849.0175, cumulative cost = {2.22217824025E7 rows, 8.684879382175001E8 cpu, 2.95323804E8 io, 1.132109028E8 network, 3.4470497199999996E7 memory}
         :     :              :- Calc(select=[y AS X0, x AS X1]): rowcount = 615315.75, cumulative cost = {5333199.5 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :     :              :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 615315.75, cumulative cost = {4717883.75 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :     :              :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :     :              :     +- Exchange(distribution=[broadcast]): rowcount = 463.0, cumulative cost = {926.0 rows, 74080.0 cpu, 5556.0 io, 5556.0 network, 0.0 memory}
         :     :              :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 463.0, cumulative cost = {463.0 rows, 0.0 cpu, 5556.0 io, 0.0 network, 0.0 memory}
         :     :              +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 707533.2675, cumulative cost = {1.5565733885E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
         :     :                 +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 707533.2675, cumulative cost = {1.48582006175E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
         :     :                    :- Exchange(distribution=[hash[y]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
         :     :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :     :                    +- Exchange(distribution=[hash[x]]): rowcount = 615246.45, cumulative cost = {5947383.350000001 rows, 1.074632056E8 cpu, 9.8439432E7 io, 1.4765938799999999E7 network, 28.0 memory}
         :     :                       +- Calc(select=[x, y0]): rowcount = 615246.45, cumulative cost = {5332136.9 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
         :     :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 615246.45, cumulative cost = {4716890.45 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
         :     :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :     :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :     :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :     +- Exchange(distribution=[hash[y]]): rowcount = 721376.2901249999, cumulative cost = {2.6640680022875004E7 rows, 1.8018802330210001E9 cpu, 2.95318248E8 io, 2.45938584183E8 network, 7.407569217999999E7 memory}
         :        +- Calc(select=[y, x00 AS x000]): rowcount = 721376.2901249999, cumulative cost = {2.5919303732750002E7 rows, 1.6806890162800002E9 cpu, 2.95318248E8 io, 2.2862555322E8 network, 7.407569217999999E7 memory}
         :           +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x00], build=[right]): rowcount = 721376.2901249999, cumulative cost = {2.5197927442625E7 rows, 1.6806890162800002E9 cpu, 2.95318248E8 io, 2.2862555322E8 network, 7.407569217999999E7 memory}
         :              :- Exchange(distribution=[hash[x]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :              +- Exchange(distribution=[hash[y]]): rowcount = 707533.2675, cumulative cost = {1.62732671525E7 rows, 9.531397581400001E8 cpu, 1.9687884E8 io, 1.3018614522E8 network, 3.4453829199999996E7 memory}
         :                 +- Calc(select=[y, x0 AS x00]): rowcount = 707533.2675, cumulative cost = {1.5565733885E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
         :                    +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x0], build=[right]): rowcount = 707533.2675, cumulative cost = {1.48582006175E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
         :                       :- Exchange(distribution=[hash[x]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
         :                       :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :                       +- Exchange(distribution=[hash[y]]): rowcount = 615246.45, cumulative cost = {5947383.350000001 rows, 1.074632056E8 cpu, 9.8439432E7 io, 1.4765938799999999E7 network, 28.0 memory}
         :                          +- Calc(select=[y, x0]): rowcount = 615246.45, cumulative cost = {5332136.9 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
         :                             +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, x0, y0], build=[right]): rowcount = 615246.45, cumulative cost = {4716890.45 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
         :                                :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :                                +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                                   +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x0 AS X0, X0 AS X1]): rowcount = 189980.2765168595, cumulative cost = {3.966642586664593E7 rows, 1.9555918966419175E9 cpu, 4.92208524E8 io, 2.5356306761199784E8 network, 1.1306783431565121E8 memory}
            +- HashJoin(joinType=[InnerJoin], where=[=(y, x)], select=[x, X0, y, x0], build=[right]): rowcount = 189980.2765168595, cumulative cost = {3.947644559012907E7 rows, 1.9555918966419175E9 cpu, 4.92208524E8 io, 2.5356306761199784E8 network, 1.1306783431565121E8 memory}
               :- Exchange(distribution=[hash[x]]): rowcount = 651215.0767790634, cumulative cost = {3.333787901361221E7 rows, 1.809190046427685E9 cpu, 3.93763212E8 io, 2.3878948121199784E8 network, 7.859219671565121E7 memory}
               :  +- Calc(select=[x, X0]): rowcount = 651215.0767790634, cumulative cost = {3.2686663936833147E7 rows, 1.6997859135288024E9 cpu, 3.93763212E8 io, 2.231603193693003E8 network, 7.859219671565121E7 memory}
               :     +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[x, y, X0, X1], build=[right]): rowcount = 651215.0767790634, cumulative cost = {3.2035448860054083E7 rows, 1.6997859135288024E9 cpu, 3.93763212E8 io, 2.231603193693003E8 network, 7.859219671565121E7 memory}
               :        :- Exchange(distribution=[hash[y]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
               :        :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
               :        +- Exchange(distribution=[hash[X1]]): rowcount = 239791.84519375666, cumulative cost = {2.318094978327502E7 rows, 9.759785867672524E8 cpu, 2.95323804E8 io, 1.2472091136930032E8 network, 6.5163853384800844E7 memory}
               :           +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 239791.84519375666, cumulative cost = {2.2941157938081264E7 rows, 9.356935567747014E8 cpu, 2.95323804E8 io, 1.1896590708465016E8 network, 6.5163853384800844E7 memory}
               :              +- Exchange(distribution=[hash[X0, X1]]): rowcount = 239791.84519375666, cumulative cost = {2.270136609288751E7 rows, 9.318568872516012E8 cpu, 2.95323804E8 io, 1.1896590708465016E8 network, 4.981717529240042E7 memory}
               :                 +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 239791.84519375666, cumulative cost = {2.2461574247693755E7 rows, 8.896535224975001E8 cpu, 2.95323804E8 io, 1.132109028E8 network, 4.981717529240042E7 memory}
               :                    +- Union(all=[true], union=[X0, X1]): rowcount = 1322849.0175, cumulative cost = {2.22217824025E7 rows, 8.684879382175001E8 cpu, 2.95323804E8 io, 1.132109028E8 network, 3.4470497199999996E7 memory}
               :                       :- Calc(select=[y AS X0, x AS X1]): rowcount = 615315.75, cumulative cost = {5333199.5 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
               :                       :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 615315.75, cumulative cost = {4717883.75 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
               :                       :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
               :                       :     +- Exchange(distribution=[broadcast]): rowcount = 463.0, cumulative cost = {926.0 rows, 74080.0 cpu, 5556.0 io, 5556.0 network, 0.0 memory}
               :                       :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 463.0, cumulative cost = {463.0 rows, 0.0 cpu, 5556.0 io, 0.0 network, 0.0 memory}
               :                       +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 707533.2675, cumulative cost = {1.5565733885E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
               :                          +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 707533.2675, cumulative cost = {1.48582006175E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
               :                             :- Exchange(distribution=[hash[y]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
               :                             :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
               :                             +- Exchange(distribution=[hash[x]]): rowcount = 615246.45, cumulative cost = {5947383.350000001 rows, 1.074632056E8 cpu, 9.8439432E7 io, 1.4765938799999999E7 network, 28.0 memory}
               :                                +- Calc(select=[x, y0]): rowcount = 615246.45, cumulative cost = {5332136.9 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
               :                                   +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 615246.45, cumulative cost = {4716890.45 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
               :                                      :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
               :                                      +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
               :                                         +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[hash[y]]): rowcount = 615320.1, cumulative cost = {5948586.299999999 rows, 1.362695688E8 cpu, 9.8445312E7 io, 1.4773586399999999E7 network, 17712.0 memory}
                  +- Calc(select=[y, x0]): rowcount = 615320.1, cumulative cost = {5333266.199999999 rows, 3.2895792E7 cpu, 9.8445312E7 io, 5904.0 network, 17712.0 memory}
                     +- HashJoin(joinType=[InnerJoin], where=[=(x0, x)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 615320.1, cumulative cost = {4717946.1 rows, 3.2895792E7 cpu, 9.8445312E7 io, 5904.0 network, 17712.0 memory}
                        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
                        +- Exchange(distribution=[broadcast]): rowcount = 492.0, cumulative cost = {984.0 rows, 78720.0 cpu, 5904.0 io, 5904.0 network, 0.0 memory}
                           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 492.0, cumulative cost = {492.0 rows, 0.0 cpu, 5904.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[0,1,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[x000 AS X0, X0 AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[X0, X1, y, x000], build=[left])\n:     :- [#1] Exchange(distribution=[hash[X1]])\n:     +- [#2] Exchange(distribution=[hash[y]])\n+- Calc(select=[x0 AS X0, X0 AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(y = x)], select=[x, X0, y, x0], build=[right])\n      :- [#3] Exchange(distribution=[hash[x]])\n      +- [#4] Exchange(distribution=[hash[y]])\n])
         :- Exchange(distribution=[hash[X1]])(reuse_id=[3])
         :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
         :     +- Exchange(distribution=[hash[X0, X1]])
         :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
         :           +- MultipleInput(readOrder=[1,0,2,1], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[y AS X0, x AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:     :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- Calc(select=[y0 AS X0, x AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])\n      :- [#3] Exchange(distribution=[hash[y]])\n      +- [#4] Exchange(distribution=[hash[x]])\n])
         :              :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :              :- Exchange(distribution=[broadcast])
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :              :- Exchange(distribution=[hash[y]])
         :              :  +- Reused(reference_id=[1])
         :              +- Exchange(distribution=[hash[x]])
         :                 +- Calc(select=[x, y0])
         :                    +- NestedLoopJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])
         :                       :- Reused(reference_id=[1])
         :                       +- Exchange(distribution=[broadcast])(reuse_id=[2])
         :                          +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
         :- Exchange(distribution=[hash[y]])
         :  +- Calc(select=[y, x00 AS x000])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x00], build=[right])
         :        :- Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Exchange(distribution=[hash[y]])
         :           +- Calc(select=[y, x0 AS x00])
         :              +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x0], build=[right])
         :                 :- Exchange(distribution=[hash[x]])
         :                 :  +- Reused(reference_id=[1])
         :                 +- Exchange(distribution=[hash[y]])
         :                    +- Calc(select=[y, x0])
         :                       +- NestedLoopJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, x0, y0], build=[right])
         :                          :- Reused(reference_id=[1])
         :                          +- Reused(reference_id=[2])
         :- Exchange(distribution=[hash[x]])
         :  +- Calc(select=[x, X0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[x, y, X0, X1], build=[right])
         :        :- Exchange(distribution=[hash[y]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Reused(reference_id=[3])
         +- Exchange(distribution=[hash[y]])
            +- Calc(select=[y, x0])
               +- HashJoin(joinType=[InnerJoin], where=[(x0 = x)], select=[x, y, x0], isBroadcast=[true], build=[right])
                  :- Reused(reference_id=[1])
                  +- Exchange(distribution=[broadcast])
                     +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])

Job has been submitted with JobID 3442d340acec8b47ff7cd05bda5bda7d
WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT s_2.y AS X0, r_0.x AS X1 FROM s AS s_2 INNER JOIN r AS r_1 on s_2.x = r_1.y INNER JOIN r AS r_0 on r_1.x = r_0.y )), p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1 FROM p12 AS p12_4 INNER JOIN r AS r_3 ON r_3.y = p12_4.X1 INNER JOIN r AS r_2 ON r_2.y = r_3.x INNER JOIN r AS r_1 ON r_1.y = r_2.x INNER JOIN s as s_0 ON s_0.y = r_1.x UNION (SELECT a_0.x AS X0, p12_3.X0 AS X1 FROM a AS a_0 INNER JOIN r AS r_1 ON a_0.x = r_1.x INNER JOIN r AS r_2 ON r_1.y = r_2.x INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...
waiting...
waiting...
waiting...
waiting...
waiting...
waiting...
waiting...
waiting...
waiting...
waiting...
waiting...
waiting...

------------> using sink uuid: 91f43caa_2609_431c_8303_2c5a3e6c6327

Adding statistics for table s number 9 
Adding statistics for table a number 9 
Adding statistics for table b number 9 
Adding statistics for table r number 9 
Adding statistics for table t number 9 
sql argument: WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1
             FROM r AS r_0
                      INNER JOIN b AS b_1 ON r_0.y = b_1.x
             UNION
             (SELECT s_2.y AS X0, r_0.x AS X1
              FROM s AS s_2
                       INNER JOIN r AS r_1 on s_2.x = r_1.y
                       INNER JOIN r AS r_0 on r_1.x = r_0.y
             )),
     p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1
            FROM p12 AS p12_4
                INNER JOIN r AS r_3 ON r_3.y = p12_4.X1
                INNER JOIN r AS r_2 ON r_2.y = r_3.x
                INNER JOIN r AS r_1 ON r_1.y = r_2.x
                INNER JOIN s as s_0 ON s_0.y = r_1.x
            UNION
            (SELECT a_0.x AS X0, p12_3.X0 AS X1
            FROM a AS a_0
                     INNER JOIN r AS r_1 ON a_0.x = r_1.x
                     INNER JOIN r AS r_2 ON r_1.y = r_2.x
                     INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalProject(X0=[$8], X1=[$0])
   :  +- LogicalJoin(condition=[=($9, $6)], joinType=[inner])
   :     :- LogicalJoin(condition=[=($7, $4)], joinType=[inner])
   :     :  :- LogicalJoin(condition=[=($5, $2)], joinType=[inner])
   :     :  :  :- LogicalJoin(condition=[=($3, $1)], joinType=[inner])
   :     :  :  :  :- LogicalUnion(all=[false])
   :     :  :  :  :  :- LogicalProject(X0=[$1], X1=[$0])
   :     :  :  :  :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :     :  :  :  :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :     :  :  :  :  +- LogicalProject(X0=[$1], X1=[$4])
   :     :  :  :  :     +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
   :     :  :  :  :        :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
   :     :  :  :  :        :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$5])
      +- LogicalJoin(condition=[=($4, $6)], joinType=[inner])
         :- LogicalJoin(condition=[=($2, $3)], joinType=[inner])
         :  :- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :  :  :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         +- LogicalUnion(all=[false])
            :- LogicalProject(X0=[$1], X1=[$0])
            :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
            :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
            :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
            +- LogicalProject(X0=[$1], X1=[$4])
               +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
                  :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
                  :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
                  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
                  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 60572.11526244861, cumulative cost = {9.02922779559936E7 rows, 4.75845055108896E9 cpu, 1.082850576E9 io, 6.25676293930597E8 network, 2.7348895396489584E8 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 60572.11526244861, cumulative cost = {9.023170584073114E7 rows, 4.7574813972447605E9 cpu, 1.082850576E9 io, 6.25676293930597E8 network, 2.696123385880991E8 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 60572.11526244861, cumulative cost = {9.01711337254687E7 rows, 4.74682070495857E9 cpu, 1.082850576E9 io, 6.242225631642982E8 network, 2.696123385880991E8 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 334155.49681467295, cumulative cost = {9.011056161020625E7 rows, 4.741474217009535E9 cpu, 1.082850576E9 io, 6.242225631642982E8 network, 2.6573572321130243E8 memory}
         :- Calc(select=[x000 AS X0, X0 AS X1]): rowcount = 144175.22029781347, cumulative cost = {5.0109980246745646E7 rows, 2.785548164870803E9 cpu, 5.90642052E8 io, 3.7065949555230033E8 network, 1.5266788889565122E8 memory}
         :  +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[X0, X1, y, x000], build=[left]): rowcount = 144175.22029781347, cumulative cost = {4.996580502644783E7 rows, 2.785548164870803E9 cpu, 5.90642052E8 io, 3.7065949555230033E8 network, 1.5266788889565122E8 memory}
         :     :- Exchange(distribution=[hash[X1]]): rowcount = 239791.84519375666, cumulative cost = {2.318094978327502E7 rows, 9.759785867672524E8 cpu, 2.95323804E8 io, 1.2472091136930032E8 network, 6.5163853384800844E7 memory}
         :     :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 239791.84519375666, cumulative cost = {2.2941157938081264E7 rows, 9.356935567747014E8 cpu, 2.95323804E8 io, 1.1896590708465016E8 network, 6.5163853384800844E7 memory}
         :     :     +- Exchange(distribution=[hash[X0, X1]]): rowcount = 239791.84519375666, cumulative cost = {2.270136609288751E7 rows, 9.318568872516012E8 cpu, 2.95323804E8 io, 1.1896590708465016E8 network, 4.981717529240042E7 memory}
         :     :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 239791.84519375666, cumulative cost = {2.2461574247693755E7 rows, 8.896535224975001E8 cpu, 2.95323804E8 io, 1.132109028E8 network, 4.981717529240042E7 memory}
         :     :           +- Union(all=[true], union=[X0, X1]): rowcount = 1322849.0175, cumulative cost = {2.22217824025E7 rows, 8.684879382175001E8 cpu, 2.95323804E8 io, 1.132109028E8 network, 3.4470497199999996E7 memory}
         :     :              :- Calc(select=[y AS X0, x AS X1]): rowcount = 615315.75, cumulative cost = {5333199.5 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :     :              :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 615315.75, cumulative cost = {4717883.75 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :     :              :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :     :              :     +- Exchange(distribution=[broadcast]): rowcount = 463.0, cumulative cost = {926.0 rows, 74080.0 cpu, 5556.0 io, 5556.0 network, 0.0 memory}
         :     :              :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 463.0, cumulative cost = {463.0 rows, 0.0 cpu, 5556.0 io, 0.0 network, 0.0 memory}
         :     :              +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 707533.2675, cumulative cost = {1.5565733885E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
         :     :                 +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 707533.2675, cumulative cost = {1.48582006175E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
         :     :                    :- Exchange(distribution=[hash[y]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
         :     :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :     :                    +- Exchange(distribution=[hash[x]]): rowcount = 615246.45, cumulative cost = {5947383.350000001 rows, 1.074632056E8 cpu, 9.8439432E7 io, 1.4765938799999999E7 network, 28.0 memory}
         :     :                       +- Calc(select=[x, y0]): rowcount = 615246.45, cumulative cost = {5332136.9 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
         :     :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 615246.45, cumulative cost = {4716890.45 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
         :     :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :     :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :     :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :     +- Exchange(distribution=[hash[y]]): rowcount = 721376.2901249999, cumulative cost = {2.6640680022875004E7 rows, 1.8018802330210001E9 cpu, 2.95318248E8 io, 2.45938584183E8 network, 7.407569217999999E7 memory}
         :        +- Calc(select=[y, x00 AS x000]): rowcount = 721376.2901249999, cumulative cost = {2.5919303732750002E7 rows, 1.6806890162800002E9 cpu, 2.95318248E8 io, 2.2862555322E8 network, 7.407569217999999E7 memory}
         :           +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x00], build=[right]): rowcount = 721376.2901249999, cumulative cost = {2.5197927442625E7 rows, 1.6806890162800002E9 cpu, 2.95318248E8 io, 2.2862555322E8 network, 7.407569217999999E7 memory}
         :              :- Exchange(distribution=[hash[x]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :              +- Exchange(distribution=[hash[y]]): rowcount = 707533.2675, cumulative cost = {1.62732671525E7 rows, 9.531397581400001E8 cpu, 1.9687884E8 io, 1.3018614522E8 network, 3.4453829199999996E7 memory}
         :                 +- Calc(select=[y, x0 AS x00]): rowcount = 707533.2675, cumulative cost = {1.5565733885E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
         :                    +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x0], build=[right]): rowcount = 707533.2675, cumulative cost = {1.48582006175E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
         :                       :- Exchange(distribution=[hash[x]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
         :                       :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :                       +- Exchange(distribution=[hash[y]]): rowcount = 615246.45, cumulative cost = {5947383.350000001 rows, 1.074632056E8 cpu, 9.8439432E7 io, 1.4765938799999999E7 network, 28.0 memory}
         :                          +- Calc(select=[y, x0]): rowcount = 615246.45, cumulative cost = {5332136.9 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
         :                             +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, x0, y0], build=[right]): rowcount = 615246.45, cumulative cost = {4716890.45 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
         :                                :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :                                +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                                   +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x0 AS X0, X0 AS X1]): rowcount = 189980.2765168595, cumulative cost = {3.966642586664593E7 rows, 1.9555918966419175E9 cpu, 4.92208524E8 io, 2.5356306761199784E8 network, 1.1306783431565121E8 memory}
            +- HashJoin(joinType=[InnerJoin], where=[=(y, x)], select=[x, X0, y, x0], build=[right]): rowcount = 189980.2765168595, cumulative cost = {3.947644559012907E7 rows, 1.9555918966419175E9 cpu, 4.92208524E8 io, 2.5356306761199784E8 network, 1.1306783431565121E8 memory}
               :- Exchange(distribution=[hash[x]]): rowcount = 651215.0767790634, cumulative cost = {3.333787901361221E7 rows, 1.809190046427685E9 cpu, 3.93763212E8 io, 2.3878948121199784E8 network, 7.859219671565121E7 memory}
               :  +- Calc(select=[x, X0]): rowcount = 651215.0767790634, cumulative cost = {3.2686663936833147E7 rows, 1.6997859135288024E9 cpu, 3.93763212E8 io, 2.231603193693003E8 network, 7.859219671565121E7 memory}
               :     +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[x, y, X0, X1], build=[right]): rowcount = 651215.0767790634, cumulative cost = {3.2035448860054083E7 rows, 1.6997859135288024E9 cpu, 3.93763212E8 io, 2.231603193693003E8 network, 7.859219671565121E7 memory}
               :        :- Exchange(distribution=[hash[y]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
               :        :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
               :        +- Exchange(distribution=[hash[X1]]): rowcount = 239791.84519375666, cumulative cost = {2.318094978327502E7 rows, 9.759785867672524E8 cpu, 2.95323804E8 io, 1.2472091136930032E8 network, 6.5163853384800844E7 memory}
               :           +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 239791.84519375666, cumulative cost = {2.2941157938081264E7 rows, 9.356935567747014E8 cpu, 2.95323804E8 io, 1.1896590708465016E8 network, 6.5163853384800844E7 memory}
               :              +- Exchange(distribution=[hash[X0, X1]]): rowcount = 239791.84519375666, cumulative cost = {2.270136609288751E7 rows, 9.318568872516012E8 cpu, 2.95323804E8 io, 1.1896590708465016E8 network, 4.981717529240042E7 memory}
               :                 +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 239791.84519375666, cumulative cost = {2.2461574247693755E7 rows, 8.896535224975001E8 cpu, 2.95323804E8 io, 1.132109028E8 network, 4.981717529240042E7 memory}
               :                    +- Union(all=[true], union=[X0, X1]): rowcount = 1322849.0175, cumulative cost = {2.22217824025E7 rows, 8.684879382175001E8 cpu, 2.95323804E8 io, 1.132109028E8 network, 3.4470497199999996E7 memory}
               :                       :- Calc(select=[y AS X0, x AS X1]): rowcount = 615315.75, cumulative cost = {5333199.5 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
               :                       :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 615315.75, cumulative cost = {4717883.75 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
               :                       :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
               :                       :     +- Exchange(distribution=[broadcast]): rowcount = 463.0, cumulative cost = {926.0 rows, 74080.0 cpu, 5556.0 io, 5556.0 network, 0.0 memory}
               :                       :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 463.0, cumulative cost = {463.0 rows, 0.0 cpu, 5556.0 io, 0.0 network, 0.0 memory}
               :                       +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 707533.2675, cumulative cost = {1.5565733885E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
               :                          +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 707533.2675, cumulative cost = {1.48582006175E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
               :                             :- Exchange(distribution=[hash[y]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
               :                             :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
               :                             +- Exchange(distribution=[hash[x]]): rowcount = 615246.45, cumulative cost = {5947383.350000001 rows, 1.074632056E8 cpu, 9.8439432E7 io, 1.4765938799999999E7 network, 28.0 memory}
               :                                +- Calc(select=[x, y0]): rowcount = 615246.45, cumulative cost = {5332136.9 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
               :                                   +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 615246.45, cumulative cost = {4716890.45 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
               :                                      :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
               :                                      +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
               :                                         +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[hash[y]]): rowcount = 615320.1, cumulative cost = {5948586.299999999 rows, 1.362695688E8 cpu, 9.8445312E7 io, 1.4773586399999999E7 network, 17712.0 memory}
                  +- Calc(select=[y, x0]): rowcount = 615320.1, cumulative cost = {5333266.199999999 rows, 3.2895792E7 cpu, 9.8445312E7 io, 5904.0 network, 17712.0 memory}
                     +- HashJoin(joinType=[InnerJoin], where=[=(x0, x)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 615320.1, cumulative cost = {4717946.1 rows, 3.2895792E7 cpu, 9.8445312E7 io, 5904.0 network, 17712.0 memory}
                        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
                        +- Exchange(distribution=[broadcast]): rowcount = 492.0, cumulative cost = {984.0 rows, 78720.0 cpu, 5904.0 io, 5904.0 network, 0.0 memory}
                           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 492.0, cumulative cost = {492.0 rows, 0.0 cpu, 5904.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[0,1,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[x000 AS X0, X0 AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[X0, X1, y, x000], build=[left])\n:     :- [#1] Exchange(distribution=[hash[X1]])\n:     +- [#2] Exchange(distribution=[hash[y]])\n+- Calc(select=[x0 AS X0, X0 AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(y = x)], select=[x, X0, y, x0], build=[right])\n      :- [#3] Exchange(distribution=[hash[x]])\n      +- [#4] Exchange(distribution=[hash[y]])\n])
         :- Exchange(distribution=[hash[X1]])(reuse_id=[3])
         :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
         :     +- Exchange(distribution=[hash[X0, X1]])
         :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
         :           +- MultipleInput(readOrder=[1,0,2,1], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[y AS X0, x AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:     :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- Calc(select=[y0 AS X0, x AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])\n      :- [#3] Exchange(distribution=[hash[y]])\n      +- [#4] Exchange(distribution=[hash[x]])\n])
         :              :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :              :- Exchange(distribution=[broadcast])
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :              :- Exchange(distribution=[hash[y]])
         :              :  +- Reused(reference_id=[1])
         :              +- Exchange(distribution=[hash[x]])
         :                 +- Calc(select=[x, y0])
         :                    +- NestedLoopJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])
         :                       :- Reused(reference_id=[1])
         :                       +- Exchange(distribution=[broadcast])(reuse_id=[2])
         :                          +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
         :- Exchange(distribution=[hash[y]])
         :  +- Calc(select=[y, x00 AS x000])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x00], build=[right])
         :        :- Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Exchange(distribution=[hash[y]])
         :           +- Calc(select=[y, x0 AS x00])
         :              +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x0], build=[right])
         :                 :- Exchange(distribution=[hash[x]])
         :                 :  +- Reused(reference_id=[1])
         :                 +- Exchange(distribution=[hash[y]])
         :                    +- Calc(select=[y, x0])
         :                       +- NestedLoopJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, x0, y0], build=[right])
         :                          :- Reused(reference_id=[1])
         :                          +- Reused(reference_id=[2])
         :- Exchange(distribution=[hash[x]])
         :  +- Calc(select=[x, X0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[x, y, X0, X1], build=[right])
         :        :- Exchange(distribution=[hash[y]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Reused(reference_id=[3])
         +- Exchange(distribution=[hash[y]])
            +- Calc(select=[y, x0])
               +- HashJoin(joinType=[InnerJoin], where=[(x0 = x)], select=[x, y, x0], isBroadcast=[true], build=[right])
                  :- Reused(reference_id=[1])
                  +- Exchange(distribution=[broadcast])
                     +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])

Job has been submitted with JobID 476029a0f776b4ec6ed0dd2378bc10df
WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT s_2.y AS X0, r_0.x AS X1 FROM s AS s_2 INNER JOIN r AS r_1 on s_2.x = r_1.y INNER JOIN r AS r_0 on r_1.x = r_0.y )), p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1 FROM p12 AS p12_4 INNER JOIN r AS r_3 ON r_3.y = p12_4.X1 INNER JOIN r AS r_2 ON r_2.y = r_3.x INNER JOIN r AS r_1 ON r_1.y = r_2.x INNER JOIN s as s_0 ON s_0.y = r_1.x UNION (SELECT a_0.x AS X0, p12_3.X0 AS X1 FROM a AS a_0 INNER JOIN r AS r_1 ON a_0.x = r_1.x INNER JOIN r AS r_2 ON r_1.y = r_2.x INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...
waiting...
waiting...
waiting...
waiting...
waiting...
waiting...
waiting...
waiting...
waiting...
waiting...
waiting...
waiting...
waiting...

------------> using sink uuid: 141d4f08_a4a0_4ba6_9635_c4b74d404d5b

Adding statistics for table s number 9 
Adding statistics for table a number 9 
Adding statistics for table b number 9 
Adding statistics for table r number 9 
Adding statistics for table t number 9 
sql argument: WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1
             FROM r AS r_0
                      INNER JOIN b AS b_1 ON r_0.y = b_1.x
             UNION
             (SELECT s_2.y AS X0, r_0.x AS X1
              FROM s AS s_2
                       INNER JOIN r AS r_1 on s_2.x = r_1.y
                       INNER JOIN r AS r_0 on r_1.x = r_0.y
             )),
     p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1
            FROM p12 AS p12_4
                INNER JOIN r AS r_3 ON r_3.y = p12_4.X1
                INNER JOIN r AS r_2 ON r_2.y = r_3.x
                INNER JOIN r AS r_1 ON r_1.y = r_2.x
                INNER JOIN s as s_0 ON s_0.y = r_1.x
            UNION
            (SELECT a_0.x AS X0, p12_3.X0 AS X1
            FROM a AS a_0
                     INNER JOIN r AS r_1 ON a_0.x = r_1.x
                     INNER JOIN r AS r_2 ON r_1.y = r_2.x
                     INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalProject(X0=[$8], X1=[$0])
   :  +- LogicalJoin(condition=[=($9, $6)], joinType=[inner])
   :     :- LogicalJoin(condition=[=($7, $4)], joinType=[inner])
   :     :  :- LogicalJoin(condition=[=($5, $2)], joinType=[inner])
   :     :  :  :- LogicalJoin(condition=[=($3, $1)], joinType=[inner])
   :     :  :  :  :- LogicalUnion(all=[false])
   :     :  :  :  :  :- LogicalProject(X0=[$1], X1=[$0])
   :     :  :  :  :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :     :  :  :  :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :     :  :  :  :  +- LogicalProject(X0=[$1], X1=[$4])
   :     :  :  :  :     +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
   :     :  :  :  :        :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
   :     :  :  :  :        :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$5])
      +- LogicalJoin(condition=[=($4, $6)], joinType=[inner])
         :- LogicalJoin(condition=[=($2, $3)], joinType=[inner])
         :  :- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :  :  :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         +- LogicalUnion(all=[false])
            :- LogicalProject(X0=[$1], X1=[$0])
            :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
            :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
            :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
            +- LogicalProject(X0=[$1], X1=[$4])
               +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
                  :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
                  :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
                  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
                  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 60572.11526244861, cumulative cost = {9.02922779559936E7 rows, 4.75845055108896E9 cpu, 1.082850576E9 io, 6.25676293930597E8 network, 2.7348895396489584E8 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 60572.11526244861, cumulative cost = {9.023170584073114E7 rows, 4.7574813972447605E9 cpu, 1.082850576E9 io, 6.25676293930597E8 network, 2.696123385880991E8 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 60572.11526244861, cumulative cost = {9.01711337254687E7 rows, 4.74682070495857E9 cpu, 1.082850576E9 io, 6.242225631642982E8 network, 2.696123385880991E8 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 334155.49681467295, cumulative cost = {9.011056161020625E7 rows, 4.741474217009535E9 cpu, 1.082850576E9 io, 6.242225631642982E8 network, 2.6573572321130243E8 memory}
         :- Calc(select=[x000 AS X0, X0 AS X1]): rowcount = 144175.22029781347, cumulative cost = {5.0109980246745646E7 rows, 2.785548164870803E9 cpu, 5.90642052E8 io, 3.7065949555230033E8 network, 1.5266788889565122E8 memory}
         :  +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[X0, X1, y, x000], build=[left]): rowcount = 144175.22029781347, cumulative cost = {4.996580502644783E7 rows, 2.785548164870803E9 cpu, 5.90642052E8 io, 3.7065949555230033E8 network, 1.5266788889565122E8 memory}
         :     :- Exchange(distribution=[hash[X1]]): rowcount = 239791.84519375666, cumulative cost = {2.318094978327502E7 rows, 9.759785867672524E8 cpu, 2.95323804E8 io, 1.2472091136930032E8 network, 6.5163853384800844E7 memory}
         :     :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 239791.84519375666, cumulative cost = {2.2941157938081264E7 rows, 9.356935567747014E8 cpu, 2.95323804E8 io, 1.1896590708465016E8 network, 6.5163853384800844E7 memory}
         :     :     +- Exchange(distribution=[hash[X0, X1]]): rowcount = 239791.84519375666, cumulative cost = {2.270136609288751E7 rows, 9.318568872516012E8 cpu, 2.95323804E8 io, 1.1896590708465016E8 network, 4.981717529240042E7 memory}
         :     :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 239791.84519375666, cumulative cost = {2.2461574247693755E7 rows, 8.896535224975001E8 cpu, 2.95323804E8 io, 1.132109028E8 network, 4.981717529240042E7 memory}
         :     :           +- Union(all=[true], union=[X0, X1]): rowcount = 1322849.0175, cumulative cost = {2.22217824025E7 rows, 8.684879382175001E8 cpu, 2.95323804E8 io, 1.132109028E8 network, 3.4470497199999996E7 memory}
         :     :              :- Calc(select=[y AS X0, x AS X1]): rowcount = 615315.75, cumulative cost = {5333199.5 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :     :              :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 615315.75, cumulative cost = {4717883.75 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :     :              :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :     :              :     +- Exchange(distribution=[broadcast]): rowcount = 463.0, cumulative cost = {926.0 rows, 74080.0 cpu, 5556.0 io, 5556.0 network, 0.0 memory}
         :     :              :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 463.0, cumulative cost = {463.0 rows, 0.0 cpu, 5556.0 io, 0.0 network, 0.0 memory}
         :     :              +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 707533.2675, cumulative cost = {1.5565733885E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
         :     :                 +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 707533.2675, cumulative cost = {1.48582006175E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
         :     :                    :- Exchange(distribution=[hash[y]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
         :     :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :     :                    +- Exchange(distribution=[hash[x]]): rowcount = 615246.45, cumulative cost = {5947383.350000001 rows, 1.074632056E8 cpu, 9.8439432E7 io, 1.4765938799999999E7 network, 28.0 memory}
         :     :                       +- Calc(select=[x, y0]): rowcount = 615246.45, cumulative cost = {5332136.9 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
         :     :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 615246.45, cumulative cost = {4716890.45 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
         :     :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :     :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :     :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :     +- Exchange(distribution=[hash[y]]): rowcount = 721376.2901249999, cumulative cost = {2.6640680022875004E7 rows, 1.8018802330210001E9 cpu, 2.95318248E8 io, 2.45938584183E8 network, 7.407569217999999E7 memory}
         :        +- Calc(select=[y, x00 AS x000]): rowcount = 721376.2901249999, cumulative cost = {2.5919303732750002E7 rows, 1.6806890162800002E9 cpu, 2.95318248E8 io, 2.2862555322E8 network, 7.407569217999999E7 memory}
         :           +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x00], build=[right]): rowcount = 721376.2901249999, cumulative cost = {2.5197927442625E7 rows, 1.6806890162800002E9 cpu, 2.95318248E8 io, 2.2862555322E8 network, 7.407569217999999E7 memory}
         :              :- Exchange(distribution=[hash[x]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :              +- Exchange(distribution=[hash[y]]): rowcount = 707533.2675, cumulative cost = {1.62732671525E7 rows, 9.531397581400001E8 cpu, 1.9687884E8 io, 1.3018614522E8 network, 3.4453829199999996E7 memory}
         :                 +- Calc(select=[y, x0 AS x00]): rowcount = 707533.2675, cumulative cost = {1.5565733885E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
         :                    +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x0], build=[right]): rowcount = 707533.2675, cumulative cost = {1.48582006175E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
         :                       :- Exchange(distribution=[hash[x]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
         :                       :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :                       +- Exchange(distribution=[hash[y]]): rowcount = 615246.45, cumulative cost = {5947383.350000001 rows, 1.074632056E8 cpu, 9.8439432E7 io, 1.4765938799999999E7 network, 28.0 memory}
         :                          +- Calc(select=[y, x0]): rowcount = 615246.45, cumulative cost = {5332136.9 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
         :                             +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, x0, y0], build=[right]): rowcount = 615246.45, cumulative cost = {4716890.45 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
         :                                :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :                                +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                                   +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x0 AS X0, X0 AS X1]): rowcount = 189980.2765168595, cumulative cost = {3.966642586664593E7 rows, 1.9555918966419175E9 cpu, 4.92208524E8 io, 2.5356306761199784E8 network, 1.1306783431565121E8 memory}
            +- HashJoin(joinType=[InnerJoin], where=[=(y, x)], select=[x, X0, y, x0], build=[right]): rowcount = 189980.2765168595, cumulative cost = {3.947644559012907E7 rows, 1.9555918966419175E9 cpu, 4.92208524E8 io, 2.5356306761199784E8 network, 1.1306783431565121E8 memory}
               :- Exchange(distribution=[hash[x]]): rowcount = 651215.0767790634, cumulative cost = {3.333787901361221E7 rows, 1.809190046427685E9 cpu, 3.93763212E8 io, 2.3878948121199784E8 network, 7.859219671565121E7 memory}
               :  +- Calc(select=[x, X0]): rowcount = 651215.0767790634, cumulative cost = {3.2686663936833147E7 rows, 1.6997859135288024E9 cpu, 3.93763212E8 io, 2.231603193693003E8 network, 7.859219671565121E7 memory}
               :     +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[x, y, X0, X1], build=[right]): rowcount = 651215.0767790634, cumulative cost = {3.2035448860054083E7 rows, 1.6997859135288024E9 cpu, 3.93763212E8 io, 2.231603193693003E8 network, 7.859219671565121E7 memory}
               :        :- Exchange(distribution=[hash[y]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
               :        :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
               :        +- Exchange(distribution=[hash[X1]]): rowcount = 239791.84519375666, cumulative cost = {2.318094978327502E7 rows, 9.759785867672524E8 cpu, 2.95323804E8 io, 1.2472091136930032E8 network, 6.5163853384800844E7 memory}
               :           +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 239791.84519375666, cumulative cost = {2.2941157938081264E7 rows, 9.356935567747014E8 cpu, 2.95323804E8 io, 1.1896590708465016E8 network, 6.5163853384800844E7 memory}
               :              +- Exchange(distribution=[hash[X0, X1]]): rowcount = 239791.84519375666, cumulative cost = {2.270136609288751E7 rows, 9.318568872516012E8 cpu, 2.95323804E8 io, 1.1896590708465016E8 network, 4.981717529240042E7 memory}
               :                 +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 239791.84519375666, cumulative cost = {2.2461574247693755E7 rows, 8.896535224975001E8 cpu, 2.95323804E8 io, 1.132109028E8 network, 4.981717529240042E7 memory}
               :                    +- Union(all=[true], union=[X0, X1]): rowcount = 1322849.0175, cumulative cost = {2.22217824025E7 rows, 8.684879382175001E8 cpu, 2.95323804E8 io, 1.132109028E8 network, 3.4470497199999996E7 memory}
               :                       :- Calc(select=[y AS X0, x AS X1]): rowcount = 615315.75, cumulative cost = {5333199.5 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
               :                       :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 615315.75, cumulative cost = {4717883.75 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
               :                       :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
               :                       :     +- Exchange(distribution=[broadcast]): rowcount = 463.0, cumulative cost = {926.0 rows, 74080.0 cpu, 5556.0 io, 5556.0 network, 0.0 memory}
               :                       :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 463.0, cumulative cost = {463.0 rows, 0.0 cpu, 5556.0 io, 0.0 network, 0.0 memory}
               :                       +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 707533.2675, cumulative cost = {1.5565733885E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
               :                          +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 707533.2675, cumulative cost = {1.48582006175E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
               :                             :- Exchange(distribution=[hash[y]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
               :                             :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
               :                             +- Exchange(distribution=[hash[x]]): rowcount = 615246.45, cumulative cost = {5947383.350000001 rows, 1.074632056E8 cpu, 9.8439432E7 io, 1.4765938799999999E7 network, 28.0 memory}
               :                                +- Calc(select=[x, y0]): rowcount = 615246.45, cumulative cost = {5332136.9 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
               :                                   +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 615246.45, cumulative cost = {4716890.45 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
               :                                      :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
               :                                      +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
               :                                         +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[hash[y]]): rowcount = 615320.1, cumulative cost = {5948586.299999999 rows, 1.362695688E8 cpu, 9.8445312E7 io, 1.4773586399999999E7 network, 17712.0 memory}
                  +- Calc(select=[y, x0]): rowcount = 615320.1, cumulative cost = {5333266.199999999 rows, 3.2895792E7 cpu, 9.8445312E7 io, 5904.0 network, 17712.0 memory}
                     +- HashJoin(joinType=[InnerJoin], where=[=(x0, x)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 615320.1, cumulative cost = {4717946.1 rows, 3.2895792E7 cpu, 9.8445312E7 io, 5904.0 network, 17712.0 memory}
                        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
                        +- Exchange(distribution=[broadcast]): rowcount = 492.0, cumulative cost = {984.0 rows, 78720.0 cpu, 5904.0 io, 5904.0 network, 0.0 memory}
                           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 492.0, cumulative cost = {492.0 rows, 0.0 cpu, 5904.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[0,1,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[x000 AS X0, X0 AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[X0, X1, y, x000], build=[left])\n:     :- [#1] Exchange(distribution=[hash[X1]])\n:     +- [#2] Exchange(distribution=[hash[y]])\n+- Calc(select=[x0 AS X0, X0 AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(y = x)], select=[x, X0, y, x0], build=[right])\n      :- [#3] Exchange(distribution=[hash[x]])\n      +- [#4] Exchange(distribution=[hash[y]])\n])
         :- Exchange(distribution=[hash[X1]])(reuse_id=[3])
         :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
         :     +- Exchange(distribution=[hash[X0, X1]])
         :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
         :           +- MultipleInput(readOrder=[1,0,2,1], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[y AS X0, x AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:     :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- Calc(select=[y0 AS X0, x AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])\n      :- [#3] Exchange(distribution=[hash[y]])\n      +- [#4] Exchange(distribution=[hash[x]])\n])
         :              :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :              :- Exchange(distribution=[broadcast])
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :              :- Exchange(distribution=[hash[y]])
         :              :  +- Reused(reference_id=[1])
         :              +- Exchange(distribution=[hash[x]])
         :                 +- Calc(select=[x, y0])
         :                    +- NestedLoopJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])
         :                       :- Reused(reference_id=[1])
         :                       +- Exchange(distribution=[broadcast])(reuse_id=[2])
         :                          +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
         :- Exchange(distribution=[hash[y]])
         :  +- Calc(select=[y, x00 AS x000])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x00], build=[right])
         :        :- Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Exchange(distribution=[hash[y]])
         :           +- Calc(select=[y, x0 AS x00])
         :              +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x0], build=[right])
         :                 :- Exchange(distribution=[hash[x]])
         :                 :  +- Reused(reference_id=[1])
         :                 +- Exchange(distribution=[hash[y]])
         :                    +- Calc(select=[y, x0])
         :                       +- NestedLoopJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, x0, y0], build=[right])
         :                          :- Reused(reference_id=[1])
         :                          +- Reused(reference_id=[2])
         :- Exchange(distribution=[hash[x]])
         :  +- Calc(select=[x, X0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[x, y, X0, X1], build=[right])
         :        :- Exchange(distribution=[hash[y]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Reused(reference_id=[3])
         +- Exchange(distribution=[hash[y]])
            +- Calc(select=[y, x0])
               +- HashJoin(joinType=[InnerJoin], where=[(x0 = x)], select=[x, y, x0], isBroadcast=[true], build=[right])
                  :- Reused(reference_id=[1])
                  +- Exchange(distribution=[broadcast])
                     +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])

Job has been submitted with JobID 21112e9661c943fded755deefee37425
WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT s_2.y AS X0, r_0.x AS X1 FROM s AS s_2 INNER JOIN r AS r_1 on s_2.x = r_1.y INNER JOIN r AS r_0 on r_1.x = r_0.y )), p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1 FROM p12 AS p12_4 INNER JOIN r AS r_3 ON r_3.y = p12_4.X1 INNER JOIN r AS r_2 ON r_2.y = r_3.x INNER JOIN r AS r_1 ON r_1.y = r_2.x INNER JOIN s as s_0 ON s_0.y = r_1.x UNION (SELECT a_0.x AS X0, p12_3.X0 AS X1 FROM a AS a_0 INNER JOIN r AS r_1 ON a_0.x = r_1.x INNER JOIN r AS r_2 ON r_1.y = r_2.x INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...
waiting...
waiting...
waiting...
waiting...
waiting...
waiting...
waiting...
waiting...
waiting...
waiting...
waiting...
waiting...

------------> using sink uuid: 1861bc23_7a6a_4825_b7b4_310d0d25df26

Adding statistics for table s number 3 
Adding statistics for table a number 3 
Adding statistics for table b number 3 
Adding statistics for table r number 3 
Adding statistics for table t number 3 
sql argument: WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1
             FROM r AS r_0
                      INNER JOIN b AS b_1 ON r_0.y = b_1.x
             UNION
             (SELECT s_2.y AS X0, r_0.x AS X1
              FROM s AS s_2
                       INNER JOIN r AS r_1 on s_2.x = r_1.y
                       INNER JOIN r AS r_0 on r_1.x = r_0.y
             )),
     p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1
            FROM p12 AS p12_4
                INNER JOIN r AS r_3 ON r_3.y = p12_4.X1
                INNER JOIN r AS r_2 ON r_2.y = r_3.x
                INNER JOIN r AS r_1 ON r_1.y = r_2.x
                INNER JOIN s as s_0 ON s_0.y = r_1.x
            UNION
            (SELECT a_0.x AS X0, p12_3.X0 AS X1
            FROM a AS a_0
                     INNER JOIN r AS r_1 ON a_0.x = r_1.x
                     INNER JOIN r AS r_2 ON r_1.y = r_2.x
                     INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalProject(X0=[$8], X1=[$0])
   :  +- LogicalJoin(condition=[=($9, $6)], joinType=[inner])
   :     :- LogicalJoin(condition=[=($7, $4)], joinType=[inner])
   :     :  :- LogicalJoin(condition=[=($5, $2)], joinType=[inner])
   :     :  :  :- LogicalJoin(condition=[=($3, $1)], joinType=[inner])
   :     :  :  :  :- LogicalUnion(all=[false])
   :     :  :  :  :  :- LogicalProject(X0=[$1], X1=[$0])
   :     :  :  :  :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :     :  :  :  :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :     :  :  :  :  +- LogicalProject(X0=[$1], X1=[$4])
   :     :  :  :  :     +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
   :     :  :  :  :        :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
   :     :  :  :  :        :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$5])
      +- LogicalJoin(condition=[=($4, $6)], joinType=[inner])
         :- LogicalJoin(condition=[=($2, $3)], joinType=[inner])
         :  :- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :  :  :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         +- LogicalUnion(all=[false])
            :- LogicalProject(X0=[$1], X1=[$0])
            :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
            :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
            :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
            +- LogicalProject(X0=[$1], X1=[$4])
               +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
                  :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
                  :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
                  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
                  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 3790.9948130732264, cumulative cost = {5349212.605712252 rows, 2.4686694229042447E8 cpu, 6.777042E7 io, 3.1914274594442565E7 network, 1.7118917494364534E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 3790.9948130732264, cumulative cost = {5345421.610899178 rows, 2.468062863734153E8 cpu, 6.777042E7 io, 3.1914274594442565E7 network, 1.6876293826327845E7 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 3790.9948130732264, cumulative cost = {5341630.616086105 rows, 2.461390712863144E8 cpu, 6.777042E7 io, 3.1823290718928806E7 network, 1.6876293826327845E7 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 20913.612636698977, cumulative cost = {5337839.621273031 rows, 2.4580445348412722E8 cpu, 6.777042E7 io, 3.1823290718928806E7 network, 1.6633670158291157E7 memory}
         :- Calc(select=[x000 AS X0, X0 AS X1]): rowcount = 9023.201118868677, cumulative cost = {3091009.5187409017 rows, 1.6663085590528482E8 cpu, 3.6965268E7 io, 2.211428563803798E7 network, 9555444.679145578 memory}
         :  +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[X0, X1, y, x000], isBroadcast=[true], build=[left]): rowcount = 9023.201118868677, cumulative cost = {3081986.317622033 rows, 1.6663085590528482E8 cpu, 3.6965268E7 io, 2.211428563803798E7 network, 9555444.679145578 memory}
         :     :- Exchange(distribution=[broadcast]): rowcount = 15007.73412579119, cumulative cost = {1450815.4365031645 rows, 6.09644459122785E7 cpu, 1.8482916E7 io, 7805855.238037977 network, 4078989.9681012724 memory}
         :     :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 15007.73412579119, cumulative cost = {1435807.7023773734 rows, 5.856320845215191E7 cpu, 1.8482916E7 io, 7445669.619018989 network, 4078989.9681012724 memory}
         :     :     +- Exchange(distribution=[hash[X0, X1]]): rowcount = 15007.73412579119, cumulative cost = {1420799.9682515822 rows, 5.832308470613925E7 cpu, 1.8482916E7 io, 7445669.619018989 network, 3118494.984050636 memory}
         :     :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 15007.73412579119, cumulative cost = {1405792.2341257911 rows, 5.56817235E7 cpu, 1.8482916E7 io, 7085484.0 network, 3118494.984050636 memory}
         :     :           +- Union(all=[true], union=[X0, X1]): rowcount = 82792.5, cumulative cost = {1390784.5 rows, 5.43570435E7 cpu, 1.8482916E7 io, 7085484.0 network, 2158000.0 memory}
         :     :              :- Calc(select=[y AS X0, x AS X1]): rowcount = 38511.9, cumulative cost = {333816.80000000005 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :     :              :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 38511.9, cumulative cost = {295304.9 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :     :              :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :     :              :     +- Exchange(distribution=[broadcast]): rowcount = 47.0, cumulative cost = {94.0 rows, 7520.0 cpu, 564.0 io, 564.0 network, 0.0 memory}
         :     :              :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 47.0, cumulative cost = {47.0 rows, 0.0 cpu, 564.0 io, 0.0 network, 0.0 memory}
         :     :              +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 44280.6, cumulative cost = {974175.2 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
         :     :                 +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 44280.6, cumulative cost = {929894.6 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
         :     :                    :- Exchange(distribution=[hash[y]]): rowcount = 256699.0, cumulative cost = {513398.0 rows, 4.3125432E7 cpu, 6160776.0 io, 6160776.0 network, 0.0 memory}
         :     :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :     :                    +- Exchange(distribution=[hash[x]]): rowcount = 38505.0, cumulative cost = {372216.0 rows, 6725699.0 cpu, 6160800.0 io, 924144.0 network, 28.0 memory}
         :     :                       +- Calc(select=[x, y0]): rowcount = 38505.0, cumulative cost = {333711.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
         :     :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 38505.0, cumulative cost = {295206.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
         :     :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :     :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :     :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :     +- Calc(select=[y, x00 AS x000]): rowcount = 45146.939999999995, cumulative cost = {1622147.6799999997 rows, 1.051851726E8 cpu, 1.8482352E7 io, 1.43084304E7 network, 4636021.6 memory}
         :        +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x00], build=[right]): rowcount = 45146.939999999995, cumulative cost = {1577000.7399999998 rows, 1.051851726E8 cpu, 1.8482352E7 io, 1.43084304E7 network, 4636021.6 memory}
         :           :- Exchange(distribution=[hash[x]]): rowcount = 256699.0, cumulative cost = {513398.0 rows, 4.3125432E7 cpu, 6160776.0 io, 6160776.0 network, 0.0 memory}
         :           :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :           +- Exchange(distribution=[hash[y]]): rowcount = 44280.6, cumulative cost = {1018455.7999999999 rows, 5.96519038E7 cpu, 1.2321576E7 io, 8147654.4 network, 2156308.0 memory}
         :              +- Calc(select=[y, x0 AS x00]): rowcount = 44280.6, cumulative cost = {974175.2 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
         :                 +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x0], build=[right]): rowcount = 44280.6, cumulative cost = {929894.6 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
         :                    :- Exchange(distribution=[hash[x]]): rowcount = 256699.0, cumulative cost = {513398.0 rows, 4.3125432E7 cpu, 6160776.0 io, 6160776.0 network, 0.0 memory}
         :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :                    +- Exchange(distribution=[hash[y]]): rowcount = 38505.0, cumulative cost = {372216.0 rows, 6725699.0 cpu, 6160800.0 io, 924144.0 network, 28.0 memory}
         :                       +- Calc(select=[y, x0]): rowcount = 38505.0, cumulative cost = {333711.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
         :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, x0, y0], build=[right]): rowcount = 38505.0, cumulative cost = {295206.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
         :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x0 AS X0, X0 AS X1]): rowcount = 11890.411517830302, cumulative cost = {2225916.489895431 rows, 7.915268396620572E7 cpu, 3.0805152E7 io, 9709005.080890825 network, 7078225.479145579 memory}
            +- HashJoin(joinType=[InnerJoin], where=[=(y, x)], select=[x, X0, y, x0], build=[right]): rowcount = 11890.411517830302, cumulative cost = {2214026.0783776008 rows, 7.915268396620572E7 cpu, 3.0805152E7 io, 9709005.080890825 network, 7078225.479145579 memory}
               :- Exchange(distribution=[hash[x]]): rowcount = 40756.010118868675, cumulative cost = {1829782.4668597705 rows, 6.998510948525476E7 cpu, 2.4643692E7 io, 8783999.480890825 network, 4919423.079145579 memory}
               :  +- Calc(select=[x, X0]): rowcount = 40756.010118868675, cumulative cost = {1789026.4567409018 rows, 6.313809978528483E7 cpu, 2.4643692E7 io, 7805855.238037977 network, 4919423.079145579 memory}
               :     +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[x, y, X0, X1], isBroadcast=[true], build=[right]): rowcount = 40756.010118868675, cumulative cost = {1748270.4466220331 rows, 6.313809978528483E7 cpu, 2.4643692E7 io, 7805855.238037977 network, 4919423.079145579 memory}
               :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
               :        +- Exchange(distribution=[broadcast]): rowcount = 15007.73412579119, cumulative cost = {1450815.4365031645 rows, 6.09644459122785E7 cpu, 1.8482916E7 io, 7805855.238037977 network, 4078989.9681012724 memory}
               :           +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 15007.73412579119, cumulative cost = {1435807.7023773734 rows, 5.856320845215191E7 cpu, 1.8482916E7 io, 7445669.619018989 network, 4078989.9681012724 memory}
               :              +- Exchange(distribution=[hash[X0, X1]]): rowcount = 15007.73412579119, cumulative cost = {1420799.9682515822 rows, 5.832308470613925E7 cpu, 1.8482916E7 io, 7445669.619018989 network, 3118494.984050636 memory}
               :                 +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 15007.73412579119, cumulative cost = {1405792.2341257911 rows, 5.56817235E7 cpu, 1.8482916E7 io, 7085484.0 network, 3118494.984050636 memory}
               :                    +- Union(all=[true], union=[X0, X1]): rowcount = 82792.5, cumulative cost = {1390784.5 rows, 5.43570435E7 cpu, 1.8482916E7 io, 7085484.0 network, 2158000.0 memory}
               :                       :- Calc(select=[y AS X0, x AS X1]): rowcount = 38511.9, cumulative cost = {333816.80000000005 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
               :                       :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 38511.9, cumulative cost = {295304.9 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
               :                       :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
               :                       :     +- Exchange(distribution=[broadcast]): rowcount = 47.0, cumulative cost = {94.0 rows, 7520.0 cpu, 564.0 io, 564.0 network, 0.0 memory}
               :                       :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 47.0, cumulative cost = {47.0 rows, 0.0 cpu, 564.0 io, 0.0 network, 0.0 memory}
               :                       +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 44280.6, cumulative cost = {974175.2 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
               :                          +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 44280.6, cumulative cost = {929894.6 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
               :                             :- Exchange(distribution=[hash[y]]): rowcount = 256699.0, cumulative cost = {513398.0 rows, 4.3125432E7 cpu, 6160776.0 io, 6160776.0 network, 0.0 memory}
               :                             :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
               :                             +- Exchange(distribution=[hash[x]]): rowcount = 38505.0, cumulative cost = {372216.0 rows, 6725699.0 cpu, 6160800.0 io, 924144.0 network, 28.0 memory}
               :                                +- Calc(select=[x, y0]): rowcount = 38505.0, cumulative cost = {333711.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
               :                                   +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 38505.0, cumulative cost = {295206.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
               :                                      :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
               :                                      +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
               :                                         +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[hash[y]]): rowcount = 38513.4, cumulative cost = {372353.20000000007 rows, 8533419.2 cpu, 6161460.0 io, 925005.6000000001 network, 2052.0 memory}
                  +- Calc(select=[y, x0]): rowcount = 38513.4, cumulative cost = {333839.80000000005 rows, 2063168.0 cpu, 6161460.0 io, 684.0 network, 2052.0 memory}
                     +- HashJoin(joinType=[InnerJoin], where=[=(x0, x)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 38513.4, cumulative cost = {295326.4 rows, 2063168.0 cpu, 6161460.0 io, 684.0 network, 2052.0 memory}
                        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
                        +- Exchange(distribution=[broadcast]): rowcount = 57.0, cumulative cost = {114.0 rows, 9120.0 cpu, 684.0 io, 684.0 network, 0.0 memory}
                           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 57.0, cumulative cost = {57.0 rows, 0.0 cpu, 684.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[x000 AS X0, X0 AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[X0, X1, y, x000], isBroadcast=[true], build=[left])\n:     :- [#1] Exchange(distribution=[broadcast])\n:     +- Calc(select=[y, x00 AS x000])\n:        +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x00], build=[right])\n:           :- [#4] Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])\n:           +- [#5] Exchange(distribution=[hash[y]])\n+- Calc(select=[x0 AS X0, X0 AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(y = x)], select=[x, X0, y, x0], build=[right])\n      :- [#2] Exchange(distribution=[hash[x]])\n      +- [#3] Exchange(distribution=[hash[y]])\n])
         :- Exchange(distribution=[broadcast])(reuse_id=[2])
         :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
         :     +- Exchange(distribution=[hash[X0, X1]])
         :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
         :           +- MultipleInput(readOrder=[1,0,2,1], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[y AS X0, x AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:     :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- Calc(select=[y0 AS X0, x AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])\n      :- [#3] Exchange(distribution=[hash[y]])\n      +- [#4] Exchange(distribution=[hash[x]])\n])
         :              :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :              :- Exchange(distribution=[broadcast])
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :              :- Exchange(distribution=[hash[y]])
         :              :  +- Reused(reference_id=[1])
         :              +- Exchange(distribution=[hash[x]])
         :                 +- Calc(select=[x, y0])
         :                    +- NestedLoopJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])
         :                       :- Reused(reference_id=[1])
         :                       +- Exchange(distribution=[broadcast])(reuse_id=[3])
         :                          +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
         :- Exchange(distribution=[hash[x]])
         :  +- Calc(select=[x, X0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[x, y, X0, X1], isBroadcast=[true], build=[right])
         :        :- Exchange(distribution=[any], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Reused(reference_id=[2])
         :- Exchange(distribution=[hash[y]])
         :  +- Calc(select=[y, x0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(x0 = x)], select=[x, y, x0], isBroadcast=[true], build=[right])
         :        :- Reused(reference_id=[1])
         :        +- Exchange(distribution=[broadcast])
         :           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])
         :  +- Reused(reference_id=[1])
         +- Exchange(distribution=[hash[y]])
            +- Calc(select=[y, x0 AS x00])
               +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x0], build=[right])
                  :- Exchange(distribution=[hash[x]])
                  :  +- Reused(reference_id=[1])
                  +- Exchange(distribution=[hash[y]])
                     +- Calc(select=[y, x0])
                        +- NestedLoopJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, x0, y0], build=[right])
                           :- Reused(reference_id=[1])
                           +- Reused(reference_id=[3])

Job has been submitted with JobID 1a5e4ed52870e868cabbb03d51204a71
WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT s_2.y AS X0, r_0.x AS X1 FROM s AS s_2 INNER JOIN r AS r_1 on s_2.x = r_1.y INNER JOIN r AS r_0 on r_1.x = r_0.y )), p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1 FROM p12 AS p12_4 INNER JOIN r AS r_3 ON r_3.y = p12_4.X1 INNER JOIN r AS r_2 ON r_2.y = r_3.x INNER JOIN r AS r_1 ON r_1.y = r_2.x INNER JOIN s as s_0 ON s_0.y = r_1.x UNION (SELECT a_0.x AS X0, p12_3.X0 AS X1 FROM a AS a_0 INNER JOIN r AS r_1 ON a_0.x = r_1.x INNER JOIN r AS r_2 ON r_1.y = r_2.x INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1

------------> using sink uuid: 0968faef_eddb_4bf5_941a_507aa59dd64c

Adding statistics for table s number 3 
Adding statistics for table a number 3 
Adding statistics for table b number 3 
Adding statistics for table r number 3 
Adding statistics for table t number 3 
sql argument: WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1
             FROM r AS r_0
                      INNER JOIN b AS b_1 ON r_0.y = b_1.x
             UNION
             (SELECT s_2.y AS X0, r_0.x AS X1
              FROM s AS s_2
                       INNER JOIN r AS r_1 on s_2.x = r_1.y
                       INNER JOIN r AS r_0 on r_1.x = r_0.y
             )),
     p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1
            FROM p12 AS p12_4
                INNER JOIN r AS r_3 ON r_3.y = p12_4.X1
                INNER JOIN r AS r_2 ON r_2.y = r_3.x
                INNER JOIN r AS r_1 ON r_1.y = r_2.x
                INNER JOIN s as s_0 ON s_0.y = r_1.x
            UNION
            (SELECT a_0.x AS X0, p12_3.X0 AS X1
            FROM a AS a_0
                     INNER JOIN r AS r_1 ON a_0.x = r_1.x
                     INNER JOIN r AS r_2 ON r_1.y = r_2.x
                     INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalProject(X0=[$8], X1=[$0])
   :  +- LogicalJoin(condition=[=($9, $6)], joinType=[inner])
   :     :- LogicalJoin(condition=[=($7, $4)], joinType=[inner])
   :     :  :- LogicalJoin(condition=[=($5, $2)], joinType=[inner])
   :     :  :  :- LogicalJoin(condition=[=($3, $1)], joinType=[inner])
   :     :  :  :  :- LogicalUnion(all=[false])
   :     :  :  :  :  :- LogicalProject(X0=[$1], X1=[$0])
   :     :  :  :  :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :     :  :  :  :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :     :  :  :  :  +- LogicalProject(X0=[$1], X1=[$4])
   :     :  :  :  :     +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
   :     :  :  :  :        :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
   :     :  :  :  :        :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$5])
      +- LogicalJoin(condition=[=($4, $6)], joinType=[inner])
         :- LogicalJoin(condition=[=($2, $3)], joinType=[inner])
         :  :- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :  :  :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         +- LogicalUnion(all=[false])
            :- LogicalProject(X0=[$1], X1=[$0])
            :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
            :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
            :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
            +- LogicalProject(X0=[$1], X1=[$4])
               +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
                  :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
                  :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
                  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
                  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 3790.9948130732264, cumulative cost = {5349212.605712252 rows, 2.4686694229042447E8 cpu, 6.777042E7 io, 3.1914274594442565E7 network, 1.7118917494364534E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 3790.9948130732264, cumulative cost = {5345421.610899178 rows, 2.468062863734153E8 cpu, 6.777042E7 io, 3.1914274594442565E7 network, 1.6876293826327845E7 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 3790.9948130732264, cumulative cost = {5341630.616086105 rows, 2.461390712863144E8 cpu, 6.777042E7 io, 3.1823290718928806E7 network, 1.6876293826327845E7 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 20913.612636698977, cumulative cost = {5337839.621273031 rows, 2.4580445348412722E8 cpu, 6.777042E7 io, 3.1823290718928806E7 network, 1.6633670158291157E7 memory}
         :- Calc(select=[x000 AS X0, X0 AS X1]): rowcount = 9023.201118868677, cumulative cost = {3091009.5187409017 rows, 1.6663085590528482E8 cpu, 3.6965268E7 io, 2.211428563803798E7 network, 9555444.679145578 memory}
         :  +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[X0, X1, y, x000], isBroadcast=[true], build=[left]): rowcount = 9023.201118868677, cumulative cost = {3081986.317622033 rows, 1.6663085590528482E8 cpu, 3.6965268E7 io, 2.211428563803798E7 network, 9555444.679145578 memory}
         :     :- Exchange(distribution=[broadcast]): rowcount = 15007.73412579119, cumulative cost = {1450815.4365031645 rows, 6.09644459122785E7 cpu, 1.8482916E7 io, 7805855.238037977 network, 4078989.9681012724 memory}
         :     :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 15007.73412579119, cumulative cost = {1435807.7023773734 rows, 5.856320845215191E7 cpu, 1.8482916E7 io, 7445669.619018989 network, 4078989.9681012724 memory}
         :     :     +- Exchange(distribution=[hash[X0, X1]]): rowcount = 15007.73412579119, cumulative cost = {1420799.9682515822 rows, 5.832308470613925E7 cpu, 1.8482916E7 io, 7445669.619018989 network, 3118494.984050636 memory}
         :     :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 15007.73412579119, cumulative cost = {1405792.2341257911 rows, 5.56817235E7 cpu, 1.8482916E7 io, 7085484.0 network, 3118494.984050636 memory}
         :     :           +- Union(all=[true], union=[X0, X1]): rowcount = 82792.5, cumulative cost = {1390784.5 rows, 5.43570435E7 cpu, 1.8482916E7 io, 7085484.0 network, 2158000.0 memory}
         :     :              :- Calc(select=[y AS X0, x AS X1]): rowcount = 38511.9, cumulative cost = {333816.80000000005 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :     :              :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 38511.9, cumulative cost = {295304.9 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :     :              :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :     :              :     +- Exchange(distribution=[broadcast]): rowcount = 47.0, cumulative cost = {94.0 rows, 7520.0 cpu, 564.0 io, 564.0 network, 0.0 memory}
         :     :              :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 47.0, cumulative cost = {47.0 rows, 0.0 cpu, 564.0 io, 0.0 network, 0.0 memory}
         :     :              +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 44280.6, cumulative cost = {974175.2 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
         :     :                 +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 44280.6, cumulative cost = {929894.6 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
         :     :                    :- Exchange(distribution=[hash[y]]): rowcount = 256699.0, cumulative cost = {513398.0 rows, 4.3125432E7 cpu, 6160776.0 io, 6160776.0 network, 0.0 memory}
         :     :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :     :                    +- Exchange(distribution=[hash[x]]): rowcount = 38505.0, cumulative cost = {372216.0 rows, 6725699.0 cpu, 6160800.0 io, 924144.0 network, 28.0 memory}
         :     :                       +- Calc(select=[x, y0]): rowcount = 38505.0, cumulative cost = {333711.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
         :     :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 38505.0, cumulative cost = {295206.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
         :     :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :     :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :     :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :     +- Calc(select=[y, x00 AS x000]): rowcount = 45146.939999999995, cumulative cost = {1622147.6799999997 rows, 1.051851726E8 cpu, 1.8482352E7 io, 1.43084304E7 network, 4636021.6 memory}
         :        +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x00], build=[right]): rowcount = 45146.939999999995, cumulative cost = {1577000.7399999998 rows, 1.051851726E8 cpu, 1.8482352E7 io, 1.43084304E7 network, 4636021.6 memory}
         :           :- Exchange(distribution=[hash[x]]): rowcount = 256699.0, cumulative cost = {513398.0 rows, 4.3125432E7 cpu, 6160776.0 io, 6160776.0 network, 0.0 memory}
         :           :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :           +- Exchange(distribution=[hash[y]]): rowcount = 44280.6, cumulative cost = {1018455.7999999999 rows, 5.96519038E7 cpu, 1.2321576E7 io, 8147654.4 network, 2156308.0 memory}
         :              +- Calc(select=[y, x0 AS x00]): rowcount = 44280.6, cumulative cost = {974175.2 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
         :                 +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x0], build=[right]): rowcount = 44280.6, cumulative cost = {929894.6 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
         :                    :- Exchange(distribution=[hash[x]]): rowcount = 256699.0, cumulative cost = {513398.0 rows, 4.3125432E7 cpu, 6160776.0 io, 6160776.0 network, 0.0 memory}
         :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :                    +- Exchange(distribution=[hash[y]]): rowcount = 38505.0, cumulative cost = {372216.0 rows, 6725699.0 cpu, 6160800.0 io, 924144.0 network, 28.0 memory}
         :                       +- Calc(select=[y, x0]): rowcount = 38505.0, cumulative cost = {333711.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
         :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, x0, y0], build=[right]): rowcount = 38505.0, cumulative cost = {295206.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
         :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x0 AS X0, X0 AS X1]): rowcount = 11890.411517830302, cumulative cost = {2225916.489895431 rows, 7.915268396620572E7 cpu, 3.0805152E7 io, 9709005.080890825 network, 7078225.479145579 memory}
            +- HashJoin(joinType=[InnerJoin], where=[=(y, x)], select=[x, X0, y, x0], build=[right]): rowcount = 11890.411517830302, cumulative cost = {2214026.0783776008 rows, 7.915268396620572E7 cpu, 3.0805152E7 io, 9709005.080890825 network, 7078225.479145579 memory}
               :- Exchange(distribution=[hash[x]]): rowcount = 40756.010118868675, cumulative cost = {1829782.4668597705 rows, 6.998510948525476E7 cpu, 2.4643692E7 io, 8783999.480890825 network, 4919423.079145579 memory}
               :  +- Calc(select=[x, X0]): rowcount = 40756.010118868675, cumulative cost = {1789026.4567409018 rows, 6.313809978528483E7 cpu, 2.4643692E7 io, 7805855.238037977 network, 4919423.079145579 memory}
               :     +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[x, y, X0, X1], isBroadcast=[true], build=[right]): rowcount = 40756.010118868675, cumulative cost = {1748270.4466220331 rows, 6.313809978528483E7 cpu, 2.4643692E7 io, 7805855.238037977 network, 4919423.079145579 memory}
               :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
               :        +- Exchange(distribution=[broadcast]): rowcount = 15007.73412579119, cumulative cost = {1450815.4365031645 rows, 6.09644459122785E7 cpu, 1.8482916E7 io, 7805855.238037977 network, 4078989.9681012724 memory}
               :           +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 15007.73412579119, cumulative cost = {1435807.7023773734 rows, 5.856320845215191E7 cpu, 1.8482916E7 io, 7445669.619018989 network, 4078989.9681012724 memory}
               :              +- Exchange(distribution=[hash[X0, X1]]): rowcount = 15007.73412579119, cumulative cost = {1420799.9682515822 rows, 5.832308470613925E7 cpu, 1.8482916E7 io, 7445669.619018989 network, 3118494.984050636 memory}
               :                 +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 15007.73412579119, cumulative cost = {1405792.2341257911 rows, 5.56817235E7 cpu, 1.8482916E7 io, 7085484.0 network, 3118494.984050636 memory}
               :                    +- Union(all=[true], union=[X0, X1]): rowcount = 82792.5, cumulative cost = {1390784.5 rows, 5.43570435E7 cpu, 1.8482916E7 io, 7085484.0 network, 2158000.0 memory}
               :                       :- Calc(select=[y AS X0, x AS X1]): rowcount = 38511.9, cumulative cost = {333816.80000000005 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
               :                       :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 38511.9, cumulative cost = {295304.9 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
               :                       :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
               :                       :     +- Exchange(distribution=[broadcast]): rowcount = 47.0, cumulative cost = {94.0 rows, 7520.0 cpu, 564.0 io, 564.0 network, 0.0 memory}
               :                       :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 47.0, cumulative cost = {47.0 rows, 0.0 cpu, 564.0 io, 0.0 network, 0.0 memory}
               :                       +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 44280.6, cumulative cost = {974175.2 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
               :                          +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 44280.6, cumulative cost = {929894.6 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
               :                             :- Exchange(distribution=[hash[y]]): rowcount = 256699.0, cumulative cost = {513398.0 rows, 4.3125432E7 cpu, 6160776.0 io, 6160776.0 network, 0.0 memory}
               :                             :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
               :                             +- Exchange(distribution=[hash[x]]): rowcount = 38505.0, cumulative cost = {372216.0 rows, 6725699.0 cpu, 6160800.0 io, 924144.0 network, 28.0 memory}
               :                                +- Calc(select=[x, y0]): rowcount = 38505.0, cumulative cost = {333711.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
               :                                   +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 38505.0, cumulative cost = {295206.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
               :                                      :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
               :                                      +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
               :                                         +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[hash[y]]): rowcount = 38513.4, cumulative cost = {372353.20000000007 rows, 8533419.2 cpu, 6161460.0 io, 925005.6000000001 network, 2052.0 memory}
                  +- Calc(select=[y, x0]): rowcount = 38513.4, cumulative cost = {333839.80000000005 rows, 2063168.0 cpu, 6161460.0 io, 684.0 network, 2052.0 memory}
                     +- HashJoin(joinType=[InnerJoin], where=[=(x0, x)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 38513.4, cumulative cost = {295326.4 rows, 2063168.0 cpu, 6161460.0 io, 684.0 network, 2052.0 memory}
                        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
                        +- Exchange(distribution=[broadcast]): rowcount = 57.0, cumulative cost = {114.0 rows, 9120.0 cpu, 684.0 io, 684.0 network, 0.0 memory}
                           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 57.0, cumulative cost = {57.0 rows, 0.0 cpu, 684.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[x000 AS X0, X0 AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[X0, X1, y, x000], isBroadcast=[true], build=[left])\n:     :- [#1] Exchange(distribution=[broadcast])\n:     +- Calc(select=[y, x00 AS x000])\n:        +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x00], build=[right])\n:           :- [#4] Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])\n:           +- [#5] Exchange(distribution=[hash[y]])\n+- Calc(select=[x0 AS X0, X0 AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(y = x)], select=[x, X0, y, x0], build=[right])\n      :- [#2] Exchange(distribution=[hash[x]])\n      +- [#3] Exchange(distribution=[hash[y]])\n])
         :- Exchange(distribution=[broadcast])(reuse_id=[2])
         :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
         :     +- Exchange(distribution=[hash[X0, X1]])
         :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
         :           +- MultipleInput(readOrder=[1,0,2,1], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[y AS X0, x AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:     :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- Calc(select=[y0 AS X0, x AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])\n      :- [#3] Exchange(distribution=[hash[y]])\n      +- [#4] Exchange(distribution=[hash[x]])\n])
         :              :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :              :- Exchange(distribution=[broadcast])
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :              :- Exchange(distribution=[hash[y]])
         :              :  +- Reused(reference_id=[1])
         :              +- Exchange(distribution=[hash[x]])
         :                 +- Calc(select=[x, y0])
         :                    +- NestedLoopJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])
         :                       :- Reused(reference_id=[1])
         :                       +- Exchange(distribution=[broadcast])(reuse_id=[3])
         :                          +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
         :- Exchange(distribution=[hash[x]])
         :  +- Calc(select=[x, X0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[x, y, X0, X1], isBroadcast=[true], build=[right])
         :        :- Exchange(distribution=[any], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Reused(reference_id=[2])
         :- Exchange(distribution=[hash[y]])
         :  +- Calc(select=[y, x0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(x0 = x)], select=[x, y, x0], isBroadcast=[true], build=[right])
         :        :- Reused(reference_id=[1])
         :        +- Exchange(distribution=[broadcast])
         :           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])
         :  +- Reused(reference_id=[1])
         +- Exchange(distribution=[hash[y]])
            +- Calc(select=[y, x0 AS x00])
               +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x0], build=[right])
                  :- Exchange(distribution=[hash[x]])
                  :  +- Reused(reference_id=[1])
                  +- Exchange(distribution=[hash[y]])
                     +- Calc(select=[y, x0])
                        +- NestedLoopJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, x0, y0], build=[right])
                           :- Reused(reference_id=[1])
                           +- Reused(reference_id=[3])

Job has been submitted with JobID 5e66e60e9f350b6bd10561acb3df2e9c
WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT s_2.y AS X0, r_0.x AS X1 FROM s AS s_2 INNER JOIN r AS r_1 on s_2.x = r_1.y INNER JOIN r AS r_0 on r_1.x = r_0.y )), p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1 FROM p12 AS p12_4 INNER JOIN r AS r_3 ON r_3.y = p12_4.X1 INNER JOIN r AS r_2 ON r_2.y = r_3.x INNER JOIN r AS r_1 ON r_1.y = r_2.x INNER JOIN s as s_0 ON s_0.y = r_1.x UNION (SELECT a_0.x AS X0, p12_3.X0 AS X1 FROM a AS a_0 INNER JOIN r AS r_1 ON a_0.x = r_1.x INNER JOIN r AS r_2 ON r_1.y = r_2.x INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1

------------> using sink uuid: d6b5319b_d648_4e26_9fda_5a833202d7aa

Adding statistics for table s number 3 
Adding statistics for table a number 3 
Adding statistics for table b number 3 
Adding statistics for table r number 3 
Adding statistics for table t number 3 
sql argument: WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1
             FROM r AS r_0
                      INNER JOIN b AS b_1 ON r_0.y = b_1.x
             UNION
             (SELECT s_2.y AS X0, r_0.x AS X1
              FROM s AS s_2
                       INNER JOIN r AS r_1 on s_2.x = r_1.y
                       INNER JOIN r AS r_0 on r_1.x = r_0.y
             )),
     p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1
            FROM p12 AS p12_4
                INNER JOIN r AS r_3 ON r_3.y = p12_4.X1
                INNER JOIN r AS r_2 ON r_2.y = r_3.x
                INNER JOIN r AS r_1 ON r_1.y = r_2.x
                INNER JOIN s as s_0 ON s_0.y = r_1.x
            UNION
            (SELECT a_0.x AS X0, p12_3.X0 AS X1
            FROM a AS a_0
                     INNER JOIN r AS r_1 ON a_0.x = r_1.x
                     INNER JOIN r AS r_2 ON r_1.y = r_2.x
                     INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalProject(X0=[$8], X1=[$0])
   :  +- LogicalJoin(condition=[=($9, $6)], joinType=[inner])
   :     :- LogicalJoin(condition=[=($7, $4)], joinType=[inner])
   :     :  :- LogicalJoin(condition=[=($5, $2)], joinType=[inner])
   :     :  :  :- LogicalJoin(condition=[=($3, $1)], joinType=[inner])
   :     :  :  :  :- LogicalUnion(all=[false])
   :     :  :  :  :  :- LogicalProject(X0=[$1], X1=[$0])
   :     :  :  :  :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :     :  :  :  :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :     :  :  :  :  +- LogicalProject(X0=[$1], X1=[$4])
   :     :  :  :  :     +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
   :     :  :  :  :        :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
   :     :  :  :  :        :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$5])
      +- LogicalJoin(condition=[=($4, $6)], joinType=[inner])
         :- LogicalJoin(condition=[=($2, $3)], joinType=[inner])
         :  :- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :  :  :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         +- LogicalUnion(all=[false])
            :- LogicalProject(X0=[$1], X1=[$0])
            :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
            :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
            :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
            +- LogicalProject(X0=[$1], X1=[$4])
               +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
                  :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
                  :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
                  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
                  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 3790.9948130732264, cumulative cost = {5349212.605712252 rows, 2.4686694229042447E8 cpu, 6.777042E7 io, 3.1914274594442565E7 network, 1.7118917494364534E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 3790.9948130732264, cumulative cost = {5345421.610899178 rows, 2.468062863734153E8 cpu, 6.777042E7 io, 3.1914274594442565E7 network, 1.6876293826327845E7 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 3790.9948130732264, cumulative cost = {5341630.616086105 rows, 2.461390712863144E8 cpu, 6.777042E7 io, 3.1823290718928806E7 network, 1.6876293826327845E7 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 20913.612636698977, cumulative cost = {5337839.621273031 rows, 2.4580445348412722E8 cpu, 6.777042E7 io, 3.1823290718928806E7 network, 1.6633670158291157E7 memory}
         :- Calc(select=[x000 AS X0, X0 AS X1]): rowcount = 9023.201118868677, cumulative cost = {3091009.5187409017 rows, 1.6663085590528482E8 cpu, 3.6965268E7 io, 2.211428563803798E7 network, 9555444.679145578 memory}
         :  +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[X0, X1, y, x000], isBroadcast=[true], build=[left]): rowcount = 9023.201118868677, cumulative cost = {3081986.317622033 rows, 1.6663085590528482E8 cpu, 3.6965268E7 io, 2.211428563803798E7 network, 9555444.679145578 memory}
         :     :- Exchange(distribution=[broadcast]): rowcount = 15007.73412579119, cumulative cost = {1450815.4365031645 rows, 6.09644459122785E7 cpu, 1.8482916E7 io, 7805855.238037977 network, 4078989.9681012724 memory}
         :     :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 15007.73412579119, cumulative cost = {1435807.7023773734 rows, 5.856320845215191E7 cpu, 1.8482916E7 io, 7445669.619018989 network, 4078989.9681012724 memory}
         :     :     +- Exchange(distribution=[hash[X0, X1]]): rowcount = 15007.73412579119, cumulative cost = {1420799.9682515822 rows, 5.832308470613925E7 cpu, 1.8482916E7 io, 7445669.619018989 network, 3118494.984050636 memory}
         :     :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 15007.73412579119, cumulative cost = {1405792.2341257911 rows, 5.56817235E7 cpu, 1.8482916E7 io, 7085484.0 network, 3118494.984050636 memory}
         :     :           +- Union(all=[true], union=[X0, X1]): rowcount = 82792.5, cumulative cost = {1390784.5 rows, 5.43570435E7 cpu, 1.8482916E7 io, 7085484.0 network, 2158000.0 memory}
         :     :              :- Calc(select=[y AS X0, x AS X1]): rowcount = 38511.9, cumulative cost = {333816.80000000005 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :     :              :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 38511.9, cumulative cost = {295304.9 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :     :              :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :     :              :     +- Exchange(distribution=[broadcast]): rowcount = 47.0, cumulative cost = {94.0 rows, 7520.0 cpu, 564.0 io, 564.0 network, 0.0 memory}
         :     :              :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 47.0, cumulative cost = {47.0 rows, 0.0 cpu, 564.0 io, 0.0 network, 0.0 memory}
         :     :              +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 44280.6, cumulative cost = {974175.2 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
         :     :                 +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 44280.6, cumulative cost = {929894.6 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
         :     :                    :- Exchange(distribution=[hash[y]]): rowcount = 256699.0, cumulative cost = {513398.0 rows, 4.3125432E7 cpu, 6160776.0 io, 6160776.0 network, 0.0 memory}
         :     :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :     :                    +- Exchange(distribution=[hash[x]]): rowcount = 38505.0, cumulative cost = {372216.0 rows, 6725699.0 cpu, 6160800.0 io, 924144.0 network, 28.0 memory}
         :     :                       +- Calc(select=[x, y0]): rowcount = 38505.0, cumulative cost = {333711.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
         :     :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 38505.0, cumulative cost = {295206.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
         :     :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :     :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :     :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :     +- Calc(select=[y, x00 AS x000]): rowcount = 45146.939999999995, cumulative cost = {1622147.6799999997 rows, 1.051851726E8 cpu, 1.8482352E7 io, 1.43084304E7 network, 4636021.6 memory}
         :        +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x00], build=[right]): rowcount = 45146.939999999995, cumulative cost = {1577000.7399999998 rows, 1.051851726E8 cpu, 1.8482352E7 io, 1.43084304E7 network, 4636021.6 memory}
         :           :- Exchange(distribution=[hash[x]]): rowcount = 256699.0, cumulative cost = {513398.0 rows, 4.3125432E7 cpu, 6160776.0 io, 6160776.0 network, 0.0 memory}
         :           :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :           +- Exchange(distribution=[hash[y]]): rowcount = 44280.6, cumulative cost = {1018455.7999999999 rows, 5.96519038E7 cpu, 1.2321576E7 io, 8147654.4 network, 2156308.0 memory}
         :              +- Calc(select=[y, x0 AS x00]): rowcount = 44280.6, cumulative cost = {974175.2 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
         :                 +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x0], build=[right]): rowcount = 44280.6, cumulative cost = {929894.6 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
         :                    :- Exchange(distribution=[hash[x]]): rowcount = 256699.0, cumulative cost = {513398.0 rows, 4.3125432E7 cpu, 6160776.0 io, 6160776.0 network, 0.0 memory}
         :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :                    +- Exchange(distribution=[hash[y]]): rowcount = 38505.0, cumulative cost = {372216.0 rows, 6725699.0 cpu, 6160800.0 io, 924144.0 network, 28.0 memory}
         :                       +- Calc(select=[y, x0]): rowcount = 38505.0, cumulative cost = {333711.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
         :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, x0, y0], build=[right]): rowcount = 38505.0, cumulative cost = {295206.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
         :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x0 AS X0, X0 AS X1]): rowcount = 11890.411517830302, cumulative cost = {2225916.489895431 rows, 7.915268396620572E7 cpu, 3.0805152E7 io, 9709005.080890825 network, 7078225.479145579 memory}
            +- HashJoin(joinType=[InnerJoin], where=[=(y, x)], select=[x, X0, y, x0], build=[right]): rowcount = 11890.411517830302, cumulative cost = {2214026.0783776008 rows, 7.915268396620572E7 cpu, 3.0805152E7 io, 9709005.080890825 network, 7078225.479145579 memory}
               :- Exchange(distribution=[hash[x]]): rowcount = 40756.010118868675, cumulative cost = {1829782.4668597705 rows, 6.998510948525476E7 cpu, 2.4643692E7 io, 8783999.480890825 network, 4919423.079145579 memory}
               :  +- Calc(select=[x, X0]): rowcount = 40756.010118868675, cumulative cost = {1789026.4567409018 rows, 6.313809978528483E7 cpu, 2.4643692E7 io, 7805855.238037977 network, 4919423.079145579 memory}
               :     +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[x, y, X0, X1], isBroadcast=[true], build=[right]): rowcount = 40756.010118868675, cumulative cost = {1748270.4466220331 rows, 6.313809978528483E7 cpu, 2.4643692E7 io, 7805855.238037977 network, 4919423.079145579 memory}
               :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
               :        +- Exchange(distribution=[broadcast]): rowcount = 15007.73412579119, cumulative cost = {1450815.4365031645 rows, 6.09644459122785E7 cpu, 1.8482916E7 io, 7805855.238037977 network, 4078989.9681012724 memory}
               :           +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 15007.73412579119, cumulative cost = {1435807.7023773734 rows, 5.856320845215191E7 cpu, 1.8482916E7 io, 7445669.619018989 network, 4078989.9681012724 memory}
               :              +- Exchange(distribution=[hash[X0, X1]]): rowcount = 15007.73412579119, cumulative cost = {1420799.9682515822 rows, 5.832308470613925E7 cpu, 1.8482916E7 io, 7445669.619018989 network, 3118494.984050636 memory}
               :                 +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 15007.73412579119, cumulative cost = {1405792.2341257911 rows, 5.56817235E7 cpu, 1.8482916E7 io, 7085484.0 network, 3118494.984050636 memory}
               :                    +- Union(all=[true], union=[X0, X1]): rowcount = 82792.5, cumulative cost = {1390784.5 rows, 5.43570435E7 cpu, 1.8482916E7 io, 7085484.0 network, 2158000.0 memory}
               :                       :- Calc(select=[y AS X0, x AS X1]): rowcount = 38511.9, cumulative cost = {333816.80000000005 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
               :                       :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 38511.9, cumulative cost = {295304.9 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
               :                       :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
               :                       :     +- Exchange(distribution=[broadcast]): rowcount = 47.0, cumulative cost = {94.0 rows, 7520.0 cpu, 564.0 io, 564.0 network, 0.0 memory}
               :                       :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 47.0, cumulative cost = {47.0 rows, 0.0 cpu, 564.0 io, 0.0 network, 0.0 memory}
               :                       +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 44280.6, cumulative cost = {974175.2 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
               :                          +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 44280.6, cumulative cost = {929894.6 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
               :                             :- Exchange(distribution=[hash[y]]): rowcount = 256699.0, cumulative cost = {513398.0 rows, 4.3125432E7 cpu, 6160776.0 io, 6160776.0 network, 0.0 memory}
               :                             :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
               :                             +- Exchange(distribution=[hash[x]]): rowcount = 38505.0, cumulative cost = {372216.0 rows, 6725699.0 cpu, 6160800.0 io, 924144.0 network, 28.0 memory}
               :                                +- Calc(select=[x, y0]): rowcount = 38505.0, cumulative cost = {333711.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
               :                                   +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 38505.0, cumulative cost = {295206.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
               :                                      :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
               :                                      +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
               :                                         +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[hash[y]]): rowcount = 38513.4, cumulative cost = {372353.20000000007 rows, 8533419.2 cpu, 6161460.0 io, 925005.6000000001 network, 2052.0 memory}
                  +- Calc(select=[y, x0]): rowcount = 38513.4, cumulative cost = {333839.80000000005 rows, 2063168.0 cpu, 6161460.0 io, 684.0 network, 2052.0 memory}
                     +- HashJoin(joinType=[InnerJoin], where=[=(x0, x)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 38513.4, cumulative cost = {295326.4 rows, 2063168.0 cpu, 6161460.0 io, 684.0 network, 2052.0 memory}
                        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
                        +- Exchange(distribution=[broadcast]): rowcount = 57.0, cumulative cost = {114.0 rows, 9120.0 cpu, 684.0 io, 684.0 network, 0.0 memory}
                           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 57.0, cumulative cost = {57.0 rows, 0.0 cpu, 684.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[x000 AS X0, X0 AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[X0, X1, y, x000], isBroadcast=[true], build=[left])\n:     :- [#1] Exchange(distribution=[broadcast])\n:     +- Calc(select=[y, x00 AS x000])\n:        +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x00], build=[right])\n:           :- [#4] Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])\n:           +- [#5] Exchange(distribution=[hash[y]])\n+- Calc(select=[x0 AS X0, X0 AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(y = x)], select=[x, X0, y, x0], build=[right])\n      :- [#2] Exchange(distribution=[hash[x]])\n      +- [#3] Exchange(distribution=[hash[y]])\n])
         :- Exchange(distribution=[broadcast])(reuse_id=[2])
         :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
         :     +- Exchange(distribution=[hash[X0, X1]])
         :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
         :           +- MultipleInput(readOrder=[1,0,2,1], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[y AS X0, x AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:     :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- Calc(select=[y0 AS X0, x AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])\n      :- [#3] Exchange(distribution=[hash[y]])\n      +- [#4] Exchange(distribution=[hash[x]])\n])
         :              :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :              :- Exchange(distribution=[broadcast])
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :              :- Exchange(distribution=[hash[y]])
         :              :  +- Reused(reference_id=[1])
         :              +- Exchange(distribution=[hash[x]])
         :                 +- Calc(select=[x, y0])
         :                    +- NestedLoopJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])
         :                       :- Reused(reference_id=[1])
         :                       +- Exchange(distribution=[broadcast])(reuse_id=[3])
         :                          +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
         :- Exchange(distribution=[hash[x]])
         :  +- Calc(select=[x, X0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[x, y, X0, X1], isBroadcast=[true], build=[right])
         :        :- Exchange(distribution=[any], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Reused(reference_id=[2])
         :- Exchange(distribution=[hash[y]])
         :  +- Calc(select=[y, x0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(x0 = x)], select=[x, y, x0], isBroadcast=[true], build=[right])
         :        :- Reused(reference_id=[1])
         :        +- Exchange(distribution=[broadcast])
         :           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])
         :  +- Reused(reference_id=[1])
         +- Exchange(distribution=[hash[y]])
            +- Calc(select=[y, x0 AS x00])
               +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x0], build=[right])
                  :- Exchange(distribution=[hash[x]])
                  :  +- Reused(reference_id=[1])
                  +- Exchange(distribution=[hash[y]])
                     +- Calc(select=[y, x0])
                        +- NestedLoopJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, x0, y0], build=[right])
                           :- Reused(reference_id=[1])
                           +- Reused(reference_id=[3])

Job has been submitted with JobID 055a6db4f7db5d4a00526bdffc553ca5
WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT s_2.y AS X0, r_0.x AS X1 FROM s AS s_2 INNER JOIN r AS r_1 on s_2.x = r_1.y INNER JOIN r AS r_0 on r_1.x = r_0.y )), p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1 FROM p12 AS p12_4 INNER JOIN r AS r_3 ON r_3.y = p12_4.X1 INNER JOIN r AS r_2 ON r_2.y = r_3.x INNER JOIN r AS r_1 ON r_1.y = r_2.x INNER JOIN s as s_0 ON s_0.y = r_1.x UNION (SELECT a_0.x AS X0, p12_3.X0 AS X1 FROM a AS a_0 INNER JOIN r AS r_1 ON a_0.x = r_1.x INNER JOIN r AS r_2 ON r_1.y = r_2.x INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1

------------> using sink uuid: e1feb627_7887_4c9d_a523_1ddfcbaa047e

Adding statistics for table s number 5 
Adding statistics for table a number 5 
Adding statistics for table b number 5 
Adding statistics for table r number 5 
Adding statistics for table t number 5 
sql argument: WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1
             FROM r AS r_0
                      INNER JOIN b AS b_1 ON r_0.y = b_1.x
             UNION
             (SELECT s_2.y AS X0, r_0.x AS X1
              FROM s AS s_2
                       INNER JOIN r AS r_1 on s_2.x = r_1.y
                       INNER JOIN r AS r_0 on r_1.x = r_0.y
             )),
     p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1
            FROM p12 AS p12_4
                INNER JOIN r AS r_3 ON r_3.y = p12_4.X1
                INNER JOIN r AS r_2 ON r_2.y = r_3.x
                INNER JOIN r AS r_1 ON r_1.y = r_2.x
                INNER JOIN s as s_0 ON s_0.y = r_1.x
            UNION
            (SELECT a_0.x AS X0, p12_3.X0 AS X1
            FROM a AS a_0
                     INNER JOIN r AS r_1 ON a_0.x = r_1.x
                     INNER JOIN r AS r_2 ON r_1.y = r_2.x
                     INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalProject(X0=[$8], X1=[$0])
   :  +- LogicalJoin(condition=[=($9, $6)], joinType=[inner])
   :     :- LogicalJoin(condition=[=($7, $4)], joinType=[inner])
   :     :  :- LogicalJoin(condition=[=($5, $2)], joinType=[inner])
   :     :  :  :- LogicalJoin(condition=[=($3, $1)], joinType=[inner])
   :     :  :  :  :- LogicalUnion(all=[false])
   :     :  :  :  :  :- LogicalProject(X0=[$1], X1=[$0])
   :     :  :  :  :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :     :  :  :  :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :     :  :  :  :  +- LogicalProject(X0=[$1], X1=[$4])
   :     :  :  :  :     +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
   :     :  :  :  :        :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
   :     :  :  :  :        :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$5])
      +- LogicalJoin(condition=[=($4, $6)], joinType=[inner])
         :- LogicalJoin(condition=[=($2, $3)], joinType=[inner])
         :  :- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :  :  :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         +- LogicalUnion(all=[false])
            :- LogicalProject(X0=[$1], X1=[$0])
            :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
            :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
            :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
            +- LogicalProject(X0=[$1], X1=[$4])
               +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
                  :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
                  :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
                  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
                  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 34070.37215974037, cumulative cost = {5.078742322832537E7 rows, 2.6765364600731173E9 cpu, 6.09074928E8 io, 3.519282157360017E8 network, 1.538402018618865E8 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 34070.37215974037, cumulative cost = {5.0753352856165625E7 rows, 2.6759913341185613E9 cpu, 6.09074928E8 io, 3.519282157360017E8 network, 1.516596980436631E8 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 34070.37215974037, cumulative cost = {5.071928248400588E7 rows, 2.669994948618447E9 cpu, 6.09074928E8 io, 3.511105268041679E8 network, 1.516596980436631E8 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 187954.5082150499, cumulative cost = {5.068521211184614E7 rows, 2.666987676487006E9 cpu, 6.09074928E8 io, 3.511105268041679E8 network, 1.4947919422543973E8 memory}
         :- Calc(select=[x000 AS X0, X0 AS X1]): rowcount = 81094.7509057499, cumulative cost = {2.8185652542006496E7 rows, 1.5668072051229396E9 cpu, 3.32220108E8 io, 2.0848646537483996E8 network, 8.587522756271987E7 memory}
         :  +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[X0, X1, y, x000], build=[left]): rowcount = 81094.7509057499, cumulative cost = {2.8104557791100748E7 rows, 1.5668072051229396E9 cpu, 3.32220108E8 io, 2.0848646537483996E8 network, 8.587522756271987E7 memory}
         :     :- Exchange(distribution=[hash[X1]]): rowcount = 134878.5470799993, cumulative cost = {1.3038856400819996E7 rows, 5.489769892362998E8 cpu, 1.66112196E8 io, 7.015317225983997E7 network, 3.665659602623991E7 memory}
         :     :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 134878.5470799993, cumulative cost = {1.2903977853739997E7 rows, 5.263173933268599E8 cpu, 1.66112196E8 io, 6.691608712991998E7 network, 3.665659602623991E7 memory}
         :     :     +- Exchange(distribution=[hash[X0, X1]]): rowcount = 134878.5470799993, cumulative cost = {1.2769099306659998E7 rows, 5.241593365735799E8 cpu, 1.66112196E8 io, 6.691608712991998E7 network, 2.8024369013119955E7 memory}
         :     :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 134878.5470799993, cumulative cost = {1.263422075958E7 rows, 5.004207122875E8 cpu, 1.66112196E8 io, 6.3679002E7 network, 2.8024369013119955E7 memory}
         :     :           +- Union(all=[true], union=[X0, X1]): rowcount = 744078.4874999999, cumulative cost = {1.24993422125E7 rows, 4.885154564875E8 cpu, 1.66112196E8 io, 6.3679002E7 network, 1.9392142E7 memory}
         :     :              :- Calc(select=[y AS X0, x AS X1]): rowcount = 346111.64999999997, cumulative cost = {2999991.3 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :     :              :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 346111.64999999997, cumulative cost = {2653879.65 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :     :              :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :     :              :     +- Exchange(distribution=[broadcast]): rowcount = 357.0, cumulative cost = {714.0 rows, 57120.0 cpu, 4284.0 io, 4284.0 network, 0.0 memory}
         :     :              :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 357.0, cumulative cost = {357.0 rows, 0.0 cpu, 4284.0 io, 0.0 network, 0.0 memory}
         :     :              +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 397966.83749999997, cumulative cost = {8755272.425 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
         :     :                 +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 397966.83749999997, cumulative cost = {8357305.5875 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
         :     :                    :- Exchange(distribution=[hash[y]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
         :     :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :     :                    +- Exchange(distribution=[hash[x]]): rowcount = 346058.25, cumulative cost = {3345230.75 rows, 6.0445E7 cpu, 5.536932E7 io, 8305422.0 network, 28.0 memory}
         :     :                       +- Calc(select=[x, y0]): rowcount = 346058.25, cumulative cost = {2999172.5 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
         :     :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 346058.25, cumulative cost = {2653114.25 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
         :     :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :     :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :     :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :     +- Exchange(distribution=[hash[y]]): rowcount = 405753.125625, cumulative cost = {1.4984606639375001E7 rows, 1.013505162505E9 cpu, 1.66107912E8 io, 1.38333293115E8 network, 4.16654329E7 memory}
         :        +- Calc(select=[y, x00 AS x000]): rowcount = 405753.125625, cumulative cost = {1.4578853513750002E7 rows, 9.453386374E8 cpu, 1.66107912E8 io, 1.285952181E8 network, 4.16654329E7 memory}
         :           +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x00], build=[right]): rowcount = 405753.125625, cumulative cost = {1.4173100388125002E7 rows, 9.453386374E8 cpu, 1.66107912E8 io, 1.285952181E8 network, 4.16654329E7 memory}
         :              :- Exchange(distribution=[hash[x]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :              +- Exchange(distribution=[hash[y]]): rowcount = 397966.83749999997, cumulative cost = {9153239.262500001 rows, 5.361133987E8 cpu, 1.10738616E8 io, 7.32259221E7 network, 1.937929E7 memory}
         :                 +- Calc(select=[y, x0 AS x00]): rowcount = 397966.83749999997, cumulative cost = {8755272.425 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
         :                    +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x0], build=[right]): rowcount = 397966.83749999997, cumulative cost = {8357305.5875 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
         :                       :- Exchange(distribution=[hash[x]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
         :                       :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :                       +- Exchange(distribution=[hash[y]]): rowcount = 346058.25, cumulative cost = {3345230.75 rows, 6.0445E7 cpu, 5.536932E7 io, 8305422.0 network, 28.0 memory}
         :                          +- Calc(select=[y, x0]): rowcount = 346058.25, cumulative cost = {2999172.5 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
         :                             +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, x0, y0], build=[right]): rowcount = 346058.25, cumulative cost = {2653114.25 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
         :                                :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :                                +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                                   +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x0 AS X0, X0 AS X1]): rowcount = 106859.7573093, cumulative cost = {2.2311605061624594E7 rows, 1.099992516855852E9 cpu, 2.7685482E8 io, 1.4262406142932796E8 network, 6.360396666271987E7 memory}
            +- HashJoin(joinType=[InnerJoin], where=[=(y, x)], select=[x, X0, y, x0], build=[right]): rowcount = 106859.7573093, cumulative cost = {2.2204745304315295E7 rows, 1.099992516855852E9 cpu, 2.7685482E8 io, 1.4262406142932796E8 network, 6.360396666271987E7 memory}
               :- Exchange(distribution=[hash[x]]): rowcount = 366289.88206199993, cumulative cost = {1.8751834047005996E7 rows, 1.0176342217993559E9 cpu, 2.21481492E8 io, 1.3431342542932796E8 network, 4.420979466271987E7 memory}
               :  +- Calc(select=[x, X0]): rowcount = 366289.88206199993, cumulative cost = {1.8385544164943997E7 rows, 9.560975216129398E8 cpu, 2.21481492E8 io, 1.2552246825983997E8 network, 4.420979466271987E7 memory}
               :     +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[x, y, X0, X1], build=[right]): rowcount = 366289.88206199993, cumulative cost = {1.8019254282881998E7 rows, 9.560975216129398E8 cpu, 2.21481492E8 io, 1.2552246825983997E8 network, 4.420979466271987E7 memory}
               :        :- Exchange(distribution=[hash[y]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
               :        :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
               :        +- Exchange(distribution=[hash[X1]]): rowcount = 134878.5470799993, cumulative cost = {1.3038856400819996E7 rows, 5.489769892362998E8 cpu, 1.66112196E8 io, 7.015317225983997E7 network, 3.665659602623991E7 memory}
               :           +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 134878.5470799993, cumulative cost = {1.2903977853739997E7 rows, 5.263173933268599E8 cpu, 1.66112196E8 io, 6.691608712991998E7 network, 3.665659602623991E7 memory}
               :              +- Exchange(distribution=[hash[X0, X1]]): rowcount = 134878.5470799993, cumulative cost = {1.2769099306659998E7 rows, 5.241593365735799E8 cpu, 1.66112196E8 io, 6.691608712991998E7 network, 2.8024369013119955E7 memory}
               :                 +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 134878.5470799993, cumulative cost = {1.263422075958E7 rows, 5.004207122875E8 cpu, 1.66112196E8 io, 6.3679002E7 network, 2.8024369013119955E7 memory}
               :                    +- Union(all=[true], union=[X0, X1]): rowcount = 744078.4874999999, cumulative cost = {1.24993422125E7 rows, 4.885154564875E8 cpu, 1.66112196E8 io, 6.3679002E7 network, 1.9392142E7 memory}
               :                       :- Calc(select=[y AS X0, x AS X1]): rowcount = 346111.64999999997, cumulative cost = {2999991.3 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
               :                       :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 346111.64999999997, cumulative cost = {2653879.65 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
               :                       :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
               :                       :     +- Exchange(distribution=[broadcast]): rowcount = 357.0, cumulative cost = {714.0 rows, 57120.0 cpu, 4284.0 io, 4284.0 network, 0.0 memory}
               :                       :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 357.0, cumulative cost = {357.0 rows, 0.0 cpu, 4284.0 io, 0.0 network, 0.0 memory}
               :                       +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 397966.83749999997, cumulative cost = {8755272.425 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
               :                          +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 397966.83749999997, cumulative cost = {8357305.5875 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
               :                             :- Exchange(distribution=[hash[y]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
               :                             :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
               :                             +- Exchange(distribution=[hash[x]]): rowcount = 346058.25, cumulative cost = {3345230.75 rows, 6.0445E7 cpu, 5.536932E7 io, 8305422.0 network, 28.0 memory}
               :                                +- Calc(select=[x, y0]): rowcount = 346058.25, cumulative cost = {2999172.5 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
               :                                   +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 346058.25, cumulative cost = {2653114.25 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
               :                                      :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
               :                                      +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
               :                                         +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[hash[y]]): rowcount = 346108.5, cumulative cost = {3346051.5 rows, 7.6659108E7 cpu, 5.5373328E7 io, 8310636.0 network, 12096.0 memory}
                  +- Calc(select=[y, x0]): rowcount = 346108.5, cumulative cost = {2999943.0 rows, 1.851288E7 cpu, 5.5373328E7 io, 4032.0 network, 12096.0 memory}
                     +- HashJoin(joinType=[InnerJoin], where=[=(x0, x)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 346108.5, cumulative cost = {2653834.5 rows, 1.851288E7 cpu, 5.5373328E7 io, 4032.0 network, 12096.0 memory}
                        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
                        +- Exchange(distribution=[broadcast]): rowcount = 336.0, cumulative cost = {672.0 rows, 53760.0 cpu, 4032.0 io, 4032.0 network, 0.0 memory}
                           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 336.0, cumulative cost = {336.0 rows, 0.0 cpu, 4032.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[0,1,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[x000 AS X0, X0 AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[X0, X1, y, x000], build=[left])\n:     :- [#1] Exchange(distribution=[hash[X1]])\n:     +- [#2] Exchange(distribution=[hash[y]])\n+- Calc(select=[x0 AS X0, X0 AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(y = x)], select=[x, X0, y, x0], build=[right])\n      :- [#3] Exchange(distribution=[hash[x]])\n      +- [#4] Exchange(distribution=[hash[y]])\n])
         :- Exchange(distribution=[hash[X1]])(reuse_id=[3])
         :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
         :     +- Exchange(distribution=[hash[X0, X1]])
         :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
         :           +- MultipleInput(readOrder=[1,0,2,1], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[y AS X0, x AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:     :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- Calc(select=[y0 AS X0, x AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])\n      :- [#3] Exchange(distribution=[hash[y]])\n      +- [#4] Exchange(distribution=[hash[x]])\n])
         :              :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :              :- Exchange(distribution=[broadcast])
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :              :- Exchange(distribution=[hash[y]])
         :              :  +- Reused(reference_id=[1])
         :              +- Exchange(distribution=[hash[x]])
         :                 +- Calc(select=[x, y0])
         :                    +- NestedLoopJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])
         :                       :- Reused(reference_id=[1])
         :                       +- Exchange(distribution=[broadcast])(reuse_id=[2])
         :                          +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
         :- Exchange(distribution=[hash[y]])
         :  +- Calc(select=[y, x00 AS x000])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x00], build=[right])
         :        :- Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Exchange(distribution=[hash[y]])
         :           +- Calc(select=[y, x0 AS x00])
         :              +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x0], build=[right])
         :                 :- Exchange(distribution=[hash[x]])
         :                 :  +- Reused(reference_id=[1])
         :                 +- Exchange(distribution=[hash[y]])
         :                    +- Calc(select=[y, x0])
         :                       +- NestedLoopJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, x0, y0], build=[right])
         :                          :- Reused(reference_id=[1])
         :                          +- Reused(reference_id=[2])
         :- Exchange(distribution=[hash[x]])
         :  +- Calc(select=[x, X0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[x, y, X0, X1], build=[right])
         :        :- Exchange(distribution=[hash[y]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Reused(reference_id=[3])
         +- Exchange(distribution=[hash[y]])
            +- Calc(select=[y, x0])
               +- HashJoin(joinType=[InnerJoin], where=[(x0 = x)], select=[x, y, x0], isBroadcast=[true], build=[right])
                  :- Reused(reference_id=[1])
                  +- Exchange(distribution=[broadcast])
                     +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])

Job has been submitted with JobID 668a9972afa3c0449d08df479660efb8
WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT s_2.y AS X0, r_0.x AS X1 FROM s AS s_2 INNER JOIN r AS r_1 on s_2.x = r_1.y INNER JOIN r AS r_0 on r_1.x = r_0.y )), p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1 FROM p12 AS p12_4 INNER JOIN r AS r_3 ON r_3.y = p12_4.X1 INNER JOIN r AS r_2 ON r_2.y = r_3.x INNER JOIN r AS r_1 ON r_1.y = r_2.x INNER JOIN s as s_0 ON s_0.y = r_1.x UNION (SELECT a_0.x AS X0, p12_3.X0 AS X1 FROM a AS a_0 INNER JOIN r AS r_1 ON a_0.x = r_1.x INNER JOIN r AS r_2 ON r_1.y = r_2.x INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...

------------> using sink uuid: a54bbd9c_7c79_4d92_af9b_c6d1b53694dc

Adding statistics for table s number 5 
Adding statistics for table a number 5 
Adding statistics for table b number 5 
Adding statistics for table r number 5 
Adding statistics for table t number 5 
sql argument: WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1
             FROM r AS r_0
                      INNER JOIN b AS b_1 ON r_0.y = b_1.x
             UNION
             (SELECT s_2.y AS X0, r_0.x AS X1
              FROM s AS s_2
                       INNER JOIN r AS r_1 on s_2.x = r_1.y
                       INNER JOIN r AS r_0 on r_1.x = r_0.y
             )),
     p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1
            FROM p12 AS p12_4
                INNER JOIN r AS r_3 ON r_3.y = p12_4.X1
                INNER JOIN r AS r_2 ON r_2.y = r_3.x
                INNER JOIN r AS r_1 ON r_1.y = r_2.x
                INNER JOIN s as s_0 ON s_0.y = r_1.x
            UNION
            (SELECT a_0.x AS X0, p12_3.X0 AS X1
            FROM a AS a_0
                     INNER JOIN r AS r_1 ON a_0.x = r_1.x
                     INNER JOIN r AS r_2 ON r_1.y = r_2.x
                     INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalProject(X0=[$8], X1=[$0])
   :  +- LogicalJoin(condition=[=($9, $6)], joinType=[inner])
   :     :- LogicalJoin(condition=[=($7, $4)], joinType=[inner])
   :     :  :- LogicalJoin(condition=[=($5, $2)], joinType=[inner])
   :     :  :  :- LogicalJoin(condition=[=($3, $1)], joinType=[inner])
   :     :  :  :  :- LogicalUnion(all=[false])
   :     :  :  :  :  :- LogicalProject(X0=[$1], X1=[$0])
   :     :  :  :  :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :     :  :  :  :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :     :  :  :  :  +- LogicalProject(X0=[$1], X1=[$4])
   :     :  :  :  :     +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
   :     :  :  :  :        :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
   :     :  :  :  :        :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$5])
      +- LogicalJoin(condition=[=($4, $6)], joinType=[inner])
         :- LogicalJoin(condition=[=($2, $3)], joinType=[inner])
         :  :- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :  :  :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         +- LogicalUnion(all=[false])
            :- LogicalProject(X0=[$1], X1=[$0])
            :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
            :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
            :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
            +- LogicalProject(X0=[$1], X1=[$4])
               +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
                  :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
                  :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
                  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
                  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 34070.37215974037, cumulative cost = {5.078742322832537E7 rows, 2.6765364600731173E9 cpu, 6.09074928E8 io, 3.519282157360017E8 network, 1.538402018618865E8 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 34070.37215974037, cumulative cost = {5.0753352856165625E7 rows, 2.6759913341185613E9 cpu, 6.09074928E8 io, 3.519282157360017E8 network, 1.516596980436631E8 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 34070.37215974037, cumulative cost = {5.071928248400588E7 rows, 2.669994948618447E9 cpu, 6.09074928E8 io, 3.511105268041679E8 network, 1.516596980436631E8 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 187954.5082150499, cumulative cost = {5.068521211184614E7 rows, 2.666987676487006E9 cpu, 6.09074928E8 io, 3.511105268041679E8 network, 1.4947919422543973E8 memory}
         :- Calc(select=[x000 AS X0, X0 AS X1]): rowcount = 81094.7509057499, cumulative cost = {2.8185652542006496E7 rows, 1.5668072051229396E9 cpu, 3.32220108E8 io, 2.0848646537483996E8 network, 8.587522756271987E7 memory}
         :  +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[X0, X1, y, x000], build=[left]): rowcount = 81094.7509057499, cumulative cost = {2.8104557791100748E7 rows, 1.5668072051229396E9 cpu, 3.32220108E8 io, 2.0848646537483996E8 network, 8.587522756271987E7 memory}
         :     :- Exchange(distribution=[hash[X1]]): rowcount = 134878.5470799993, cumulative cost = {1.3038856400819996E7 rows, 5.489769892362998E8 cpu, 1.66112196E8 io, 7.015317225983997E7 network, 3.665659602623991E7 memory}
         :     :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 134878.5470799993, cumulative cost = {1.2903977853739997E7 rows, 5.263173933268599E8 cpu, 1.66112196E8 io, 6.691608712991998E7 network, 3.665659602623991E7 memory}
         :     :     +- Exchange(distribution=[hash[X0, X1]]): rowcount = 134878.5470799993, cumulative cost = {1.2769099306659998E7 rows, 5.241593365735799E8 cpu, 1.66112196E8 io, 6.691608712991998E7 network, 2.8024369013119955E7 memory}
         :     :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 134878.5470799993, cumulative cost = {1.263422075958E7 rows, 5.004207122875E8 cpu, 1.66112196E8 io, 6.3679002E7 network, 2.8024369013119955E7 memory}
         :     :           +- Union(all=[true], union=[X0, X1]): rowcount = 744078.4874999999, cumulative cost = {1.24993422125E7 rows, 4.885154564875E8 cpu, 1.66112196E8 io, 6.3679002E7 network, 1.9392142E7 memory}
         :     :              :- Calc(select=[y AS X0, x AS X1]): rowcount = 346111.64999999997, cumulative cost = {2999991.3 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :     :              :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 346111.64999999997, cumulative cost = {2653879.65 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :     :              :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :     :              :     +- Exchange(distribution=[broadcast]): rowcount = 357.0, cumulative cost = {714.0 rows, 57120.0 cpu, 4284.0 io, 4284.0 network, 0.0 memory}
         :     :              :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 357.0, cumulative cost = {357.0 rows, 0.0 cpu, 4284.0 io, 0.0 network, 0.0 memory}
         :     :              +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 397966.83749999997, cumulative cost = {8755272.425 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
         :     :                 +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 397966.83749999997, cumulative cost = {8357305.5875 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
         :     :                    :- Exchange(distribution=[hash[y]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
         :     :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :     :                    +- Exchange(distribution=[hash[x]]): rowcount = 346058.25, cumulative cost = {3345230.75 rows, 6.0445E7 cpu, 5.536932E7 io, 8305422.0 network, 28.0 memory}
         :     :                       +- Calc(select=[x, y0]): rowcount = 346058.25, cumulative cost = {2999172.5 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
         :     :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 346058.25, cumulative cost = {2653114.25 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
         :     :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :     :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :     :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :     +- Exchange(distribution=[hash[y]]): rowcount = 405753.125625, cumulative cost = {1.4984606639375001E7 rows, 1.013505162505E9 cpu, 1.66107912E8 io, 1.38333293115E8 network, 4.16654329E7 memory}
         :        +- Calc(select=[y, x00 AS x000]): rowcount = 405753.125625, cumulative cost = {1.4578853513750002E7 rows, 9.453386374E8 cpu, 1.66107912E8 io, 1.285952181E8 network, 4.16654329E7 memory}
         :           +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x00], build=[right]): rowcount = 405753.125625, cumulative cost = {1.4173100388125002E7 rows, 9.453386374E8 cpu, 1.66107912E8 io, 1.285952181E8 network, 4.16654329E7 memory}
         :              :- Exchange(distribution=[hash[x]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :              +- Exchange(distribution=[hash[y]]): rowcount = 397966.83749999997, cumulative cost = {9153239.262500001 rows, 5.361133987E8 cpu, 1.10738616E8 io, 7.32259221E7 network, 1.937929E7 memory}
         :                 +- Calc(select=[y, x0 AS x00]): rowcount = 397966.83749999997, cumulative cost = {8755272.425 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
         :                    +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x0], build=[right]): rowcount = 397966.83749999997, cumulative cost = {8357305.5875 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
         :                       :- Exchange(distribution=[hash[x]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
         :                       :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :                       +- Exchange(distribution=[hash[y]]): rowcount = 346058.25, cumulative cost = {3345230.75 rows, 6.0445E7 cpu, 5.536932E7 io, 8305422.0 network, 28.0 memory}
         :                          +- Calc(select=[y, x0]): rowcount = 346058.25, cumulative cost = {2999172.5 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
         :                             +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, x0, y0], build=[right]): rowcount = 346058.25, cumulative cost = {2653114.25 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
         :                                :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :                                +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                                   +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x0 AS X0, X0 AS X1]): rowcount = 106859.7573093, cumulative cost = {2.2311605061624594E7 rows, 1.099992516855852E9 cpu, 2.7685482E8 io, 1.4262406142932796E8 network, 6.360396666271987E7 memory}
            +- HashJoin(joinType=[InnerJoin], where=[=(y, x)], select=[x, X0, y, x0], build=[right]): rowcount = 106859.7573093, cumulative cost = {2.2204745304315295E7 rows, 1.099992516855852E9 cpu, 2.7685482E8 io, 1.4262406142932796E8 network, 6.360396666271987E7 memory}
               :- Exchange(distribution=[hash[x]]): rowcount = 366289.88206199993, cumulative cost = {1.8751834047005996E7 rows, 1.0176342217993559E9 cpu, 2.21481492E8 io, 1.3431342542932796E8 network, 4.420979466271987E7 memory}
               :  +- Calc(select=[x, X0]): rowcount = 366289.88206199993, cumulative cost = {1.8385544164943997E7 rows, 9.560975216129398E8 cpu, 2.21481492E8 io, 1.2552246825983997E8 network, 4.420979466271987E7 memory}
               :     +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[x, y, X0, X1], build=[right]): rowcount = 366289.88206199993, cumulative cost = {1.8019254282881998E7 rows, 9.560975216129398E8 cpu, 2.21481492E8 io, 1.2552246825983997E8 network, 4.420979466271987E7 memory}
               :        :- Exchange(distribution=[hash[y]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
               :        :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
               :        +- Exchange(distribution=[hash[X1]]): rowcount = 134878.5470799993, cumulative cost = {1.3038856400819996E7 rows, 5.489769892362998E8 cpu, 1.66112196E8 io, 7.015317225983997E7 network, 3.665659602623991E7 memory}
               :           +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 134878.5470799993, cumulative cost = {1.2903977853739997E7 rows, 5.263173933268599E8 cpu, 1.66112196E8 io, 6.691608712991998E7 network, 3.665659602623991E7 memory}
               :              +- Exchange(distribution=[hash[X0, X1]]): rowcount = 134878.5470799993, cumulative cost = {1.2769099306659998E7 rows, 5.241593365735799E8 cpu, 1.66112196E8 io, 6.691608712991998E7 network, 2.8024369013119955E7 memory}
               :                 +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 134878.5470799993, cumulative cost = {1.263422075958E7 rows, 5.004207122875E8 cpu, 1.66112196E8 io, 6.3679002E7 network, 2.8024369013119955E7 memory}
               :                    +- Union(all=[true], union=[X0, X1]): rowcount = 744078.4874999999, cumulative cost = {1.24993422125E7 rows, 4.885154564875E8 cpu, 1.66112196E8 io, 6.3679002E7 network, 1.9392142E7 memory}
               :                       :- Calc(select=[y AS X0, x AS X1]): rowcount = 346111.64999999997, cumulative cost = {2999991.3 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
               :                       :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 346111.64999999997, cumulative cost = {2653879.65 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
               :                       :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
               :                       :     +- Exchange(distribution=[broadcast]): rowcount = 357.0, cumulative cost = {714.0 rows, 57120.0 cpu, 4284.0 io, 4284.0 network, 0.0 memory}
               :                       :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 357.0, cumulative cost = {357.0 rows, 0.0 cpu, 4284.0 io, 0.0 network, 0.0 memory}
               :                       +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 397966.83749999997, cumulative cost = {8755272.425 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
               :                          +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 397966.83749999997, cumulative cost = {8357305.5875 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
               :                             :- Exchange(distribution=[hash[y]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
               :                             :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
               :                             +- Exchange(distribution=[hash[x]]): rowcount = 346058.25, cumulative cost = {3345230.75 rows, 6.0445E7 cpu, 5.536932E7 io, 8305422.0 network, 28.0 memory}
               :                                +- Calc(select=[x, y0]): rowcount = 346058.25, cumulative cost = {2999172.5 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
               :                                   +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 346058.25, cumulative cost = {2653114.25 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
               :                                      :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
               :                                      +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
               :                                         +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[hash[y]]): rowcount = 346108.5, cumulative cost = {3346051.5 rows, 7.6659108E7 cpu, 5.5373328E7 io, 8310636.0 network, 12096.0 memory}
                  +- Calc(select=[y, x0]): rowcount = 346108.5, cumulative cost = {2999943.0 rows, 1.851288E7 cpu, 5.5373328E7 io, 4032.0 network, 12096.0 memory}
                     +- HashJoin(joinType=[InnerJoin], where=[=(x0, x)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 346108.5, cumulative cost = {2653834.5 rows, 1.851288E7 cpu, 5.5373328E7 io, 4032.0 network, 12096.0 memory}
                        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
                        +- Exchange(distribution=[broadcast]): rowcount = 336.0, cumulative cost = {672.0 rows, 53760.0 cpu, 4032.0 io, 4032.0 network, 0.0 memory}
                           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 336.0, cumulative cost = {336.0 rows, 0.0 cpu, 4032.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[0,1,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[x000 AS X0, X0 AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[X0, X1, y, x000], build=[left])\n:     :- [#1] Exchange(distribution=[hash[X1]])\n:     +- [#2] Exchange(distribution=[hash[y]])\n+- Calc(select=[x0 AS X0, X0 AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(y = x)], select=[x, X0, y, x0], build=[right])\n      :- [#3] Exchange(distribution=[hash[x]])\n      +- [#4] Exchange(distribution=[hash[y]])\n])
         :- Exchange(distribution=[hash[X1]])(reuse_id=[3])
         :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
         :     +- Exchange(distribution=[hash[X0, X1]])
         :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
         :           +- MultipleInput(readOrder=[1,0,2,1], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[y AS X0, x AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:     :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- Calc(select=[y0 AS X0, x AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])\n      :- [#3] Exchange(distribution=[hash[y]])\n      +- [#4] Exchange(distribution=[hash[x]])\n])
         :              :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :              :- Exchange(distribution=[broadcast])
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :              :- Exchange(distribution=[hash[y]])
         :              :  +- Reused(reference_id=[1])
         :              +- Exchange(distribution=[hash[x]])
         :                 +- Calc(select=[x, y0])
         :                    +- NestedLoopJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])
         :                       :- Reused(reference_id=[1])
         :                       +- Exchange(distribution=[broadcast])(reuse_id=[2])
         :                          +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
         :- Exchange(distribution=[hash[y]])
         :  +- Calc(select=[y, x00 AS x000])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x00], build=[right])
         :        :- Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Exchange(distribution=[hash[y]])
         :           +- Calc(select=[y, x0 AS x00])
         :              +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x0], build=[right])
         :                 :- Exchange(distribution=[hash[x]])
         :                 :  +- Reused(reference_id=[1])
         :                 +- Exchange(distribution=[hash[y]])
         :                    +- Calc(select=[y, x0])
         :                       +- NestedLoopJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, x0, y0], build=[right])
         :                          :- Reused(reference_id=[1])
         :                          +- Reused(reference_id=[2])
         :- Exchange(distribution=[hash[x]])
         :  +- Calc(select=[x, X0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[x, y, X0, X1], build=[right])
         :        :- Exchange(distribution=[hash[y]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Reused(reference_id=[3])
         +- Exchange(distribution=[hash[y]])
            +- Calc(select=[y, x0])
               +- HashJoin(joinType=[InnerJoin], where=[(x0 = x)], select=[x, y, x0], isBroadcast=[true], build=[right])
                  :- Reused(reference_id=[1])
                  +- Exchange(distribution=[broadcast])
                     +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])

Job has been submitted with JobID d1183f274daf15fac82aacf76641e5da
WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT s_2.y AS X0, r_0.x AS X1 FROM s AS s_2 INNER JOIN r AS r_1 on s_2.x = r_1.y INNER JOIN r AS r_0 on r_1.x = r_0.y )), p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1 FROM p12 AS p12_4 INNER JOIN r AS r_3 ON r_3.y = p12_4.X1 INNER JOIN r AS r_2 ON r_2.y = r_3.x INNER JOIN r AS r_1 ON r_1.y = r_2.x INNER JOIN s as s_0 ON s_0.y = r_1.x UNION (SELECT a_0.x AS X0, p12_3.X0 AS X1 FROM a AS a_0 INNER JOIN r AS r_1 ON a_0.x = r_1.x INNER JOIN r AS r_2 ON r_1.y = r_2.x INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...

------------> using sink uuid: 0d0314c3_4d7c_4ca5_a9e4_8923abb2f4ef

Adding statistics for table s number 5 
Adding statistics for table a number 5 
Adding statistics for table b number 5 
Adding statistics for table r number 5 
Adding statistics for table t number 5 
sql argument: WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1
             FROM r AS r_0
                      INNER JOIN b AS b_1 ON r_0.y = b_1.x
             UNION
             (SELECT s_2.y AS X0, r_0.x AS X1
              FROM s AS s_2
                       INNER JOIN r AS r_1 on s_2.x = r_1.y
                       INNER JOIN r AS r_0 on r_1.x = r_0.y
             )),
     p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1
            FROM p12 AS p12_4
                INNER JOIN r AS r_3 ON r_3.y = p12_4.X1
                INNER JOIN r AS r_2 ON r_2.y = r_3.x
                INNER JOIN r AS r_1 ON r_1.y = r_2.x
                INNER JOIN s as s_0 ON s_0.y = r_1.x
            UNION
            (SELECT a_0.x AS X0, p12_3.X0 AS X1
            FROM a AS a_0
                     INNER JOIN r AS r_1 ON a_0.x = r_1.x
                     INNER JOIN r AS r_2 ON r_1.y = r_2.x
                     INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalProject(X0=[$8], X1=[$0])
   :  +- LogicalJoin(condition=[=($9, $6)], joinType=[inner])
   :     :- LogicalJoin(condition=[=($7, $4)], joinType=[inner])
   :     :  :- LogicalJoin(condition=[=($5, $2)], joinType=[inner])
   :     :  :  :- LogicalJoin(condition=[=($3, $1)], joinType=[inner])
   :     :  :  :  :- LogicalUnion(all=[false])
   :     :  :  :  :  :- LogicalProject(X0=[$1], X1=[$0])
   :     :  :  :  :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :     :  :  :  :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :     :  :  :  :  +- LogicalProject(X0=[$1], X1=[$4])
   :     :  :  :  :     +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
   :     :  :  :  :        :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
   :     :  :  :  :        :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$5])
      +- LogicalJoin(condition=[=($4, $6)], joinType=[inner])
         :- LogicalJoin(condition=[=($2, $3)], joinType=[inner])
         :  :- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :  :  :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         +- LogicalUnion(all=[false])
            :- LogicalProject(X0=[$1], X1=[$0])
            :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
            :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
            :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
            +- LogicalProject(X0=[$1], X1=[$4])
               +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
                  :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
                  :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
                  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
                  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 34070.37215974037, cumulative cost = {5.078742322832537E7 rows, 2.6765364600731173E9 cpu, 6.09074928E8 io, 3.519282157360017E8 network, 1.538402018618865E8 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 34070.37215974037, cumulative cost = {5.0753352856165625E7 rows, 2.6759913341185613E9 cpu, 6.09074928E8 io, 3.519282157360017E8 network, 1.516596980436631E8 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 34070.37215974037, cumulative cost = {5.071928248400588E7 rows, 2.669994948618447E9 cpu, 6.09074928E8 io, 3.511105268041679E8 network, 1.516596980436631E8 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 187954.5082150499, cumulative cost = {5.068521211184614E7 rows, 2.666987676487006E9 cpu, 6.09074928E8 io, 3.511105268041679E8 network, 1.4947919422543973E8 memory}
         :- Calc(select=[x000 AS X0, X0 AS X1]): rowcount = 81094.7509057499, cumulative cost = {2.8185652542006496E7 rows, 1.5668072051229396E9 cpu, 3.32220108E8 io, 2.0848646537483996E8 network, 8.587522756271987E7 memory}
         :  +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[X0, X1, y, x000], build=[left]): rowcount = 81094.7509057499, cumulative cost = {2.8104557791100748E7 rows, 1.5668072051229396E9 cpu, 3.32220108E8 io, 2.0848646537483996E8 network, 8.587522756271987E7 memory}
         :     :- Exchange(distribution=[hash[X1]]): rowcount = 134878.5470799993, cumulative cost = {1.3038856400819996E7 rows, 5.489769892362998E8 cpu, 1.66112196E8 io, 7.015317225983997E7 network, 3.665659602623991E7 memory}
         :     :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 134878.5470799993, cumulative cost = {1.2903977853739997E7 rows, 5.263173933268599E8 cpu, 1.66112196E8 io, 6.691608712991998E7 network, 3.665659602623991E7 memory}
         :     :     +- Exchange(distribution=[hash[X0, X1]]): rowcount = 134878.5470799993, cumulative cost = {1.2769099306659998E7 rows, 5.241593365735799E8 cpu, 1.66112196E8 io, 6.691608712991998E7 network, 2.8024369013119955E7 memory}
         :     :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 134878.5470799993, cumulative cost = {1.263422075958E7 rows, 5.004207122875E8 cpu, 1.66112196E8 io, 6.3679002E7 network, 2.8024369013119955E7 memory}
         :     :           +- Union(all=[true], union=[X0, X1]): rowcount = 744078.4874999999, cumulative cost = {1.24993422125E7 rows, 4.885154564875E8 cpu, 1.66112196E8 io, 6.3679002E7 network, 1.9392142E7 memory}
         :     :              :- Calc(select=[y AS X0, x AS X1]): rowcount = 346111.64999999997, cumulative cost = {2999991.3 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :     :              :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 346111.64999999997, cumulative cost = {2653879.65 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :     :              :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :     :              :     +- Exchange(distribution=[broadcast]): rowcount = 357.0, cumulative cost = {714.0 rows, 57120.0 cpu, 4284.0 io, 4284.0 network, 0.0 memory}
         :     :              :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 357.0, cumulative cost = {357.0 rows, 0.0 cpu, 4284.0 io, 0.0 network, 0.0 memory}
         :     :              +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 397966.83749999997, cumulative cost = {8755272.425 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
         :     :                 +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 397966.83749999997, cumulative cost = {8357305.5875 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
         :     :                    :- Exchange(distribution=[hash[y]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
         :     :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :     :                    +- Exchange(distribution=[hash[x]]): rowcount = 346058.25, cumulative cost = {3345230.75 rows, 6.0445E7 cpu, 5.536932E7 io, 8305422.0 network, 28.0 memory}
         :     :                       +- Calc(select=[x, y0]): rowcount = 346058.25, cumulative cost = {2999172.5 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
         :     :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 346058.25, cumulative cost = {2653114.25 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
         :     :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :     :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :     :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :     +- Exchange(distribution=[hash[y]]): rowcount = 405753.125625, cumulative cost = {1.4984606639375001E7 rows, 1.013505162505E9 cpu, 1.66107912E8 io, 1.38333293115E8 network, 4.16654329E7 memory}
         :        +- Calc(select=[y, x00 AS x000]): rowcount = 405753.125625, cumulative cost = {1.4578853513750002E7 rows, 9.453386374E8 cpu, 1.66107912E8 io, 1.285952181E8 network, 4.16654329E7 memory}
         :           +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x00], build=[right]): rowcount = 405753.125625, cumulative cost = {1.4173100388125002E7 rows, 9.453386374E8 cpu, 1.66107912E8 io, 1.285952181E8 network, 4.16654329E7 memory}
         :              :- Exchange(distribution=[hash[x]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :              +- Exchange(distribution=[hash[y]]): rowcount = 397966.83749999997, cumulative cost = {9153239.262500001 rows, 5.361133987E8 cpu, 1.10738616E8 io, 7.32259221E7 network, 1.937929E7 memory}
         :                 +- Calc(select=[y, x0 AS x00]): rowcount = 397966.83749999997, cumulative cost = {8755272.425 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
         :                    +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x0], build=[right]): rowcount = 397966.83749999997, cumulative cost = {8357305.5875 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
         :                       :- Exchange(distribution=[hash[x]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
         :                       :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :                       +- Exchange(distribution=[hash[y]]): rowcount = 346058.25, cumulative cost = {3345230.75 rows, 6.0445E7 cpu, 5.536932E7 io, 8305422.0 network, 28.0 memory}
         :                          +- Calc(select=[y, x0]): rowcount = 346058.25, cumulative cost = {2999172.5 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
         :                             +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, x0, y0], build=[right]): rowcount = 346058.25, cumulative cost = {2653114.25 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
         :                                :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :                                +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                                   +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x0 AS X0, X0 AS X1]): rowcount = 106859.7573093, cumulative cost = {2.2311605061624594E7 rows, 1.099992516855852E9 cpu, 2.7685482E8 io, 1.4262406142932796E8 network, 6.360396666271987E7 memory}
            +- HashJoin(joinType=[InnerJoin], where=[=(y, x)], select=[x, X0, y, x0], build=[right]): rowcount = 106859.7573093, cumulative cost = {2.2204745304315295E7 rows, 1.099992516855852E9 cpu, 2.7685482E8 io, 1.4262406142932796E8 network, 6.360396666271987E7 memory}
               :- Exchange(distribution=[hash[x]]): rowcount = 366289.88206199993, cumulative cost = {1.8751834047005996E7 rows, 1.0176342217993559E9 cpu, 2.21481492E8 io, 1.3431342542932796E8 network, 4.420979466271987E7 memory}
               :  +- Calc(select=[x, X0]): rowcount = 366289.88206199993, cumulative cost = {1.8385544164943997E7 rows, 9.560975216129398E8 cpu, 2.21481492E8 io, 1.2552246825983997E8 network, 4.420979466271987E7 memory}
               :     +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[x, y, X0, X1], build=[right]): rowcount = 366289.88206199993, cumulative cost = {1.8019254282881998E7 rows, 9.560975216129398E8 cpu, 2.21481492E8 io, 1.2552246825983997E8 network, 4.420979466271987E7 memory}
               :        :- Exchange(distribution=[hash[y]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
               :        :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
               :        +- Exchange(distribution=[hash[X1]]): rowcount = 134878.5470799993, cumulative cost = {1.3038856400819996E7 rows, 5.489769892362998E8 cpu, 1.66112196E8 io, 7.015317225983997E7 network, 3.665659602623991E7 memory}
               :           +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 134878.5470799993, cumulative cost = {1.2903977853739997E7 rows, 5.263173933268599E8 cpu, 1.66112196E8 io, 6.691608712991998E7 network, 3.665659602623991E7 memory}
               :              +- Exchange(distribution=[hash[X0, X1]]): rowcount = 134878.5470799993, cumulative cost = {1.2769099306659998E7 rows, 5.241593365735799E8 cpu, 1.66112196E8 io, 6.691608712991998E7 network, 2.8024369013119955E7 memory}
               :                 +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 134878.5470799993, cumulative cost = {1.263422075958E7 rows, 5.004207122875E8 cpu, 1.66112196E8 io, 6.3679002E7 network, 2.8024369013119955E7 memory}
               :                    +- Union(all=[true], union=[X0, X1]): rowcount = 744078.4874999999, cumulative cost = {1.24993422125E7 rows, 4.885154564875E8 cpu, 1.66112196E8 io, 6.3679002E7 network, 1.9392142E7 memory}
               :                       :- Calc(select=[y AS X0, x AS X1]): rowcount = 346111.64999999997, cumulative cost = {2999991.3 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
               :                       :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 346111.64999999997, cumulative cost = {2653879.65 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
               :                       :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
               :                       :     +- Exchange(distribution=[broadcast]): rowcount = 357.0, cumulative cost = {714.0 rows, 57120.0 cpu, 4284.0 io, 4284.0 network, 0.0 memory}
               :                       :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 357.0, cumulative cost = {357.0 rows, 0.0 cpu, 4284.0 io, 0.0 network, 0.0 memory}
               :                       +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 397966.83749999997, cumulative cost = {8755272.425 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
               :                          +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 397966.83749999997, cumulative cost = {8357305.5875 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
               :                             :- Exchange(distribution=[hash[y]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
               :                             :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
               :                             +- Exchange(distribution=[hash[x]]): rowcount = 346058.25, cumulative cost = {3345230.75 rows, 6.0445E7 cpu, 5.536932E7 io, 8305422.0 network, 28.0 memory}
               :                                +- Calc(select=[x, y0]): rowcount = 346058.25, cumulative cost = {2999172.5 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
               :                                   +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 346058.25, cumulative cost = {2653114.25 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
               :                                      :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
               :                                      +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
               :                                         +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[hash[y]]): rowcount = 346108.5, cumulative cost = {3346051.5 rows, 7.6659108E7 cpu, 5.5373328E7 io, 8310636.0 network, 12096.0 memory}
                  +- Calc(select=[y, x0]): rowcount = 346108.5, cumulative cost = {2999943.0 rows, 1.851288E7 cpu, 5.5373328E7 io, 4032.0 network, 12096.0 memory}
                     +- HashJoin(joinType=[InnerJoin], where=[=(x0, x)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 346108.5, cumulative cost = {2653834.5 rows, 1.851288E7 cpu, 5.5373328E7 io, 4032.0 network, 12096.0 memory}
                        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
                        +- Exchange(distribution=[broadcast]): rowcount = 336.0, cumulative cost = {672.0 rows, 53760.0 cpu, 4032.0 io, 4032.0 network, 0.0 memory}
                           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 336.0, cumulative cost = {336.0 rows, 0.0 cpu, 4032.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[0,1,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[x000 AS X0, X0 AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[X0, X1, y, x000], build=[left])\n:     :- [#1] Exchange(distribution=[hash[X1]])\n:     +- [#2] Exchange(distribution=[hash[y]])\n+- Calc(select=[x0 AS X0, X0 AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(y = x)], select=[x, X0, y, x0], build=[right])\n      :- [#3] Exchange(distribution=[hash[x]])\n      +- [#4] Exchange(distribution=[hash[y]])\n])
         :- Exchange(distribution=[hash[X1]])(reuse_id=[3])
         :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
         :     +- Exchange(distribution=[hash[X0, X1]])
         :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
         :           +- MultipleInput(readOrder=[1,0,2,1], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[y AS X0, x AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:     :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- Calc(select=[y0 AS X0, x AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])\n      :- [#3] Exchange(distribution=[hash[y]])\n      +- [#4] Exchange(distribution=[hash[x]])\n])
         :              :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :              :- Exchange(distribution=[broadcast])
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :              :- Exchange(distribution=[hash[y]])
         :              :  +- Reused(reference_id=[1])
         :              +- Exchange(distribution=[hash[x]])
         :                 +- Calc(select=[x, y0])
         :                    +- NestedLoopJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])
         :                       :- Reused(reference_id=[1])
         :                       +- Exchange(distribution=[broadcast])(reuse_id=[2])
         :                          +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
         :- Exchange(distribution=[hash[y]])
         :  +- Calc(select=[y, x00 AS x000])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x00], build=[right])
         :        :- Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Exchange(distribution=[hash[y]])
         :           +- Calc(select=[y, x0 AS x00])
         :              +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x0], build=[right])
         :                 :- Exchange(distribution=[hash[x]])
         :                 :  +- Reused(reference_id=[1])
         :                 +- Exchange(distribution=[hash[y]])
         :                    +- Calc(select=[y, x0])
         :                       +- NestedLoopJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, x0, y0], build=[right])
         :                          :- Reused(reference_id=[1])
         :                          +- Reused(reference_id=[2])
         :- Exchange(distribution=[hash[x]])
         :  +- Calc(select=[x, X0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[x, y, X0, X1], build=[right])
         :        :- Exchange(distribution=[hash[y]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Reused(reference_id=[3])
         +- Exchange(distribution=[hash[y]])
            +- Calc(select=[y, x0])
               +- HashJoin(joinType=[InnerJoin], where=[(x0 = x)], select=[x, y, x0], isBroadcast=[true], build=[right])
                  :- Reused(reference_id=[1])
                  +- Exchange(distribution=[broadcast])
                     +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])

Job has been submitted with JobID 05c595c37857abd3663503fe8f603ce5
WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT s_2.y AS X0, r_0.x AS X1 FROM s AS s_2 INNER JOIN r AS r_1 on s_2.x = r_1.y INNER JOIN r AS r_0 on r_1.x = r_0.y )), p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1 FROM p12 AS p12_4 INNER JOIN r AS r_3 ON r_3.y = p12_4.X1 INNER JOIN r AS r_2 ON r_2.y = r_3.x INNER JOIN r AS r_1 ON r_1.y = r_2.x INNER JOIN s as s_0 ON s_0.y = r_1.x UNION (SELECT a_0.x AS X0, p12_3.X0 AS X1 FROM a AS a_0 INNER JOIN r AS r_1 ON a_0.x = r_1.x INNER JOIN r AS r_2 ON r_1.y = r_2.x INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...

------------> using sink uuid: ad089994_686d_45d9_b7ef_872fe0a79f45

Adding statistics for table s number 7 
Adding statistics for table a number 7 
Adding statistics for table b number 7 
Adding statistics for table r number 7 
Adding statistics for table t number 7 
sql argument: WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1
             FROM r AS r_0
                      INNER JOIN b AS b_1 ON r_0.y = b_1.x
             UNION
             (SELECT s_2.y AS X0, r_0.x AS X1
              FROM s AS s_2
                       INNER JOIN r AS r_1 on s_2.x = r_1.y
                       INNER JOIN r AS r_0 on r_1.x = r_0.y
             )),
     p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1
            FROM p12 AS p12_4
                INNER JOIN r AS r_3 ON r_3.y = p12_4.X1
                INNER JOIN r AS r_2 ON r_2.y = r_3.x
                INNER JOIN r AS r_1 ON r_1.y = r_2.x
                INNER JOIN s as s_0 ON s_0.y = r_1.x
            UNION
            (SELECT a_0.x AS X0, p12_3.X0 AS X1
            FROM a AS a_0
                     INNER JOIN r AS r_1 ON a_0.x = r_1.x
                     INNER JOIN r AS r_2 ON r_1.y = r_2.x
                     INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalProject(X0=[$8], X1=[$0])
   :  +- LogicalJoin(condition=[=($9, $6)], joinType=[inner])
   :     :- LogicalJoin(condition=[=($7, $4)], joinType=[inner])
   :     :  :- LogicalJoin(condition=[=($5, $2)], joinType=[inner])
   :     :  :  :- LogicalJoin(condition=[=($3, $1)], joinType=[inner])
   :     :  :  :  :- LogicalUnion(all=[false])
   :     :  :  :  :  :- LogicalProject(X0=[$1], X1=[$0])
   :     :  :  :  :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :     :  :  :  :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :     :  :  :  :  +- LogicalProject(X0=[$1], X1=[$4])
   :     :  :  :  :     +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
   :     :  :  :  :        :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
   :     :  :  :  :        :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$5])
      +- LogicalJoin(condition=[=($4, $6)], joinType=[inner])
         :- LogicalJoin(condition=[=($2, $3)], joinType=[inner])
         :  :- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :  :  :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         +- LogicalUnion(all=[false])
            :- LogicalProject(X0=[$1], X1=[$0])
            :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
            :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
            :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
            +- LogicalProject(X0=[$1], X1=[$4])
               +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
                  :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
                  :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
                  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
                  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 94661.99978162195, cumulative cost = {1.4110860038951352E8 rows, 7.436472461903848E9 cpu, 1.692285912E9 io, 9.778074315402737E8 network, 4.27391124176841E8 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 94661.99978162195, cumulative cost = {1.410139383897319E8 rows, 7.434957869907342E9 cpu, 1.692285912E9 io, 9.778074315402737E8 network, 4.2133275619081724E8 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 94661.99978162195, cumulative cost = {1.409192763899503E8 rows, 7.418297357945777E9 cpu, 1.692285912E9 io, 9.755355435455147E8 network, 4.2133275619081724E8 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 522217.647995997, cumulative cost = {1.408246143901687E8 rows, 7.409941875577841E9 cpu, 1.692285912E9 io, 9.755355435455147E8 network, 4.1527438820479345E8 memory}
         :- Calc(select=[x000 AS X0, X0 AS X1]): rowcount = 225318.10511282345, cumulative cost = {7.831206441173425E7 rows, 4.353259023198794E9 cpu, 9.23060508E8 io, 5.792689356001035E8 network, 2.3858465178239673E8 memory}
         :  +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[X0, X1, y, x000], build=[left]): rowcount = 225318.10511282345, cumulative cost = {7.808674630662143E7 rows, 4.353259023198794E9 cpu, 9.23060508E8 io, 5.792689356001035E8 network, 2.3858465178239673E8 memory}
         :     :- Exchange(distribution=[hash[X1]]): rowcount = 374745.2392521563, cumulative cost = {3.622705738700863E7 rows, 1.5252422625007763E9 cpu, 4.61533644E8 io, 1.949132010841035E8 network, 1.01832565024276E8 memory}
         :     :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 374745.2392521563, cumulative cost = {3.585231214775647E7 rows, 1.4622850623064141E9 cpu, 4.61533644E8 io, 1.8591931534205174E8 network, 1.01832565024276E8 memory}
         :     :     +- Exchange(distribution=[hash[X0, X1]]): rowcount = 374745.2392521563, cumulative cost = {3.5477566908504315E7 rows, 1.4562891384783797E9 cpu, 4.61533644E8 io, 1.8591931534205174E8 network, 7.7848869712138E7 memory}
         :     :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 374745.2392521563, cumulative cost = {3.510282166925216E7 rows, 1.3903339763700001E9 cpu, 4.61533644E8 io, 1.769254296E8 network, 7.7848869712138E7 memory}
         :     :           +- Union(all=[true], union=[X0, X1]): rowcount = 2067340.41, cumulative cost = {3.472807643E7 rows, 1.3572565298100002E9 cpu, 4.61533644E8 io, 1.769254296E8 network, 5.38651744E7 memory}
         :     :              :- Calc(select=[y AS X0, x AS X1]): rowcount = 961599.0, cumulative cost = {8334423.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :     :              :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 961599.0, cumulative cost = {7372824.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :     :              :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :     :              :     +- Exchange(distribution=[broadcast]): rowcount = 565.0, cumulative cost = {1130.0 rows, 90400.0 cpu, 6780.0 io, 6780.0 network, 0.0 memory}
         :     :              :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 565.0, cumulative cost = {565.0 rows, 0.0 cpu, 6780.0 io, 0.0 network, 0.0 memory}
         :     :              +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 1105741.41, cumulative cost = {2.432631302E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
         :     :                 +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 1105741.41, cumulative cost = {2.322057161E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
         :     :                    :- Exchange(distribution=[hash[y]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
         :     :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :     :                    +- Exchange(distribution=[hash[x]]): rowcount = 961514.3999999999, cumulative cost = {9294640.200000001 rows, 1.679446742E8 cpu, 1.53842304E8 io, 2.3076369599999998E7 network, 28.0 memory}
         :     :                       +- Calc(select=[x, y0]): rowcount = 961514.3999999999, cumulative cost = {8333125.800000001 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
         :     :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 961514.3999999999, cumulative cost = {7371611.4 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
         :     :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :     :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :     :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :     +- Exchange(distribution=[hash[y]]): rowcount = 1127375.4615, cumulative cost = {4.163437081449999E7 rows, 2.8159997950920005E9 cpu, 4.61526864E8 io, 3.84355734516E8 network, 1.1576635335999998E8 memory}
         :        +- Calc(select=[y, x00 AS x000]): rowcount = 1127375.4615, cumulative cost = {4.050699535299999E7 rows, 2.6266007175600004E9 cpu, 4.61526864E8 io, 3.5729872344E8 network, 1.1576635335999998E8 memory}
         :           +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x00], build=[right]): rowcount = 1127375.4615, cumulative cost = {3.9379619891499996E7 rows, 2.6266007175600004E9 cpu, 4.61526864E8 io, 3.5729872344E8 network, 1.1576635335999998E8 memory}
         :              :- Exchange(distribution=[hash[x]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :              +- Exchange(distribution=[hash[y]]): rowcount = 1105741.41, cumulative cost = {2.543205443E7 rows, 1.4895780662800002E9 cpu, 3.07684584E8 io, 2.0345644344E8 network, 5.38448344E7 memory}
         :                 +- Calc(select=[y, x0 AS x00]): rowcount = 1105741.41, cumulative cost = {2.432631302E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
         :                    +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x0], build=[right]): rowcount = 1105741.41, cumulative cost = {2.322057161E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
         :                       :- Exchange(distribution=[hash[x]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
         :                       :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :                       +- Exchange(distribution=[hash[y]]): rowcount = 961514.3999999999, cumulative cost = {9294640.200000001 rows, 1.679446742E8 cpu, 1.53842304E8 io, 2.3076369599999998E7 network, 28.0 memory}
         :                          +- Calc(select=[y, x0]): rowcount = 961514.3999999999, cumulative cost = {8333125.800000001 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
         :                             +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, x0, y0], build=[right]): rowcount = 961514.3999999999, cumulative cost = {7371611.4 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
         :                                :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :                                +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                                   +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x0 AS X0, X0 AS X1]): rowcount = 296899.5428831735, cumulative cost = {6.199033233043844E7 rows, 3.0561606347310505E9 cpu, 7.69225404E8 io, 3.962666079454112E8 network, 1.7668973642239675E8 memory}
            +- HashJoin(joinType=[InnerJoin], where=[=(y, x)], select=[x, X0, y, x0], build=[right]): rowcount = 296899.5428831735, cumulative cost = {6.169343278755527E7 rows, 3.0561606347310505E9 cpu, 7.69225404E8 io, 3.962666079454112E8 network, 1.7668973642239675E8 memory}
               :- Exchange(distribution=[hash[x]]): rowcount = 1017726.0358878234, cumulative cost = {5.21004254946721E7 rows, 2.827394918443948E9 cpu, 6.15375924E8 io, 3.731809059454112E8 network, 1.2281829842239675E8 memory}
               :  +- Calc(select=[x, X0]): rowcount = 1017726.0358878234, cumulative cost = {5.1082699458784275E7 rows, 2.6564169444147935E9 cpu, 6.15375924E8 io, 3.4875548108410347E8 network, 1.2281829842239675E8 memory}
               :     +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[x, y, X0, X1], build=[right]): rowcount = 1017726.0358878234, cumulative cost = {5.006497342289645E7 rows, 2.6564169444147935E9 cpu, 6.15375924E8 io, 3.4875548108410347E8 network, 1.2281829842239675E8 memory}
               :        :- Exchange(distribution=[hash[y]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
               :        :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
               :        +- Exchange(distribution=[hash[X1]]): rowcount = 374745.2392521563, cumulative cost = {3.622705738700863E7 rows, 1.5252422625007763E9 cpu, 4.61533644E8 io, 1.949132010841035E8 network, 1.01832565024276E8 memory}
               :           +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 374745.2392521563, cumulative cost = {3.585231214775647E7 rows, 1.4622850623064141E9 cpu, 4.61533644E8 io, 1.8591931534205174E8 network, 1.01832565024276E8 memory}
               :              +- Exchange(distribution=[hash[X0, X1]]): rowcount = 374745.2392521563, cumulative cost = {3.5477566908504315E7 rows, 1.4562891384783797E9 cpu, 4.61533644E8 io, 1.8591931534205174E8 network, 7.7848869712138E7 memory}
               :                 +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 374745.2392521563, cumulative cost = {3.510282166925216E7 rows, 1.3903339763700001E9 cpu, 4.61533644E8 io, 1.769254296E8 network, 7.7848869712138E7 memory}
               :                    +- Union(all=[true], union=[X0, X1]): rowcount = 2067340.41, cumulative cost = {3.472807643E7 rows, 1.3572565298100002E9 cpu, 4.61533644E8 io, 1.769254296E8 network, 5.38651744E7 memory}
               :                       :- Calc(select=[y AS X0, x AS X1]): rowcount = 961599.0, cumulative cost = {8334423.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
               :                       :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 961599.0, cumulative cost = {7372824.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
               :                       :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
               :                       :     +- Exchange(distribution=[broadcast]): rowcount = 565.0, cumulative cost = {1130.0 rows, 90400.0 cpu, 6780.0 io, 6780.0 network, 0.0 memory}
               :                       :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 565.0, cumulative cost = {565.0 rows, 0.0 cpu, 6780.0 io, 0.0 network, 0.0 memory}
               :                       +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 1105741.41, cumulative cost = {2.432631302E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
               :                          +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 1105741.41, cumulative cost = {2.322057161E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
               :                             :- Exchange(distribution=[hash[y]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
               :                             :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
               :                             +- Exchange(distribution=[hash[x]]): rowcount = 961514.3999999999, cumulative cost = {9294640.200000001 rows, 1.679446742E8 cpu, 1.53842304E8 io, 2.3076369599999998E7 network, 28.0 memory}
               :                                +- Calc(select=[x, y0]): rowcount = 961514.3999999999, cumulative cost = {8333125.800000001 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
               :                                   +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 961514.3999999999, cumulative cost = {7371611.4 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
               :                                      :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
               :                                      +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
               :                                         +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[hash[y]]): rowcount = 961604.25, cumulative cost = {9296107.75 rows, 2.12931074E8 cpu, 1.5384948E8 io, 2.3085702E7 network, 21600.0 memory}
                  +- Calc(select=[y, x0]): rowcount = 961604.25, cumulative cost = {8334503.5 rows, 5.138156E7 cpu, 1.5384948E8 io, 7200.0 network, 21600.0 memory}
                     +- HashJoin(joinType=[InnerJoin], where=[=(x0, x)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 961604.25, cumulative cost = {7372899.25 rows, 5.138156E7 cpu, 1.5384948E8 io, 7200.0 network, 21600.0 memory}
                        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
                        +- Exchange(distribution=[broadcast]): rowcount = 600.0, cumulative cost = {1200.0 rows, 96000.0 cpu, 7200.0 io, 7200.0 network, 0.0 memory}
                           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 600.0, cumulative cost = {600.0 rows, 0.0 cpu, 7200.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[0,1,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[x000 AS X0, X0 AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[X0, X1, y, x000], build=[left])\n:     :- [#1] Exchange(distribution=[hash[X1]])\n:     +- [#2] Exchange(distribution=[hash[y]])\n+- Calc(select=[x0 AS X0, X0 AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(y = x)], select=[x, X0, y, x0], build=[right])\n      :- [#3] Exchange(distribution=[hash[x]])\n      +- [#4] Exchange(distribution=[hash[y]])\n])
         :- Exchange(distribution=[hash[X1]])(reuse_id=[3])
         :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
         :     +- Exchange(distribution=[hash[X0, X1]])
         :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
         :           +- MultipleInput(readOrder=[1,0,2,1], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[y AS X0, x AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:     :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- Calc(select=[y0 AS X0, x AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])\n      :- [#3] Exchange(distribution=[hash[y]])\n      +- [#4] Exchange(distribution=[hash[x]])\n])
         :              :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :              :- Exchange(distribution=[broadcast])
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :              :- Exchange(distribution=[hash[y]])
         :              :  +- Reused(reference_id=[1])
         :              +- Exchange(distribution=[hash[x]])
         :                 +- Calc(select=[x, y0])
         :                    +- NestedLoopJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])
         :                       :- Reused(reference_id=[1])
         :                       +- Exchange(distribution=[broadcast])(reuse_id=[2])
         :                          +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
         :- Exchange(distribution=[hash[y]])
         :  +- Calc(select=[y, x00 AS x000])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x00], build=[right])
         :        :- Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Exchange(distribution=[hash[y]])
         :           +- Calc(select=[y, x0 AS x00])
         :              +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x0], build=[right])
         :                 :- Exchange(distribution=[hash[x]])
         :                 :  +- Reused(reference_id=[1])
         :                 +- Exchange(distribution=[hash[y]])
         :                    +- Calc(select=[y, x0])
         :                       +- NestedLoopJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, x0, y0], build=[right])
         :                          :- Reused(reference_id=[1])
         :                          +- Reused(reference_id=[2])
         :- Exchange(distribution=[hash[x]])
         :  +- Calc(select=[x, X0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[x, y, X0, X1], build=[right])
         :        :- Exchange(distribution=[hash[y]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Reused(reference_id=[3])
         +- Exchange(distribution=[hash[y]])
            +- Calc(select=[y, x0])
               +- HashJoin(joinType=[InnerJoin], where=[(x0 = x)], select=[x, y, x0], isBroadcast=[true], build=[right])
                  :- Reused(reference_id=[1])
                  +- Exchange(distribution=[broadcast])
                     +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])

Job has been submitted with JobID 174de7d5af61b8054318380d1378d39e
WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT s_2.y AS X0, r_0.x AS X1 FROM s AS s_2 INNER JOIN r AS r_1 on s_2.x = r_1.y INNER JOIN r AS r_0 on r_1.x = r_0.y )), p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1 FROM p12 AS p12_4 INNER JOIN r AS r_3 ON r_3.y = p12_4.X1 INNER JOIN r AS r_2 ON r_2.y = r_3.x INNER JOIN r AS r_1 ON r_1.y = r_2.x INNER JOIN s as s_0 ON s_0.y = r_1.x UNION (SELECT a_0.x AS X0, p12_3.X0 AS X1 FROM a AS a_0 INNER JOIN r AS r_1 ON a_0.x = r_1.x INNER JOIN r AS r_2 ON r_1.y = r_2.x INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...
waiting...

------------> using sink uuid: 6a2a410a_2e20_4edf_ab93_f0bf31e04317

Adding statistics for table s number 7 
Adding statistics for table a number 7 
Adding statistics for table b number 7 
Adding statistics for table r number 7 
Adding statistics for table t number 7 
sql argument: WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1
             FROM r AS r_0
                      INNER JOIN b AS b_1 ON r_0.y = b_1.x
             UNION
             (SELECT s_2.y AS X0, r_0.x AS X1
              FROM s AS s_2
                       INNER JOIN r AS r_1 on s_2.x = r_1.y
                       INNER JOIN r AS r_0 on r_1.x = r_0.y
             )),
     p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1
            FROM p12 AS p12_4
                INNER JOIN r AS r_3 ON r_3.y = p12_4.X1
                INNER JOIN r AS r_2 ON r_2.y = r_3.x
                INNER JOIN r AS r_1 ON r_1.y = r_2.x
                INNER JOIN s as s_0 ON s_0.y = r_1.x
            UNION
            (SELECT a_0.x AS X0, p12_3.X0 AS X1
            FROM a AS a_0
                     INNER JOIN r AS r_1 ON a_0.x = r_1.x
                     INNER JOIN r AS r_2 ON r_1.y = r_2.x
                     INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalProject(X0=[$8], X1=[$0])
   :  +- LogicalJoin(condition=[=($9, $6)], joinType=[inner])
   :     :- LogicalJoin(condition=[=($7, $4)], joinType=[inner])
   :     :  :- LogicalJoin(condition=[=($5, $2)], joinType=[inner])
   :     :  :  :- LogicalJoin(condition=[=($3, $1)], joinType=[inner])
   :     :  :  :  :- LogicalUnion(all=[false])
   :     :  :  :  :  :- LogicalProject(X0=[$1], X1=[$0])
   :     :  :  :  :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :     :  :  :  :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :     :  :  :  :  +- LogicalProject(X0=[$1], X1=[$4])
   :     :  :  :  :     +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
   :     :  :  :  :        :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
   :     :  :  :  :        :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$5])
      +- LogicalJoin(condition=[=($4, $6)], joinType=[inner])
         :- LogicalJoin(condition=[=($2, $3)], joinType=[inner])
         :  :- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :  :  :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         +- LogicalUnion(all=[false])
            :- LogicalProject(X0=[$1], X1=[$0])
            :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
            :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
            :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
            +- LogicalProject(X0=[$1], X1=[$4])
               +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
                  :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
                  :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
                  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
                  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 94661.99978162195, cumulative cost = {1.4110860038951352E8 rows, 7.436472461903848E9 cpu, 1.692285912E9 io, 9.778074315402737E8 network, 4.27391124176841E8 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 94661.99978162195, cumulative cost = {1.410139383897319E8 rows, 7.434957869907342E9 cpu, 1.692285912E9 io, 9.778074315402737E8 network, 4.2133275619081724E8 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 94661.99978162195, cumulative cost = {1.409192763899503E8 rows, 7.418297357945777E9 cpu, 1.692285912E9 io, 9.755355435455147E8 network, 4.2133275619081724E8 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 522217.647995997, cumulative cost = {1.408246143901687E8 rows, 7.409941875577841E9 cpu, 1.692285912E9 io, 9.755355435455147E8 network, 4.1527438820479345E8 memory}
         :- Calc(select=[x000 AS X0, X0 AS X1]): rowcount = 225318.10511282345, cumulative cost = {7.831206441173425E7 rows, 4.353259023198794E9 cpu, 9.23060508E8 io, 5.792689356001035E8 network, 2.3858465178239673E8 memory}
         :  +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[X0, X1, y, x000], build=[left]): rowcount = 225318.10511282345, cumulative cost = {7.808674630662143E7 rows, 4.353259023198794E9 cpu, 9.23060508E8 io, 5.792689356001035E8 network, 2.3858465178239673E8 memory}
         :     :- Exchange(distribution=[hash[X1]]): rowcount = 374745.2392521563, cumulative cost = {3.622705738700863E7 rows, 1.5252422625007763E9 cpu, 4.61533644E8 io, 1.949132010841035E8 network, 1.01832565024276E8 memory}
         :     :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 374745.2392521563, cumulative cost = {3.585231214775647E7 rows, 1.4622850623064141E9 cpu, 4.61533644E8 io, 1.8591931534205174E8 network, 1.01832565024276E8 memory}
         :     :     +- Exchange(distribution=[hash[X0, X1]]): rowcount = 374745.2392521563, cumulative cost = {3.5477566908504315E7 rows, 1.4562891384783797E9 cpu, 4.61533644E8 io, 1.8591931534205174E8 network, 7.7848869712138E7 memory}
         :     :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 374745.2392521563, cumulative cost = {3.510282166925216E7 rows, 1.3903339763700001E9 cpu, 4.61533644E8 io, 1.769254296E8 network, 7.7848869712138E7 memory}
         :     :           +- Union(all=[true], union=[X0, X1]): rowcount = 2067340.41, cumulative cost = {3.472807643E7 rows, 1.3572565298100002E9 cpu, 4.61533644E8 io, 1.769254296E8 network, 5.38651744E7 memory}
         :     :              :- Calc(select=[y AS X0, x AS X1]): rowcount = 961599.0, cumulative cost = {8334423.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :     :              :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 961599.0, cumulative cost = {7372824.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :     :              :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :     :              :     +- Exchange(distribution=[broadcast]): rowcount = 565.0, cumulative cost = {1130.0 rows, 90400.0 cpu, 6780.0 io, 6780.0 network, 0.0 memory}
         :     :              :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 565.0, cumulative cost = {565.0 rows, 0.0 cpu, 6780.0 io, 0.0 network, 0.0 memory}
         :     :              +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 1105741.41, cumulative cost = {2.432631302E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
         :     :                 +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 1105741.41, cumulative cost = {2.322057161E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
         :     :                    :- Exchange(distribution=[hash[y]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
         :     :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :     :                    +- Exchange(distribution=[hash[x]]): rowcount = 961514.3999999999, cumulative cost = {9294640.200000001 rows, 1.679446742E8 cpu, 1.53842304E8 io, 2.3076369599999998E7 network, 28.0 memory}
         :     :                       +- Calc(select=[x, y0]): rowcount = 961514.3999999999, cumulative cost = {8333125.800000001 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
         :     :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 961514.3999999999, cumulative cost = {7371611.4 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
         :     :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :     :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :     :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :     +- Exchange(distribution=[hash[y]]): rowcount = 1127375.4615, cumulative cost = {4.163437081449999E7 rows, 2.8159997950920005E9 cpu, 4.61526864E8 io, 3.84355734516E8 network, 1.1576635335999998E8 memory}
         :        +- Calc(select=[y, x00 AS x000]): rowcount = 1127375.4615, cumulative cost = {4.050699535299999E7 rows, 2.6266007175600004E9 cpu, 4.61526864E8 io, 3.5729872344E8 network, 1.1576635335999998E8 memory}
         :           +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x00], build=[right]): rowcount = 1127375.4615, cumulative cost = {3.9379619891499996E7 rows, 2.6266007175600004E9 cpu, 4.61526864E8 io, 3.5729872344E8 network, 1.1576635335999998E8 memory}
         :              :- Exchange(distribution=[hash[x]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :              +- Exchange(distribution=[hash[y]]): rowcount = 1105741.41, cumulative cost = {2.543205443E7 rows, 1.4895780662800002E9 cpu, 3.07684584E8 io, 2.0345644344E8 network, 5.38448344E7 memory}
         :                 +- Calc(select=[y, x0 AS x00]): rowcount = 1105741.41, cumulative cost = {2.432631302E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
         :                    +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x0], build=[right]): rowcount = 1105741.41, cumulative cost = {2.322057161E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
         :                       :- Exchange(distribution=[hash[x]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
         :                       :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :                       +- Exchange(distribution=[hash[y]]): rowcount = 961514.3999999999, cumulative cost = {9294640.200000001 rows, 1.679446742E8 cpu, 1.53842304E8 io, 2.3076369599999998E7 network, 28.0 memory}
         :                          +- Calc(select=[y, x0]): rowcount = 961514.3999999999, cumulative cost = {8333125.800000001 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
         :                             +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, x0, y0], build=[right]): rowcount = 961514.3999999999, cumulative cost = {7371611.4 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
         :                                :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :                                +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                                   +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x0 AS X0, X0 AS X1]): rowcount = 296899.5428831735, cumulative cost = {6.199033233043844E7 rows, 3.0561606347310505E9 cpu, 7.69225404E8 io, 3.962666079454112E8 network, 1.7668973642239675E8 memory}
            +- HashJoin(joinType=[InnerJoin], where=[=(y, x)], select=[x, X0, y, x0], build=[right]): rowcount = 296899.5428831735, cumulative cost = {6.169343278755527E7 rows, 3.0561606347310505E9 cpu, 7.69225404E8 io, 3.962666079454112E8 network, 1.7668973642239675E8 memory}
               :- Exchange(distribution=[hash[x]]): rowcount = 1017726.0358878234, cumulative cost = {5.21004254946721E7 rows, 2.827394918443948E9 cpu, 6.15375924E8 io, 3.731809059454112E8 network, 1.2281829842239675E8 memory}
               :  +- Calc(select=[x, X0]): rowcount = 1017726.0358878234, cumulative cost = {5.1082699458784275E7 rows, 2.6564169444147935E9 cpu, 6.15375924E8 io, 3.4875548108410347E8 network, 1.2281829842239675E8 memory}
               :     +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[x, y, X0, X1], build=[right]): rowcount = 1017726.0358878234, cumulative cost = {5.006497342289645E7 rows, 2.6564169444147935E9 cpu, 6.15375924E8 io, 3.4875548108410347E8 network, 1.2281829842239675E8 memory}
               :        :- Exchange(distribution=[hash[y]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
               :        :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
               :        +- Exchange(distribution=[hash[X1]]): rowcount = 374745.2392521563, cumulative cost = {3.622705738700863E7 rows, 1.5252422625007763E9 cpu, 4.61533644E8 io, 1.949132010841035E8 network, 1.01832565024276E8 memory}
               :           +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 374745.2392521563, cumulative cost = {3.585231214775647E7 rows, 1.4622850623064141E9 cpu, 4.61533644E8 io, 1.8591931534205174E8 network, 1.01832565024276E8 memory}
               :              +- Exchange(distribution=[hash[X0, X1]]): rowcount = 374745.2392521563, cumulative cost = {3.5477566908504315E7 rows, 1.4562891384783797E9 cpu, 4.61533644E8 io, 1.8591931534205174E8 network, 7.7848869712138E7 memory}
               :                 +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 374745.2392521563, cumulative cost = {3.510282166925216E7 rows, 1.3903339763700001E9 cpu, 4.61533644E8 io, 1.769254296E8 network, 7.7848869712138E7 memory}
               :                    +- Union(all=[true], union=[X0, X1]): rowcount = 2067340.41, cumulative cost = {3.472807643E7 rows, 1.3572565298100002E9 cpu, 4.61533644E8 io, 1.769254296E8 network, 5.38651744E7 memory}
               :                       :- Calc(select=[y AS X0, x AS X1]): rowcount = 961599.0, cumulative cost = {8334423.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
               :                       :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 961599.0, cumulative cost = {7372824.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
               :                       :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
               :                       :     +- Exchange(distribution=[broadcast]): rowcount = 565.0, cumulative cost = {1130.0 rows, 90400.0 cpu, 6780.0 io, 6780.0 network, 0.0 memory}
               :                       :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 565.0, cumulative cost = {565.0 rows, 0.0 cpu, 6780.0 io, 0.0 network, 0.0 memory}
               :                       +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 1105741.41, cumulative cost = {2.432631302E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
               :                          +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 1105741.41, cumulative cost = {2.322057161E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
               :                             :- Exchange(distribution=[hash[y]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
               :                             :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
               :                             +- Exchange(distribution=[hash[x]]): rowcount = 961514.3999999999, cumulative cost = {9294640.200000001 rows, 1.679446742E8 cpu, 1.53842304E8 io, 2.3076369599999998E7 network, 28.0 memory}
               :                                +- Calc(select=[x, y0]): rowcount = 961514.3999999999, cumulative cost = {8333125.800000001 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
               :                                   +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 961514.3999999999, cumulative cost = {7371611.4 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
               :                                      :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
               :                                      +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
               :                                         +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[hash[y]]): rowcount = 961604.25, cumulative cost = {9296107.75 rows, 2.12931074E8 cpu, 1.5384948E8 io, 2.3085702E7 network, 21600.0 memory}
                  +- Calc(select=[y, x0]): rowcount = 961604.25, cumulative cost = {8334503.5 rows, 5.138156E7 cpu, 1.5384948E8 io, 7200.0 network, 21600.0 memory}
                     +- HashJoin(joinType=[InnerJoin], where=[=(x0, x)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 961604.25, cumulative cost = {7372899.25 rows, 5.138156E7 cpu, 1.5384948E8 io, 7200.0 network, 21600.0 memory}
                        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
                        +- Exchange(distribution=[broadcast]): rowcount = 600.0, cumulative cost = {1200.0 rows, 96000.0 cpu, 7200.0 io, 7200.0 network, 0.0 memory}
                           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 600.0, cumulative cost = {600.0 rows, 0.0 cpu, 7200.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[0,1,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[x000 AS X0, X0 AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[X0, X1, y, x000], build=[left])\n:     :- [#1] Exchange(distribution=[hash[X1]])\n:     +- [#2] Exchange(distribution=[hash[y]])\n+- Calc(select=[x0 AS X0, X0 AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(y = x)], select=[x, X0, y, x0], build=[right])\n      :- [#3] Exchange(distribution=[hash[x]])\n      +- [#4] Exchange(distribution=[hash[y]])\n])
         :- Exchange(distribution=[hash[X1]])(reuse_id=[3])
         :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
         :     +- Exchange(distribution=[hash[X0, X1]])
         :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
         :           +- MultipleInput(readOrder=[1,0,2,1], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[y AS X0, x AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:     :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- Calc(select=[y0 AS X0, x AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])\n      :- [#3] Exchange(distribution=[hash[y]])\n      +- [#4] Exchange(distribution=[hash[x]])\n])
         :              :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :              :- Exchange(distribution=[broadcast])
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :              :- Exchange(distribution=[hash[y]])
         :              :  +- Reused(reference_id=[1])
         :              +- Exchange(distribution=[hash[x]])
         :                 +- Calc(select=[x, y0])
         :                    +- NestedLoopJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])
         :                       :- Reused(reference_id=[1])
         :                       +- Exchange(distribution=[broadcast])(reuse_id=[2])
         :                          +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
         :- Exchange(distribution=[hash[y]])
         :  +- Calc(select=[y, x00 AS x000])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x00], build=[right])
         :        :- Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Exchange(distribution=[hash[y]])
         :           +- Calc(select=[y, x0 AS x00])
         :              +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x0], build=[right])
         :                 :- Exchange(distribution=[hash[x]])
         :                 :  +- Reused(reference_id=[1])
         :                 +- Exchange(distribution=[hash[y]])
         :                    +- Calc(select=[y, x0])
         :                       +- NestedLoopJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, x0, y0], build=[right])
         :                          :- Reused(reference_id=[1])
         :                          +- Reused(reference_id=[2])
         :- Exchange(distribution=[hash[x]])
         :  +- Calc(select=[x, X0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[x, y, X0, X1], build=[right])
         :        :- Exchange(distribution=[hash[y]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Reused(reference_id=[3])
         +- Exchange(distribution=[hash[y]])
            +- Calc(select=[y, x0])
               +- HashJoin(joinType=[InnerJoin], where=[(x0 = x)], select=[x, y, x0], isBroadcast=[true], build=[right])
                  :- Reused(reference_id=[1])
                  +- Exchange(distribution=[broadcast])
                     +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])

Job has been submitted with JobID 85ccbe3baad38c8dfb4490e43e308dba
WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT s_2.y AS X0, r_0.x AS X1 FROM s AS s_2 INNER JOIN r AS r_1 on s_2.x = r_1.y INNER JOIN r AS r_0 on r_1.x = r_0.y )), p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1 FROM p12 AS p12_4 INNER JOIN r AS r_3 ON r_3.y = p12_4.X1 INNER JOIN r AS r_2 ON r_2.y = r_3.x INNER JOIN r AS r_1 ON r_1.y = r_2.x INNER JOIN s as s_0 ON s_0.y = r_1.x UNION (SELECT a_0.x AS X0, p12_3.X0 AS X1 FROM a AS a_0 INNER JOIN r AS r_1 ON a_0.x = r_1.x INNER JOIN r AS r_2 ON r_1.y = r_2.x INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...
waiting...

------------> using sink uuid: 56e49afa_1f87_4727_a8fc_b727944e2300

Adding statistics for table s number 7 
Adding statistics for table a number 7 
Adding statistics for table b number 7 
Adding statistics for table r number 7 
Adding statistics for table t number 7 
sql argument: WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1
             FROM r AS r_0
                      INNER JOIN b AS b_1 ON r_0.y = b_1.x
             UNION
             (SELECT s_2.y AS X0, r_0.x AS X1
              FROM s AS s_2
                       INNER JOIN r AS r_1 on s_2.x = r_1.y
                       INNER JOIN r AS r_0 on r_1.x = r_0.y
             )),
     p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1
            FROM p12 AS p12_4
                INNER JOIN r AS r_3 ON r_3.y = p12_4.X1
                INNER JOIN r AS r_2 ON r_2.y = r_3.x
                INNER JOIN r AS r_1 ON r_1.y = r_2.x
                INNER JOIN s as s_0 ON s_0.y = r_1.x
            UNION
            (SELECT a_0.x AS X0, p12_3.X0 AS X1
            FROM a AS a_0
                     INNER JOIN r AS r_1 ON a_0.x = r_1.x
                     INNER JOIN r AS r_2 ON r_1.y = r_2.x
                     INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalProject(X0=[$8], X1=[$0])
   :  +- LogicalJoin(condition=[=($9, $6)], joinType=[inner])
   :     :- LogicalJoin(condition=[=($7, $4)], joinType=[inner])
   :     :  :- LogicalJoin(condition=[=($5, $2)], joinType=[inner])
   :     :  :  :- LogicalJoin(condition=[=($3, $1)], joinType=[inner])
   :     :  :  :  :- LogicalUnion(all=[false])
   :     :  :  :  :  :- LogicalProject(X0=[$1], X1=[$0])
   :     :  :  :  :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :     :  :  :  :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :     :  :  :  :  +- LogicalProject(X0=[$1], X1=[$4])
   :     :  :  :  :     +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
   :     :  :  :  :        :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
   :     :  :  :  :        :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$5])
      +- LogicalJoin(condition=[=($4, $6)], joinType=[inner])
         :- LogicalJoin(condition=[=($2, $3)], joinType=[inner])
         :  :- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :  :  :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         +- LogicalUnion(all=[false])
            :- LogicalProject(X0=[$1], X1=[$0])
            :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
            :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
            :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
            +- LogicalProject(X0=[$1], X1=[$4])
               +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
                  :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
                  :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
                  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
                  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 94661.99978162195, cumulative cost = {1.4110860038951352E8 rows, 7.436472461903848E9 cpu, 1.692285912E9 io, 9.778074315402737E8 network, 4.27391124176841E8 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 94661.99978162195, cumulative cost = {1.410139383897319E8 rows, 7.434957869907342E9 cpu, 1.692285912E9 io, 9.778074315402737E8 network, 4.2133275619081724E8 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 94661.99978162195, cumulative cost = {1.409192763899503E8 rows, 7.418297357945777E9 cpu, 1.692285912E9 io, 9.755355435455147E8 network, 4.2133275619081724E8 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 522217.647995997, cumulative cost = {1.408246143901687E8 rows, 7.409941875577841E9 cpu, 1.692285912E9 io, 9.755355435455147E8 network, 4.1527438820479345E8 memory}
         :- Calc(select=[x000 AS X0, X0 AS X1]): rowcount = 225318.10511282345, cumulative cost = {7.831206441173425E7 rows, 4.353259023198794E9 cpu, 9.23060508E8 io, 5.792689356001035E8 network, 2.3858465178239673E8 memory}
         :  +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[X0, X1, y, x000], build=[left]): rowcount = 225318.10511282345, cumulative cost = {7.808674630662143E7 rows, 4.353259023198794E9 cpu, 9.23060508E8 io, 5.792689356001035E8 network, 2.3858465178239673E8 memory}
         :     :- Exchange(distribution=[hash[X1]]): rowcount = 374745.2392521563, cumulative cost = {3.622705738700863E7 rows, 1.5252422625007763E9 cpu, 4.61533644E8 io, 1.949132010841035E8 network, 1.01832565024276E8 memory}
         :     :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 374745.2392521563, cumulative cost = {3.585231214775647E7 rows, 1.4622850623064141E9 cpu, 4.61533644E8 io, 1.8591931534205174E8 network, 1.01832565024276E8 memory}
         :     :     +- Exchange(distribution=[hash[X0, X1]]): rowcount = 374745.2392521563, cumulative cost = {3.5477566908504315E7 rows, 1.4562891384783797E9 cpu, 4.61533644E8 io, 1.8591931534205174E8 network, 7.7848869712138E7 memory}
         :     :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 374745.2392521563, cumulative cost = {3.510282166925216E7 rows, 1.3903339763700001E9 cpu, 4.61533644E8 io, 1.769254296E8 network, 7.7848869712138E7 memory}
         :     :           +- Union(all=[true], union=[X0, X1]): rowcount = 2067340.41, cumulative cost = {3.472807643E7 rows, 1.3572565298100002E9 cpu, 4.61533644E8 io, 1.769254296E8 network, 5.38651744E7 memory}
         :     :              :- Calc(select=[y AS X0, x AS X1]): rowcount = 961599.0, cumulative cost = {8334423.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :     :              :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 961599.0, cumulative cost = {7372824.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :     :              :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :     :              :     +- Exchange(distribution=[broadcast]): rowcount = 565.0, cumulative cost = {1130.0 rows, 90400.0 cpu, 6780.0 io, 6780.0 network, 0.0 memory}
         :     :              :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 565.0, cumulative cost = {565.0 rows, 0.0 cpu, 6780.0 io, 0.0 network, 0.0 memory}
         :     :              +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 1105741.41, cumulative cost = {2.432631302E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
         :     :                 +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 1105741.41, cumulative cost = {2.322057161E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
         :     :                    :- Exchange(distribution=[hash[y]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
         :     :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :     :                    +- Exchange(distribution=[hash[x]]): rowcount = 961514.3999999999, cumulative cost = {9294640.200000001 rows, 1.679446742E8 cpu, 1.53842304E8 io, 2.3076369599999998E7 network, 28.0 memory}
         :     :                       +- Calc(select=[x, y0]): rowcount = 961514.3999999999, cumulative cost = {8333125.800000001 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
         :     :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 961514.3999999999, cumulative cost = {7371611.4 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
         :     :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :     :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :     :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :     +- Exchange(distribution=[hash[y]]): rowcount = 1127375.4615, cumulative cost = {4.163437081449999E7 rows, 2.8159997950920005E9 cpu, 4.61526864E8 io, 3.84355734516E8 network, 1.1576635335999998E8 memory}
         :        +- Calc(select=[y, x00 AS x000]): rowcount = 1127375.4615, cumulative cost = {4.050699535299999E7 rows, 2.6266007175600004E9 cpu, 4.61526864E8 io, 3.5729872344E8 network, 1.1576635335999998E8 memory}
         :           +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x00], build=[right]): rowcount = 1127375.4615, cumulative cost = {3.9379619891499996E7 rows, 2.6266007175600004E9 cpu, 4.61526864E8 io, 3.5729872344E8 network, 1.1576635335999998E8 memory}
         :              :- Exchange(distribution=[hash[x]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :              +- Exchange(distribution=[hash[y]]): rowcount = 1105741.41, cumulative cost = {2.543205443E7 rows, 1.4895780662800002E9 cpu, 3.07684584E8 io, 2.0345644344E8 network, 5.38448344E7 memory}
         :                 +- Calc(select=[y, x0 AS x00]): rowcount = 1105741.41, cumulative cost = {2.432631302E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
         :                    +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x0], build=[right]): rowcount = 1105741.41, cumulative cost = {2.322057161E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
         :                       :- Exchange(distribution=[hash[x]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
         :                       :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :                       +- Exchange(distribution=[hash[y]]): rowcount = 961514.3999999999, cumulative cost = {9294640.200000001 rows, 1.679446742E8 cpu, 1.53842304E8 io, 2.3076369599999998E7 network, 28.0 memory}
         :                          +- Calc(select=[y, x0]): rowcount = 961514.3999999999, cumulative cost = {8333125.800000001 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
         :                             +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, x0, y0], build=[right]): rowcount = 961514.3999999999, cumulative cost = {7371611.4 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
         :                                :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :                                +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                                   +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x0 AS X0, X0 AS X1]): rowcount = 296899.5428831735, cumulative cost = {6.199033233043844E7 rows, 3.0561606347310505E9 cpu, 7.69225404E8 io, 3.962666079454112E8 network, 1.7668973642239675E8 memory}
            +- HashJoin(joinType=[InnerJoin], where=[=(y, x)], select=[x, X0, y, x0], build=[right]): rowcount = 296899.5428831735, cumulative cost = {6.169343278755527E7 rows, 3.0561606347310505E9 cpu, 7.69225404E8 io, 3.962666079454112E8 network, 1.7668973642239675E8 memory}
               :- Exchange(distribution=[hash[x]]): rowcount = 1017726.0358878234, cumulative cost = {5.21004254946721E7 rows, 2.827394918443948E9 cpu, 6.15375924E8 io, 3.731809059454112E8 network, 1.2281829842239675E8 memory}
               :  +- Calc(select=[x, X0]): rowcount = 1017726.0358878234, cumulative cost = {5.1082699458784275E7 rows, 2.6564169444147935E9 cpu, 6.15375924E8 io, 3.4875548108410347E8 network, 1.2281829842239675E8 memory}
               :     +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[x, y, X0, X1], build=[right]): rowcount = 1017726.0358878234, cumulative cost = {5.006497342289645E7 rows, 2.6564169444147935E9 cpu, 6.15375924E8 io, 3.4875548108410347E8 network, 1.2281829842239675E8 memory}
               :        :- Exchange(distribution=[hash[y]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
               :        :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
               :        +- Exchange(distribution=[hash[X1]]): rowcount = 374745.2392521563, cumulative cost = {3.622705738700863E7 rows, 1.5252422625007763E9 cpu, 4.61533644E8 io, 1.949132010841035E8 network, 1.01832565024276E8 memory}
               :           +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 374745.2392521563, cumulative cost = {3.585231214775647E7 rows, 1.4622850623064141E9 cpu, 4.61533644E8 io, 1.8591931534205174E8 network, 1.01832565024276E8 memory}
               :              +- Exchange(distribution=[hash[X0, X1]]): rowcount = 374745.2392521563, cumulative cost = {3.5477566908504315E7 rows, 1.4562891384783797E9 cpu, 4.61533644E8 io, 1.8591931534205174E8 network, 7.7848869712138E7 memory}
               :                 +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 374745.2392521563, cumulative cost = {3.510282166925216E7 rows, 1.3903339763700001E9 cpu, 4.61533644E8 io, 1.769254296E8 network, 7.7848869712138E7 memory}
               :                    +- Union(all=[true], union=[X0, X1]): rowcount = 2067340.41, cumulative cost = {3.472807643E7 rows, 1.3572565298100002E9 cpu, 4.61533644E8 io, 1.769254296E8 network, 5.38651744E7 memory}
               :                       :- Calc(select=[y AS X0, x AS X1]): rowcount = 961599.0, cumulative cost = {8334423.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
               :                       :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 961599.0, cumulative cost = {7372824.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
               :                       :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
               :                       :     +- Exchange(distribution=[broadcast]): rowcount = 565.0, cumulative cost = {1130.0 rows, 90400.0 cpu, 6780.0 io, 6780.0 network, 0.0 memory}
               :                       :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 565.0, cumulative cost = {565.0 rows, 0.0 cpu, 6780.0 io, 0.0 network, 0.0 memory}
               :                       +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 1105741.41, cumulative cost = {2.432631302E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
               :                          +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 1105741.41, cumulative cost = {2.322057161E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
               :                             :- Exchange(distribution=[hash[y]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
               :                             :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
               :                             +- Exchange(distribution=[hash[x]]): rowcount = 961514.3999999999, cumulative cost = {9294640.200000001 rows, 1.679446742E8 cpu, 1.53842304E8 io, 2.3076369599999998E7 network, 28.0 memory}
               :                                +- Calc(select=[x, y0]): rowcount = 961514.3999999999, cumulative cost = {8333125.800000001 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
               :                                   +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 961514.3999999999, cumulative cost = {7371611.4 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
               :                                      :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
               :                                      +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
               :                                         +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[hash[y]]): rowcount = 961604.25, cumulative cost = {9296107.75 rows, 2.12931074E8 cpu, 1.5384948E8 io, 2.3085702E7 network, 21600.0 memory}
                  +- Calc(select=[y, x0]): rowcount = 961604.25, cumulative cost = {8334503.5 rows, 5.138156E7 cpu, 1.5384948E8 io, 7200.0 network, 21600.0 memory}
                     +- HashJoin(joinType=[InnerJoin], where=[=(x0, x)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 961604.25, cumulative cost = {7372899.25 rows, 5.138156E7 cpu, 1.5384948E8 io, 7200.0 network, 21600.0 memory}
                        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
                        +- Exchange(distribution=[broadcast]): rowcount = 600.0, cumulative cost = {1200.0 rows, 96000.0 cpu, 7200.0 io, 7200.0 network, 0.0 memory}
                           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 600.0, cumulative cost = {600.0 rows, 0.0 cpu, 7200.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[0,1,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[x000 AS X0, X0 AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[X0, X1, y, x000], build=[left])\n:     :- [#1] Exchange(distribution=[hash[X1]])\n:     +- [#2] Exchange(distribution=[hash[y]])\n+- Calc(select=[x0 AS X0, X0 AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(y = x)], select=[x, X0, y, x0], build=[right])\n      :- [#3] Exchange(distribution=[hash[x]])\n      +- [#4] Exchange(distribution=[hash[y]])\n])
         :- Exchange(distribution=[hash[X1]])(reuse_id=[3])
         :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
         :     +- Exchange(distribution=[hash[X0, X1]])
         :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
         :           +- MultipleInput(readOrder=[1,0,2,1], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[y AS X0, x AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:     :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- Calc(select=[y0 AS X0, x AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])\n      :- [#3] Exchange(distribution=[hash[y]])\n      +- [#4] Exchange(distribution=[hash[x]])\n])
         :              :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :              :- Exchange(distribution=[broadcast])
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :              :- Exchange(distribution=[hash[y]])
         :              :  +- Reused(reference_id=[1])
         :              +- Exchange(distribution=[hash[x]])
         :                 +- Calc(select=[x, y0])
         :                    +- NestedLoopJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])
         :                       :- Reused(reference_id=[1])
         :                       +- Exchange(distribution=[broadcast])(reuse_id=[2])
         :                          +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
         :- Exchange(distribution=[hash[y]])
         :  +- Calc(select=[y, x00 AS x000])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x00], build=[right])
         :        :- Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Exchange(distribution=[hash[y]])
         :           +- Calc(select=[y, x0 AS x00])
         :              +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x0], build=[right])
         :                 :- Exchange(distribution=[hash[x]])
         :                 :  +- Reused(reference_id=[1])
         :                 +- Exchange(distribution=[hash[y]])
         :                    +- Calc(select=[y, x0])
         :                       +- NestedLoopJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, x0, y0], build=[right])
         :                          :- Reused(reference_id=[1])
         :                          +- Reused(reference_id=[2])
         :- Exchange(distribution=[hash[x]])
         :  +- Calc(select=[x, X0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[x, y, X0, X1], build=[right])
         :        :- Exchange(distribution=[hash[y]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Reused(reference_id=[3])
         +- Exchange(distribution=[hash[y]])
            +- Calc(select=[y, x0])
               +- HashJoin(joinType=[InnerJoin], where=[(x0 = x)], select=[x, y, x0], isBroadcast=[true], build=[right])
                  :- Reused(reference_id=[1])
                  +- Exchange(distribution=[broadcast])
                     +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])

Job has been submitted with JobID dd009112e74d045b69d3917c0e8204cc
WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT s_2.y AS X0, r_0.x AS X1 FROM s AS s_2 INNER JOIN r AS r_1 on s_2.x = r_1.y INNER JOIN r AS r_0 on r_1.x = r_0.y )), p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1 FROM p12 AS p12_4 INNER JOIN r AS r_3 ON r_3.y = p12_4.X1 INNER JOIN r AS r_2 ON r_2.y = r_3.x INNER JOIN r AS r_1 ON r_1.y = r_2.x INNER JOIN s as s_0 ON s_0.y = r_1.x UNION (SELECT a_0.x AS X0, p12_3.X0 AS X1 FROM a AS a_0 INNER JOIN r AS r_1 ON a_0.x = r_1.x INNER JOIN r AS r_2 ON r_1.y = r_2.x INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...
waiting...

------------> using sink uuid: 6ab2ff35_29f9_4b21_ae44_e09f8102faaa

Adding statistics for table s number 9 
Adding statistics for table a number 9 
Adding statistics for table b number 9 
Adding statistics for table r number 9 
Adding statistics for table t number 9 
sql argument: WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1
             FROM r AS r_0
                      INNER JOIN b AS b_1 ON r_0.y = b_1.x
             UNION
             (SELECT s_2.y AS X0, r_0.x AS X1
              FROM s AS s_2
                       INNER JOIN r AS r_1 on s_2.x = r_1.y
                       INNER JOIN r AS r_0 on r_1.x = r_0.y
             )),
     p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1
            FROM p12 AS p12_4
                INNER JOIN r AS r_3 ON r_3.y = p12_4.X1
                INNER JOIN r AS r_2 ON r_2.y = r_3.x
                INNER JOIN r AS r_1 ON r_1.y = r_2.x
                INNER JOIN s as s_0 ON s_0.y = r_1.x
            UNION
            (SELECT a_0.x AS X0, p12_3.X0 AS X1
            FROM a AS a_0
                     INNER JOIN r AS r_1 ON a_0.x = r_1.x
                     INNER JOIN r AS r_2 ON r_1.y = r_2.x
                     INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalProject(X0=[$8], X1=[$0])
   :  +- LogicalJoin(condition=[=($9, $6)], joinType=[inner])
   :     :- LogicalJoin(condition=[=($7, $4)], joinType=[inner])
   :     :  :- LogicalJoin(condition=[=($5, $2)], joinType=[inner])
   :     :  :  :- LogicalJoin(condition=[=($3, $1)], joinType=[inner])
   :     :  :  :  :- LogicalUnion(all=[false])
   :     :  :  :  :  :- LogicalProject(X0=[$1], X1=[$0])
   :     :  :  :  :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :     :  :  :  :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :     :  :  :  :  +- LogicalProject(X0=[$1], X1=[$4])
   :     :  :  :  :     +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
   :     :  :  :  :        :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
   :     :  :  :  :        :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$5])
      +- LogicalJoin(condition=[=($4, $6)], joinType=[inner])
         :- LogicalJoin(condition=[=($2, $3)], joinType=[inner])
         :  :- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :  :  :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         +- LogicalUnion(all=[false])
            :- LogicalProject(X0=[$1], X1=[$0])
            :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
            :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
            :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
            +- LogicalProject(X0=[$1], X1=[$4])
               +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
                  :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
                  :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
                  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
                  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 60572.11526244861, cumulative cost = {9.02922779559936E7 rows, 4.75845055108896E9 cpu, 1.082850576E9 io, 6.25676293930597E8 network, 2.7348895396489584E8 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 60572.11526244861, cumulative cost = {9.023170584073114E7 rows, 4.7574813972447605E9 cpu, 1.082850576E9 io, 6.25676293930597E8 network, 2.696123385880991E8 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 60572.11526244861, cumulative cost = {9.01711337254687E7 rows, 4.74682070495857E9 cpu, 1.082850576E9 io, 6.242225631642982E8 network, 2.696123385880991E8 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 334155.49681467295, cumulative cost = {9.011056161020625E7 rows, 4.741474217009535E9 cpu, 1.082850576E9 io, 6.242225631642982E8 network, 2.6573572321130243E8 memory}
         :- Calc(select=[x000 AS X0, X0 AS X1]): rowcount = 144175.22029781347, cumulative cost = {5.0109980246745646E7 rows, 2.785548164870803E9 cpu, 5.90642052E8 io, 3.7065949555230033E8 network, 1.5266788889565122E8 memory}
         :  +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[X0, X1, y, x000], build=[left]): rowcount = 144175.22029781347, cumulative cost = {4.996580502644783E7 rows, 2.785548164870803E9 cpu, 5.90642052E8 io, 3.7065949555230033E8 network, 1.5266788889565122E8 memory}
         :     :- Exchange(distribution=[hash[X1]]): rowcount = 239791.84519375666, cumulative cost = {2.318094978327502E7 rows, 9.759785867672524E8 cpu, 2.95323804E8 io, 1.2472091136930032E8 network, 6.5163853384800844E7 memory}
         :     :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 239791.84519375666, cumulative cost = {2.2941157938081264E7 rows, 9.356935567747014E8 cpu, 2.95323804E8 io, 1.1896590708465016E8 network, 6.5163853384800844E7 memory}
         :     :     +- Exchange(distribution=[hash[X0, X1]]): rowcount = 239791.84519375666, cumulative cost = {2.270136609288751E7 rows, 9.318568872516012E8 cpu, 2.95323804E8 io, 1.1896590708465016E8 network, 4.981717529240042E7 memory}
         :     :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 239791.84519375666, cumulative cost = {2.2461574247693755E7 rows, 8.896535224975001E8 cpu, 2.95323804E8 io, 1.132109028E8 network, 4.981717529240042E7 memory}
         :     :           +- Union(all=[true], union=[X0, X1]): rowcount = 1322849.0175, cumulative cost = {2.22217824025E7 rows, 8.684879382175001E8 cpu, 2.95323804E8 io, 1.132109028E8 network, 3.4470497199999996E7 memory}
         :     :              :- Calc(select=[y AS X0, x AS X1]): rowcount = 615315.75, cumulative cost = {5333199.5 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :     :              :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 615315.75, cumulative cost = {4717883.75 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :     :              :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :     :              :     +- Exchange(distribution=[broadcast]): rowcount = 463.0, cumulative cost = {926.0 rows, 74080.0 cpu, 5556.0 io, 5556.0 network, 0.0 memory}
         :     :              :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 463.0, cumulative cost = {463.0 rows, 0.0 cpu, 5556.0 io, 0.0 network, 0.0 memory}
         :     :              +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 707533.2675, cumulative cost = {1.5565733885E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
         :     :                 +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 707533.2675, cumulative cost = {1.48582006175E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
         :     :                    :- Exchange(distribution=[hash[y]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
         :     :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :     :                    +- Exchange(distribution=[hash[x]]): rowcount = 615246.45, cumulative cost = {5947383.350000001 rows, 1.074632056E8 cpu, 9.8439432E7 io, 1.4765938799999999E7 network, 28.0 memory}
         :     :                       +- Calc(select=[x, y0]): rowcount = 615246.45, cumulative cost = {5332136.9 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
         :     :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 615246.45, cumulative cost = {4716890.45 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
         :     :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :     :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :     :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :     +- Exchange(distribution=[hash[y]]): rowcount = 721376.2901249999, cumulative cost = {2.6640680022875004E7 rows, 1.8018802330210001E9 cpu, 2.95318248E8 io, 2.45938584183E8 network, 7.407569217999999E7 memory}
         :        +- Calc(select=[y, x00 AS x000]): rowcount = 721376.2901249999, cumulative cost = {2.5919303732750002E7 rows, 1.6806890162800002E9 cpu, 2.95318248E8 io, 2.2862555322E8 network, 7.407569217999999E7 memory}
         :           +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x00], build=[right]): rowcount = 721376.2901249999, cumulative cost = {2.5197927442625E7 rows, 1.6806890162800002E9 cpu, 2.95318248E8 io, 2.2862555322E8 network, 7.407569217999999E7 memory}
         :              :- Exchange(distribution=[hash[x]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :              +- Exchange(distribution=[hash[y]]): rowcount = 707533.2675, cumulative cost = {1.62732671525E7 rows, 9.531397581400001E8 cpu, 1.9687884E8 io, 1.3018614522E8 network, 3.4453829199999996E7 memory}
         :                 +- Calc(select=[y, x0 AS x00]): rowcount = 707533.2675, cumulative cost = {1.5565733885E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
         :                    +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x0], build=[right]): rowcount = 707533.2675, cumulative cost = {1.48582006175E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
         :                       :- Exchange(distribution=[hash[x]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
         :                       :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :                       +- Exchange(distribution=[hash[y]]): rowcount = 615246.45, cumulative cost = {5947383.350000001 rows, 1.074632056E8 cpu, 9.8439432E7 io, 1.4765938799999999E7 network, 28.0 memory}
         :                          +- Calc(select=[y, x0]): rowcount = 615246.45, cumulative cost = {5332136.9 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
         :                             +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, x0, y0], build=[right]): rowcount = 615246.45, cumulative cost = {4716890.45 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
         :                                :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :                                +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                                   +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x0 AS X0, X0 AS X1]): rowcount = 189980.2765168595, cumulative cost = {3.966642586664593E7 rows, 1.9555918966419175E9 cpu, 4.92208524E8 io, 2.5356306761199784E8 network, 1.1306783431565121E8 memory}
            +- HashJoin(joinType=[InnerJoin], where=[=(y, x)], select=[x, X0, y, x0], build=[right]): rowcount = 189980.2765168595, cumulative cost = {3.947644559012907E7 rows, 1.9555918966419175E9 cpu, 4.92208524E8 io, 2.5356306761199784E8 network, 1.1306783431565121E8 memory}
               :- Exchange(distribution=[hash[x]]): rowcount = 651215.0767790634, cumulative cost = {3.333787901361221E7 rows, 1.809190046427685E9 cpu, 3.93763212E8 io, 2.3878948121199784E8 network, 7.859219671565121E7 memory}
               :  +- Calc(select=[x, X0]): rowcount = 651215.0767790634, cumulative cost = {3.2686663936833147E7 rows, 1.6997859135288024E9 cpu, 3.93763212E8 io, 2.231603193693003E8 network, 7.859219671565121E7 memory}
               :     +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[x, y, X0, X1], build=[right]): rowcount = 651215.0767790634, cumulative cost = {3.2035448860054083E7 rows, 1.6997859135288024E9 cpu, 3.93763212E8 io, 2.231603193693003E8 network, 7.859219671565121E7 memory}
               :        :- Exchange(distribution=[hash[y]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
               :        :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
               :        +- Exchange(distribution=[hash[X1]]): rowcount = 239791.84519375666, cumulative cost = {2.318094978327502E7 rows, 9.759785867672524E8 cpu, 2.95323804E8 io, 1.2472091136930032E8 network, 6.5163853384800844E7 memory}
               :           +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 239791.84519375666, cumulative cost = {2.2941157938081264E7 rows, 9.356935567747014E8 cpu, 2.95323804E8 io, 1.1896590708465016E8 network, 6.5163853384800844E7 memory}
               :              +- Exchange(distribution=[hash[X0, X1]]): rowcount = 239791.84519375666, cumulative cost = {2.270136609288751E7 rows, 9.318568872516012E8 cpu, 2.95323804E8 io, 1.1896590708465016E8 network, 4.981717529240042E7 memory}
               :                 +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 239791.84519375666, cumulative cost = {2.2461574247693755E7 rows, 8.896535224975001E8 cpu, 2.95323804E8 io, 1.132109028E8 network, 4.981717529240042E7 memory}
               :                    +- Union(all=[true], union=[X0, X1]): rowcount = 1322849.0175, cumulative cost = {2.22217824025E7 rows, 8.684879382175001E8 cpu, 2.95323804E8 io, 1.132109028E8 network, 3.4470497199999996E7 memory}
               :                       :- Calc(select=[y AS X0, x AS X1]): rowcount = 615315.75, cumulative cost = {5333199.5 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
               :                       :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 615315.75, cumulative cost = {4717883.75 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
               :                       :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
               :                       :     +- Exchange(distribution=[broadcast]): rowcount = 463.0, cumulative cost = {926.0 rows, 74080.0 cpu, 5556.0 io, 5556.0 network, 0.0 memory}
               :                       :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 463.0, cumulative cost = {463.0 rows, 0.0 cpu, 5556.0 io, 0.0 network, 0.0 memory}
               :                       +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 707533.2675, cumulative cost = {1.5565733885E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
               :                          +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 707533.2675, cumulative cost = {1.48582006175E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
               :                             :- Exchange(distribution=[hash[y]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
               :                             :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
               :                             +- Exchange(distribution=[hash[x]]): rowcount = 615246.45, cumulative cost = {5947383.350000001 rows, 1.074632056E8 cpu, 9.8439432E7 io, 1.4765938799999999E7 network, 28.0 memory}
               :                                +- Calc(select=[x, y0]): rowcount = 615246.45, cumulative cost = {5332136.9 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
               :                                   +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 615246.45, cumulative cost = {4716890.45 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
               :                                      :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
               :                                      +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
               :                                         +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[hash[y]]): rowcount = 615320.1, cumulative cost = {5948586.299999999 rows, 1.362695688E8 cpu, 9.8445312E7 io, 1.4773586399999999E7 network, 17712.0 memory}
                  +- Calc(select=[y, x0]): rowcount = 615320.1, cumulative cost = {5333266.199999999 rows, 3.2895792E7 cpu, 9.8445312E7 io, 5904.0 network, 17712.0 memory}
                     +- HashJoin(joinType=[InnerJoin], where=[=(x0, x)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 615320.1, cumulative cost = {4717946.1 rows, 3.2895792E7 cpu, 9.8445312E7 io, 5904.0 network, 17712.0 memory}
                        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
                        +- Exchange(distribution=[broadcast]): rowcount = 492.0, cumulative cost = {984.0 rows, 78720.0 cpu, 5904.0 io, 5904.0 network, 0.0 memory}
                           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 492.0, cumulative cost = {492.0 rows, 0.0 cpu, 5904.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[0,1,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[x000 AS X0, X0 AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[X0, X1, y, x000], build=[left])\n:     :- [#1] Exchange(distribution=[hash[X1]])\n:     +- [#2] Exchange(distribution=[hash[y]])\n+- Calc(select=[x0 AS X0, X0 AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(y = x)], select=[x, X0, y, x0], build=[right])\n      :- [#3] Exchange(distribution=[hash[x]])\n      +- [#4] Exchange(distribution=[hash[y]])\n])
         :- Exchange(distribution=[hash[X1]])(reuse_id=[3])
         :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
         :     +- Exchange(distribution=[hash[X0, X1]])
         :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
         :           +- MultipleInput(readOrder=[1,0,2,1], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[y AS X0, x AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:     :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- Calc(select=[y0 AS X0, x AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])\n      :- [#3] Exchange(distribution=[hash[y]])\n      +- [#4] Exchange(distribution=[hash[x]])\n])
         :              :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :              :- Exchange(distribution=[broadcast])
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :              :- Exchange(distribution=[hash[y]])
         :              :  +- Reused(reference_id=[1])
         :              +- Exchange(distribution=[hash[x]])
         :                 +- Calc(select=[x, y0])
         :                    +- NestedLoopJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])
         :                       :- Reused(reference_id=[1])
         :                       +- Exchange(distribution=[broadcast])(reuse_id=[2])
         :                          +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
         :- Exchange(distribution=[hash[y]])
         :  +- Calc(select=[y, x00 AS x000])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x00], build=[right])
         :        :- Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Exchange(distribution=[hash[y]])
         :           +- Calc(select=[y, x0 AS x00])
         :              +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x0], build=[right])
         :                 :- Exchange(distribution=[hash[x]])
         :                 :  +- Reused(reference_id=[1])
         :                 +- Exchange(distribution=[hash[y]])
         :                    +- Calc(select=[y, x0])
         :                       +- NestedLoopJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, x0, y0], build=[right])
         :                          :- Reused(reference_id=[1])
         :                          +- Reused(reference_id=[2])
         :- Exchange(distribution=[hash[x]])
         :  +- Calc(select=[x, X0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[x, y, X0, X1], build=[right])
         :        :- Exchange(distribution=[hash[y]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Reused(reference_id=[3])
         +- Exchange(distribution=[hash[y]])
            +- Calc(select=[y, x0])
               +- HashJoin(joinType=[InnerJoin], where=[(x0 = x)], select=[x, y, x0], isBroadcast=[true], build=[right])
                  :- Reused(reference_id=[1])
                  +- Exchange(distribution=[broadcast])
                     +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])

Job has been submitted with JobID cd3ae4537fd02a53d4afd99b348c1657
WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT s_2.y AS X0, r_0.x AS X1 FROM s AS s_2 INNER JOIN r AS r_1 on s_2.x = r_1.y INNER JOIN r AS r_0 on r_1.x = r_0.y )), p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1 FROM p12 AS p12_4 INNER JOIN r AS r_3 ON r_3.y = p12_4.X1 INNER JOIN r AS r_2 ON r_2.y = r_3.x INNER JOIN r AS r_1 ON r_1.y = r_2.x INNER JOIN s as s_0 ON s_0.y = r_1.x UNION (SELECT a_0.x AS X0, p12_3.X0 AS X1 FROM a AS a_0 INNER JOIN r AS r_1 ON a_0.x = r_1.x INNER JOIN r AS r_2 ON r_1.y = r_2.x INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...
waiting...
waiting...
waiting...
waiting...
waiting...

------------> using sink uuid: 4b1d853b_fb99_4f4f_9ce2_af76da736a90

Adding statistics for table s number 9 
Adding statistics for table a number 9 
Adding statistics for table b number 9 
Adding statistics for table r number 9 
Adding statistics for table t number 9 
sql argument: WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1
             FROM r AS r_0
                      INNER JOIN b AS b_1 ON r_0.y = b_1.x
             UNION
             (SELECT s_2.y AS X0, r_0.x AS X1
              FROM s AS s_2
                       INNER JOIN r AS r_1 on s_2.x = r_1.y
                       INNER JOIN r AS r_0 on r_1.x = r_0.y
             )),
     p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1
            FROM p12 AS p12_4
                INNER JOIN r AS r_3 ON r_3.y = p12_4.X1
                INNER JOIN r AS r_2 ON r_2.y = r_3.x
                INNER JOIN r AS r_1 ON r_1.y = r_2.x
                INNER JOIN s as s_0 ON s_0.y = r_1.x
            UNION
            (SELECT a_0.x AS X0, p12_3.X0 AS X1
            FROM a AS a_0
                     INNER JOIN r AS r_1 ON a_0.x = r_1.x
                     INNER JOIN r AS r_2 ON r_1.y = r_2.x
                     INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalProject(X0=[$8], X1=[$0])
   :  +- LogicalJoin(condition=[=($9, $6)], joinType=[inner])
   :     :- LogicalJoin(condition=[=($7, $4)], joinType=[inner])
   :     :  :- LogicalJoin(condition=[=($5, $2)], joinType=[inner])
   :     :  :  :- LogicalJoin(condition=[=($3, $1)], joinType=[inner])
   :     :  :  :  :- LogicalUnion(all=[false])
   :     :  :  :  :  :- LogicalProject(X0=[$1], X1=[$0])
   :     :  :  :  :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :     :  :  :  :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :     :  :  :  :  +- LogicalProject(X0=[$1], X1=[$4])
   :     :  :  :  :     +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
   :     :  :  :  :        :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
   :     :  :  :  :        :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$5])
      +- LogicalJoin(condition=[=($4, $6)], joinType=[inner])
         :- LogicalJoin(condition=[=($2, $3)], joinType=[inner])
         :  :- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :  :  :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         +- LogicalUnion(all=[false])
            :- LogicalProject(X0=[$1], X1=[$0])
            :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
            :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
            :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
            +- LogicalProject(X0=[$1], X1=[$4])
               +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
                  :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
                  :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
                  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
                  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 60572.11526244861, cumulative cost = {9.02922779559936E7 rows, 4.75845055108896E9 cpu, 1.082850576E9 io, 6.25676293930597E8 network, 2.7348895396489584E8 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 60572.11526244861, cumulative cost = {9.023170584073114E7 rows, 4.7574813972447605E9 cpu, 1.082850576E9 io, 6.25676293930597E8 network, 2.696123385880991E8 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 60572.11526244861, cumulative cost = {9.01711337254687E7 rows, 4.74682070495857E9 cpu, 1.082850576E9 io, 6.242225631642982E8 network, 2.696123385880991E8 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 334155.49681467295, cumulative cost = {9.011056161020625E7 rows, 4.741474217009535E9 cpu, 1.082850576E9 io, 6.242225631642982E8 network, 2.6573572321130243E8 memory}
         :- Calc(select=[x000 AS X0, X0 AS X1]): rowcount = 144175.22029781347, cumulative cost = {5.0109980246745646E7 rows, 2.785548164870803E9 cpu, 5.90642052E8 io, 3.7065949555230033E8 network, 1.5266788889565122E8 memory}
         :  +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[X0, X1, y, x000], build=[left]): rowcount = 144175.22029781347, cumulative cost = {4.996580502644783E7 rows, 2.785548164870803E9 cpu, 5.90642052E8 io, 3.7065949555230033E8 network, 1.5266788889565122E8 memory}
         :     :- Exchange(distribution=[hash[X1]]): rowcount = 239791.84519375666, cumulative cost = {2.318094978327502E7 rows, 9.759785867672524E8 cpu, 2.95323804E8 io, 1.2472091136930032E8 network, 6.5163853384800844E7 memory}
         :     :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 239791.84519375666, cumulative cost = {2.2941157938081264E7 rows, 9.356935567747014E8 cpu, 2.95323804E8 io, 1.1896590708465016E8 network, 6.5163853384800844E7 memory}
         :     :     +- Exchange(distribution=[hash[X0, X1]]): rowcount = 239791.84519375666, cumulative cost = {2.270136609288751E7 rows, 9.318568872516012E8 cpu, 2.95323804E8 io, 1.1896590708465016E8 network, 4.981717529240042E7 memory}
         :     :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 239791.84519375666, cumulative cost = {2.2461574247693755E7 rows, 8.896535224975001E8 cpu, 2.95323804E8 io, 1.132109028E8 network, 4.981717529240042E7 memory}
         :     :           +- Union(all=[true], union=[X0, X1]): rowcount = 1322849.0175, cumulative cost = {2.22217824025E7 rows, 8.684879382175001E8 cpu, 2.95323804E8 io, 1.132109028E8 network, 3.4470497199999996E7 memory}
         :     :              :- Calc(select=[y AS X0, x AS X1]): rowcount = 615315.75, cumulative cost = {5333199.5 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :     :              :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 615315.75, cumulative cost = {4717883.75 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :     :              :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :     :              :     +- Exchange(distribution=[broadcast]): rowcount = 463.0, cumulative cost = {926.0 rows, 74080.0 cpu, 5556.0 io, 5556.0 network, 0.0 memory}
         :     :              :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 463.0, cumulative cost = {463.0 rows, 0.0 cpu, 5556.0 io, 0.0 network, 0.0 memory}
         :     :              +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 707533.2675, cumulative cost = {1.5565733885E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
         :     :                 +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 707533.2675, cumulative cost = {1.48582006175E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
         :     :                    :- Exchange(distribution=[hash[y]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
         :     :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :     :                    +- Exchange(distribution=[hash[x]]): rowcount = 615246.45, cumulative cost = {5947383.350000001 rows, 1.074632056E8 cpu, 9.8439432E7 io, 1.4765938799999999E7 network, 28.0 memory}
         :     :                       +- Calc(select=[x, y0]): rowcount = 615246.45, cumulative cost = {5332136.9 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
         :     :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 615246.45, cumulative cost = {4716890.45 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
         :     :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :     :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :     :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :     +- Exchange(distribution=[hash[y]]): rowcount = 721376.2901249999, cumulative cost = {2.6640680022875004E7 rows, 1.8018802330210001E9 cpu, 2.95318248E8 io, 2.45938584183E8 network, 7.407569217999999E7 memory}
         :        +- Calc(select=[y, x00 AS x000]): rowcount = 721376.2901249999, cumulative cost = {2.5919303732750002E7 rows, 1.6806890162800002E9 cpu, 2.95318248E8 io, 2.2862555322E8 network, 7.407569217999999E7 memory}
         :           +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x00], build=[right]): rowcount = 721376.2901249999, cumulative cost = {2.5197927442625E7 rows, 1.6806890162800002E9 cpu, 2.95318248E8 io, 2.2862555322E8 network, 7.407569217999999E7 memory}
         :              :- Exchange(distribution=[hash[x]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :              +- Exchange(distribution=[hash[y]]): rowcount = 707533.2675, cumulative cost = {1.62732671525E7 rows, 9.531397581400001E8 cpu, 1.9687884E8 io, 1.3018614522E8 network, 3.4453829199999996E7 memory}
         :                 +- Calc(select=[y, x0 AS x00]): rowcount = 707533.2675, cumulative cost = {1.5565733885E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
         :                    +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x0], build=[right]): rowcount = 707533.2675, cumulative cost = {1.48582006175E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
         :                       :- Exchange(distribution=[hash[x]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
         :                       :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :                       +- Exchange(distribution=[hash[y]]): rowcount = 615246.45, cumulative cost = {5947383.350000001 rows, 1.074632056E8 cpu, 9.8439432E7 io, 1.4765938799999999E7 network, 28.0 memory}
         :                          +- Calc(select=[y, x0]): rowcount = 615246.45, cumulative cost = {5332136.9 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
         :                             +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, x0, y0], build=[right]): rowcount = 615246.45, cumulative cost = {4716890.45 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
         :                                :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :                                +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                                   +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x0 AS X0, X0 AS X1]): rowcount = 189980.2765168595, cumulative cost = {3.966642586664593E7 rows, 1.9555918966419175E9 cpu, 4.92208524E8 io, 2.5356306761199784E8 network, 1.1306783431565121E8 memory}
            +- HashJoin(joinType=[InnerJoin], where=[=(y, x)], select=[x, X0, y, x0], build=[right]): rowcount = 189980.2765168595, cumulative cost = {3.947644559012907E7 rows, 1.9555918966419175E9 cpu, 4.92208524E8 io, 2.5356306761199784E8 network, 1.1306783431565121E8 memory}
               :- Exchange(distribution=[hash[x]]): rowcount = 651215.0767790634, cumulative cost = {3.333787901361221E7 rows, 1.809190046427685E9 cpu, 3.93763212E8 io, 2.3878948121199784E8 network, 7.859219671565121E7 memory}
               :  +- Calc(select=[x, X0]): rowcount = 651215.0767790634, cumulative cost = {3.2686663936833147E7 rows, 1.6997859135288024E9 cpu, 3.93763212E8 io, 2.231603193693003E8 network, 7.859219671565121E7 memory}
               :     +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[x, y, X0, X1], build=[right]): rowcount = 651215.0767790634, cumulative cost = {3.2035448860054083E7 rows, 1.6997859135288024E9 cpu, 3.93763212E8 io, 2.231603193693003E8 network, 7.859219671565121E7 memory}
               :        :- Exchange(distribution=[hash[y]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
               :        :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
               :        +- Exchange(distribution=[hash[X1]]): rowcount = 239791.84519375666, cumulative cost = {2.318094978327502E7 rows, 9.759785867672524E8 cpu, 2.95323804E8 io, 1.2472091136930032E8 network, 6.5163853384800844E7 memory}
               :           +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 239791.84519375666, cumulative cost = {2.2941157938081264E7 rows, 9.356935567747014E8 cpu, 2.95323804E8 io, 1.1896590708465016E8 network, 6.5163853384800844E7 memory}
               :              +- Exchange(distribution=[hash[X0, X1]]): rowcount = 239791.84519375666, cumulative cost = {2.270136609288751E7 rows, 9.318568872516012E8 cpu, 2.95323804E8 io, 1.1896590708465016E8 network, 4.981717529240042E7 memory}
               :                 +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 239791.84519375666, cumulative cost = {2.2461574247693755E7 rows, 8.896535224975001E8 cpu, 2.95323804E8 io, 1.132109028E8 network, 4.981717529240042E7 memory}
               :                    +- Union(all=[true], union=[X0, X1]): rowcount = 1322849.0175, cumulative cost = {2.22217824025E7 rows, 8.684879382175001E8 cpu, 2.95323804E8 io, 1.132109028E8 network, 3.4470497199999996E7 memory}
               :                       :- Calc(select=[y AS X0, x AS X1]): rowcount = 615315.75, cumulative cost = {5333199.5 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
               :                       :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 615315.75, cumulative cost = {4717883.75 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
               :                       :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
               :                       :     +- Exchange(distribution=[broadcast]): rowcount = 463.0, cumulative cost = {926.0 rows, 74080.0 cpu, 5556.0 io, 5556.0 network, 0.0 memory}
               :                       :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 463.0, cumulative cost = {463.0 rows, 0.0 cpu, 5556.0 io, 0.0 network, 0.0 memory}
               :                       +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 707533.2675, cumulative cost = {1.5565733885E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
               :                          +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 707533.2675, cumulative cost = {1.48582006175E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
               :                             :- Exchange(distribution=[hash[y]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
               :                             :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
               :                             +- Exchange(distribution=[hash[x]]): rowcount = 615246.45, cumulative cost = {5947383.350000001 rows, 1.074632056E8 cpu, 9.8439432E7 io, 1.4765938799999999E7 network, 28.0 memory}
               :                                +- Calc(select=[x, y0]): rowcount = 615246.45, cumulative cost = {5332136.9 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
               :                                   +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 615246.45, cumulative cost = {4716890.45 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
               :                                      :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
               :                                      +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
               :                                         +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[hash[y]]): rowcount = 615320.1, cumulative cost = {5948586.299999999 rows, 1.362695688E8 cpu, 9.8445312E7 io, 1.4773586399999999E7 network, 17712.0 memory}
                  +- Calc(select=[y, x0]): rowcount = 615320.1, cumulative cost = {5333266.199999999 rows, 3.2895792E7 cpu, 9.8445312E7 io, 5904.0 network, 17712.0 memory}
                     +- HashJoin(joinType=[InnerJoin], where=[=(x0, x)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 615320.1, cumulative cost = {4717946.1 rows, 3.2895792E7 cpu, 9.8445312E7 io, 5904.0 network, 17712.0 memory}
                        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
                        +- Exchange(distribution=[broadcast]): rowcount = 492.0, cumulative cost = {984.0 rows, 78720.0 cpu, 5904.0 io, 5904.0 network, 0.0 memory}
                           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 492.0, cumulative cost = {492.0 rows, 0.0 cpu, 5904.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[0,1,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[x000 AS X0, X0 AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[X0, X1, y, x000], build=[left])\n:     :- [#1] Exchange(distribution=[hash[X1]])\n:     +- [#2] Exchange(distribution=[hash[y]])\n+- Calc(select=[x0 AS X0, X0 AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(y = x)], select=[x, X0, y, x0], build=[right])\n      :- [#3] Exchange(distribution=[hash[x]])\n      +- [#4] Exchange(distribution=[hash[y]])\n])
         :- Exchange(distribution=[hash[X1]])(reuse_id=[3])
         :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
         :     +- Exchange(distribution=[hash[X0, X1]])
         :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
         :           +- MultipleInput(readOrder=[1,0,2,1], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[y AS X0, x AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:     :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- Calc(select=[y0 AS X0, x AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])\n      :- [#3] Exchange(distribution=[hash[y]])\n      +- [#4] Exchange(distribution=[hash[x]])\n])
         :              :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :              :- Exchange(distribution=[broadcast])
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :              :- Exchange(distribution=[hash[y]])
         :              :  +- Reused(reference_id=[1])
         :              +- Exchange(distribution=[hash[x]])
         :                 +- Calc(select=[x, y0])
         :                    +- NestedLoopJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])
         :                       :- Reused(reference_id=[1])
         :                       +- Exchange(distribution=[broadcast])(reuse_id=[2])
         :                          +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
         :- Exchange(distribution=[hash[y]])
         :  +- Calc(select=[y, x00 AS x000])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x00], build=[right])
         :        :- Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Exchange(distribution=[hash[y]])
         :           +- Calc(select=[y, x0 AS x00])
         :              +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x0], build=[right])
         :                 :- Exchange(distribution=[hash[x]])
         :                 :  +- Reused(reference_id=[1])
         :                 +- Exchange(distribution=[hash[y]])
         :                    +- Calc(select=[y, x0])
         :                       +- NestedLoopJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, x0, y0], build=[right])
         :                          :- Reused(reference_id=[1])
         :                          +- Reused(reference_id=[2])
         :- Exchange(distribution=[hash[x]])
         :  +- Calc(select=[x, X0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[x, y, X0, X1], build=[right])
         :        :- Exchange(distribution=[hash[y]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Reused(reference_id=[3])
         +- Exchange(distribution=[hash[y]])
            +- Calc(select=[y, x0])
               +- HashJoin(joinType=[InnerJoin], where=[(x0 = x)], select=[x, y, x0], isBroadcast=[true], build=[right])
                  :- Reused(reference_id=[1])
                  +- Exchange(distribution=[broadcast])
                     +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])

Job has been submitted with JobID 0ab9a0bed8fd6230d4388258bb7166fb
WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT s_2.y AS X0, r_0.x AS X1 FROM s AS s_2 INNER JOIN r AS r_1 on s_2.x = r_1.y INNER JOIN r AS r_0 on r_1.x = r_0.y )), p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1 FROM p12 AS p12_4 INNER JOIN r AS r_3 ON r_3.y = p12_4.X1 INNER JOIN r AS r_2 ON r_2.y = r_3.x INNER JOIN r AS r_1 ON r_1.y = r_2.x INNER JOIN s as s_0 ON s_0.y = r_1.x UNION (SELECT a_0.x AS X0, p12_3.X0 AS X1 FROM a AS a_0 INNER JOIN r AS r_1 ON a_0.x = r_1.x INNER JOIN r AS r_2 ON r_1.y = r_2.x INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...
waiting...
waiting...
waiting...
waiting...
waiting...

------------> using sink uuid: b006b025_2eaa_4bd7_a916_562c502fbdaa

Adding statistics for table s number 9 
Adding statistics for table a number 9 
Adding statistics for table b number 9 
Adding statistics for table r number 9 
Adding statistics for table t number 9 
sql argument: WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1
             FROM r AS r_0
                      INNER JOIN b AS b_1 ON r_0.y = b_1.x
             UNION
             (SELECT s_2.y AS X0, r_0.x AS X1
              FROM s AS s_2
                       INNER JOIN r AS r_1 on s_2.x = r_1.y
                       INNER JOIN r AS r_0 on r_1.x = r_0.y
             )),
     p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1
            FROM p12 AS p12_4
                INNER JOIN r AS r_3 ON r_3.y = p12_4.X1
                INNER JOIN r AS r_2 ON r_2.y = r_3.x
                INNER JOIN r AS r_1 ON r_1.y = r_2.x
                INNER JOIN s as s_0 ON s_0.y = r_1.x
            UNION
            (SELECT a_0.x AS X0, p12_3.X0 AS X1
            FROM a AS a_0
                     INNER JOIN r AS r_1 ON a_0.x = r_1.x
                     INNER JOIN r AS r_2 ON r_1.y = r_2.x
                     INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalProject(X0=[$8], X1=[$0])
   :  +- LogicalJoin(condition=[=($9, $6)], joinType=[inner])
   :     :- LogicalJoin(condition=[=($7, $4)], joinType=[inner])
   :     :  :- LogicalJoin(condition=[=($5, $2)], joinType=[inner])
   :     :  :  :- LogicalJoin(condition=[=($3, $1)], joinType=[inner])
   :     :  :  :  :- LogicalUnion(all=[false])
   :     :  :  :  :  :- LogicalProject(X0=[$1], X1=[$0])
   :     :  :  :  :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :     :  :  :  :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :     :  :  :  :  +- LogicalProject(X0=[$1], X1=[$4])
   :     :  :  :  :     +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
   :     :  :  :  :        :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
   :     :  :  :  :        :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$5])
      +- LogicalJoin(condition=[=($4, $6)], joinType=[inner])
         :- LogicalJoin(condition=[=($2, $3)], joinType=[inner])
         :  :- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :  :  :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         +- LogicalUnion(all=[false])
            :- LogicalProject(X0=[$1], X1=[$0])
            :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
            :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
            :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
            +- LogicalProject(X0=[$1], X1=[$4])
               +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
                  :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
                  :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
                  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
                  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 60572.11526244861, cumulative cost = {9.02922779559936E7 rows, 4.75845055108896E9 cpu, 1.082850576E9 io, 6.25676293930597E8 network, 2.7348895396489584E8 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 60572.11526244861, cumulative cost = {9.023170584073114E7 rows, 4.7574813972447605E9 cpu, 1.082850576E9 io, 6.25676293930597E8 network, 2.696123385880991E8 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 60572.11526244861, cumulative cost = {9.01711337254687E7 rows, 4.74682070495857E9 cpu, 1.082850576E9 io, 6.242225631642982E8 network, 2.696123385880991E8 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 334155.49681467295, cumulative cost = {9.011056161020625E7 rows, 4.741474217009535E9 cpu, 1.082850576E9 io, 6.242225631642982E8 network, 2.6573572321130243E8 memory}
         :- Calc(select=[x000 AS X0, X0 AS X1]): rowcount = 144175.22029781347, cumulative cost = {5.0109980246745646E7 rows, 2.785548164870803E9 cpu, 5.90642052E8 io, 3.7065949555230033E8 network, 1.5266788889565122E8 memory}
         :  +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[X0, X1, y, x000], build=[left]): rowcount = 144175.22029781347, cumulative cost = {4.996580502644783E7 rows, 2.785548164870803E9 cpu, 5.90642052E8 io, 3.7065949555230033E8 network, 1.5266788889565122E8 memory}
         :     :- Exchange(distribution=[hash[X1]]): rowcount = 239791.84519375666, cumulative cost = {2.318094978327502E7 rows, 9.759785867672524E8 cpu, 2.95323804E8 io, 1.2472091136930032E8 network, 6.5163853384800844E7 memory}
         :     :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 239791.84519375666, cumulative cost = {2.2941157938081264E7 rows, 9.356935567747014E8 cpu, 2.95323804E8 io, 1.1896590708465016E8 network, 6.5163853384800844E7 memory}
         :     :     +- Exchange(distribution=[hash[X0, X1]]): rowcount = 239791.84519375666, cumulative cost = {2.270136609288751E7 rows, 9.318568872516012E8 cpu, 2.95323804E8 io, 1.1896590708465016E8 network, 4.981717529240042E7 memory}
         :     :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 239791.84519375666, cumulative cost = {2.2461574247693755E7 rows, 8.896535224975001E8 cpu, 2.95323804E8 io, 1.132109028E8 network, 4.981717529240042E7 memory}
         :     :           +- Union(all=[true], union=[X0, X1]): rowcount = 1322849.0175, cumulative cost = {2.22217824025E7 rows, 8.684879382175001E8 cpu, 2.95323804E8 io, 1.132109028E8 network, 3.4470497199999996E7 memory}
         :     :              :- Calc(select=[y AS X0, x AS X1]): rowcount = 615315.75, cumulative cost = {5333199.5 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :     :              :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 615315.75, cumulative cost = {4717883.75 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :     :              :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :     :              :     +- Exchange(distribution=[broadcast]): rowcount = 463.0, cumulative cost = {926.0 rows, 74080.0 cpu, 5556.0 io, 5556.0 network, 0.0 memory}
         :     :              :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 463.0, cumulative cost = {463.0 rows, 0.0 cpu, 5556.0 io, 0.0 network, 0.0 memory}
         :     :              +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 707533.2675, cumulative cost = {1.5565733885E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
         :     :                 +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 707533.2675, cumulative cost = {1.48582006175E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
         :     :                    :- Exchange(distribution=[hash[y]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
         :     :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :     :                    +- Exchange(distribution=[hash[x]]): rowcount = 615246.45, cumulative cost = {5947383.350000001 rows, 1.074632056E8 cpu, 9.8439432E7 io, 1.4765938799999999E7 network, 28.0 memory}
         :     :                       +- Calc(select=[x, y0]): rowcount = 615246.45, cumulative cost = {5332136.9 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
         :     :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 615246.45, cumulative cost = {4716890.45 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
         :     :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :     :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :     :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :     +- Exchange(distribution=[hash[y]]): rowcount = 721376.2901249999, cumulative cost = {2.6640680022875004E7 rows, 1.8018802330210001E9 cpu, 2.95318248E8 io, 2.45938584183E8 network, 7.407569217999999E7 memory}
         :        +- Calc(select=[y, x00 AS x000]): rowcount = 721376.2901249999, cumulative cost = {2.5919303732750002E7 rows, 1.6806890162800002E9 cpu, 2.95318248E8 io, 2.2862555322E8 network, 7.407569217999999E7 memory}
         :           +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x00], build=[right]): rowcount = 721376.2901249999, cumulative cost = {2.5197927442625E7 rows, 1.6806890162800002E9 cpu, 2.95318248E8 io, 2.2862555322E8 network, 7.407569217999999E7 memory}
         :              :- Exchange(distribution=[hash[x]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :              +- Exchange(distribution=[hash[y]]): rowcount = 707533.2675, cumulative cost = {1.62732671525E7 rows, 9.531397581400001E8 cpu, 1.9687884E8 io, 1.3018614522E8 network, 3.4453829199999996E7 memory}
         :                 +- Calc(select=[y, x0 AS x00]): rowcount = 707533.2675, cumulative cost = {1.5565733885E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
         :                    +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x0], build=[right]): rowcount = 707533.2675, cumulative cost = {1.48582006175E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
         :                       :- Exchange(distribution=[hash[x]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
         :                       :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :                       +- Exchange(distribution=[hash[y]]): rowcount = 615246.45, cumulative cost = {5947383.350000001 rows, 1.074632056E8 cpu, 9.8439432E7 io, 1.4765938799999999E7 network, 28.0 memory}
         :                          +- Calc(select=[y, x0]): rowcount = 615246.45, cumulative cost = {5332136.9 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
         :                             +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, x0, y0], build=[right]): rowcount = 615246.45, cumulative cost = {4716890.45 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
         :                                :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :                                +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                                   +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x0 AS X0, X0 AS X1]): rowcount = 189980.2765168595, cumulative cost = {3.966642586664593E7 rows, 1.9555918966419175E9 cpu, 4.92208524E8 io, 2.5356306761199784E8 network, 1.1306783431565121E8 memory}
            +- HashJoin(joinType=[InnerJoin], where=[=(y, x)], select=[x, X0, y, x0], build=[right]): rowcount = 189980.2765168595, cumulative cost = {3.947644559012907E7 rows, 1.9555918966419175E9 cpu, 4.92208524E8 io, 2.5356306761199784E8 network, 1.1306783431565121E8 memory}
               :- Exchange(distribution=[hash[x]]): rowcount = 651215.0767790634, cumulative cost = {3.333787901361221E7 rows, 1.809190046427685E9 cpu, 3.93763212E8 io, 2.3878948121199784E8 network, 7.859219671565121E7 memory}
               :  +- Calc(select=[x, X0]): rowcount = 651215.0767790634, cumulative cost = {3.2686663936833147E7 rows, 1.6997859135288024E9 cpu, 3.93763212E8 io, 2.231603193693003E8 network, 7.859219671565121E7 memory}
               :     +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[x, y, X0, X1], build=[right]): rowcount = 651215.0767790634, cumulative cost = {3.2035448860054083E7 rows, 1.6997859135288024E9 cpu, 3.93763212E8 io, 2.231603193693003E8 network, 7.859219671565121E7 memory}
               :        :- Exchange(distribution=[hash[y]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
               :        :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
               :        +- Exchange(distribution=[hash[X1]]): rowcount = 239791.84519375666, cumulative cost = {2.318094978327502E7 rows, 9.759785867672524E8 cpu, 2.95323804E8 io, 1.2472091136930032E8 network, 6.5163853384800844E7 memory}
               :           +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 239791.84519375666, cumulative cost = {2.2941157938081264E7 rows, 9.356935567747014E8 cpu, 2.95323804E8 io, 1.1896590708465016E8 network, 6.5163853384800844E7 memory}
               :              +- Exchange(distribution=[hash[X0, X1]]): rowcount = 239791.84519375666, cumulative cost = {2.270136609288751E7 rows, 9.318568872516012E8 cpu, 2.95323804E8 io, 1.1896590708465016E8 network, 4.981717529240042E7 memory}
               :                 +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 239791.84519375666, cumulative cost = {2.2461574247693755E7 rows, 8.896535224975001E8 cpu, 2.95323804E8 io, 1.132109028E8 network, 4.981717529240042E7 memory}
               :                    +- Union(all=[true], union=[X0, X1]): rowcount = 1322849.0175, cumulative cost = {2.22217824025E7 rows, 8.684879382175001E8 cpu, 2.95323804E8 io, 1.132109028E8 network, 3.4470497199999996E7 memory}
               :                       :- Calc(select=[y AS X0, x AS X1]): rowcount = 615315.75, cumulative cost = {5333199.5 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
               :                       :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 615315.75, cumulative cost = {4717883.75 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
               :                       :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
               :                       :     +- Exchange(distribution=[broadcast]): rowcount = 463.0, cumulative cost = {926.0 rows, 74080.0 cpu, 5556.0 io, 5556.0 network, 0.0 memory}
               :                       :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 463.0, cumulative cost = {463.0 rows, 0.0 cpu, 5556.0 io, 0.0 network, 0.0 memory}
               :                       +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 707533.2675, cumulative cost = {1.5565733885E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
               :                          +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 707533.2675, cumulative cost = {1.48582006175E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
               :                             :- Exchange(distribution=[hash[y]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
               :                             :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
               :                             +- Exchange(distribution=[hash[x]]): rowcount = 615246.45, cumulative cost = {5947383.350000001 rows, 1.074632056E8 cpu, 9.8439432E7 io, 1.4765938799999999E7 network, 28.0 memory}
               :                                +- Calc(select=[x, y0]): rowcount = 615246.45, cumulative cost = {5332136.9 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
               :                                   +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 615246.45, cumulative cost = {4716890.45 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
               :                                      :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
               :                                      +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
               :                                         +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[hash[y]]): rowcount = 615320.1, cumulative cost = {5948586.299999999 rows, 1.362695688E8 cpu, 9.8445312E7 io, 1.4773586399999999E7 network, 17712.0 memory}
                  +- Calc(select=[y, x0]): rowcount = 615320.1, cumulative cost = {5333266.199999999 rows, 3.2895792E7 cpu, 9.8445312E7 io, 5904.0 network, 17712.0 memory}
                     +- HashJoin(joinType=[InnerJoin], where=[=(x0, x)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 615320.1, cumulative cost = {4717946.1 rows, 3.2895792E7 cpu, 9.8445312E7 io, 5904.0 network, 17712.0 memory}
                        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
                        +- Exchange(distribution=[broadcast]): rowcount = 492.0, cumulative cost = {984.0 rows, 78720.0 cpu, 5904.0 io, 5904.0 network, 0.0 memory}
                           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 492.0, cumulative cost = {492.0 rows, 0.0 cpu, 5904.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[0,1,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[x000 AS X0, X0 AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[X0, X1, y, x000], build=[left])\n:     :- [#1] Exchange(distribution=[hash[X1]])\n:     +- [#2] Exchange(distribution=[hash[y]])\n+- Calc(select=[x0 AS X0, X0 AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(y = x)], select=[x, X0, y, x0], build=[right])\n      :- [#3] Exchange(distribution=[hash[x]])\n      +- [#4] Exchange(distribution=[hash[y]])\n])
         :- Exchange(distribution=[hash[X1]])(reuse_id=[3])
         :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
         :     +- Exchange(distribution=[hash[X0, X1]])
         :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
         :           +- MultipleInput(readOrder=[1,0,2,1], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[y AS X0, x AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:     :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- Calc(select=[y0 AS X0, x AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])\n      :- [#3] Exchange(distribution=[hash[y]])\n      +- [#4] Exchange(distribution=[hash[x]])\n])
         :              :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :              :- Exchange(distribution=[broadcast])
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :              :- Exchange(distribution=[hash[y]])
         :              :  +- Reused(reference_id=[1])
         :              +- Exchange(distribution=[hash[x]])
         :                 +- Calc(select=[x, y0])
         :                    +- NestedLoopJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])
         :                       :- Reused(reference_id=[1])
         :                       +- Exchange(distribution=[broadcast])(reuse_id=[2])
         :                          +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
         :- Exchange(distribution=[hash[y]])
         :  +- Calc(select=[y, x00 AS x000])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x00], build=[right])
         :        :- Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Exchange(distribution=[hash[y]])
         :           +- Calc(select=[y, x0 AS x00])
         :              +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x0], build=[right])
         :                 :- Exchange(distribution=[hash[x]])
         :                 :  +- Reused(reference_id=[1])
         :                 +- Exchange(distribution=[hash[y]])
         :                    +- Calc(select=[y, x0])
         :                       +- NestedLoopJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, x0, y0], build=[right])
         :                          :- Reused(reference_id=[1])
         :                          +- Reused(reference_id=[2])
         :- Exchange(distribution=[hash[x]])
         :  +- Calc(select=[x, X0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[x, y, X0, X1], build=[right])
         :        :- Exchange(distribution=[hash[y]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Reused(reference_id=[3])
         +- Exchange(distribution=[hash[y]])
            +- Calc(select=[y, x0])
               +- HashJoin(joinType=[InnerJoin], where=[(x0 = x)], select=[x, y, x0], isBroadcast=[true], build=[right])
                  :- Reused(reference_id=[1])
                  +- Exchange(distribution=[broadcast])
                     +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])

Job has been submitted with JobID 86787ff24b40cdcb589fd1b30359343d
WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT s_2.y AS X0, r_0.x AS X1 FROM s AS s_2 INNER JOIN r AS r_1 on s_2.x = r_1.y INNER JOIN r AS r_0 on r_1.x = r_0.y )), p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1 FROM p12 AS p12_4 INNER JOIN r AS r_3 ON r_3.y = p12_4.X1 INNER JOIN r AS r_2 ON r_2.y = r_3.x INNER JOIN r AS r_1 ON r_1.y = r_2.x INNER JOIN s as s_0 ON s_0.y = r_1.x UNION (SELECT a_0.x AS X0, p12_3.X0 AS X1 FROM a AS a_0 INNER JOIN r AS r_1 ON a_0.x = r_1.x INNER JOIN r AS r_2 ON r_1.y = r_2.x INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...
waiting...
waiting...
waiting...
waiting...
waiting...
waiting...

------------> using sink uuid: eb83f1f2_05dc_47e1_a1bc_e3cb7beb43c2

Adding statistics for table s number 3 
Adding statistics for table a number 3 
Adding statistics for table b number 3 
Adding statistics for table r number 3 
Adding statistics for table t number 3 
sql argument: WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1
             FROM r AS r_0
                      INNER JOIN b AS b_1 ON r_0.y = b_1.x
             UNION
             (SELECT s_2.y AS X0, r_0.x AS X1
              FROM s AS s_2
                       INNER JOIN r AS r_1 on s_2.x = r_1.y
                       INNER JOIN r AS r_0 on r_1.x = r_0.y
             )),
     p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1
            FROM p12 AS p12_4
                INNER JOIN r AS r_3 ON r_3.y = p12_4.X1
                INNER JOIN r AS r_2 ON r_2.y = r_3.x
                INNER JOIN r AS r_1 ON r_1.y = r_2.x
                INNER JOIN s as s_0 ON s_0.y = r_1.x
            UNION
            (SELECT a_0.x AS X0, p12_3.X0 AS X1
            FROM a AS a_0
                     INNER JOIN r AS r_1 ON a_0.x = r_1.x
                     INNER JOIN r AS r_2 ON r_1.y = r_2.x
                     INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalProject(X0=[$8], X1=[$0])
   :  +- LogicalJoin(condition=[=($9, $6)], joinType=[inner])
   :     :- LogicalJoin(condition=[=($7, $4)], joinType=[inner])
   :     :  :- LogicalJoin(condition=[=($5, $2)], joinType=[inner])
   :     :  :  :- LogicalJoin(condition=[=($3, $1)], joinType=[inner])
   :     :  :  :  :- LogicalUnion(all=[false])
   :     :  :  :  :  :- LogicalProject(X0=[$1], X1=[$0])
   :     :  :  :  :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :     :  :  :  :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :     :  :  :  :  +- LogicalProject(X0=[$1], X1=[$4])
   :     :  :  :  :     +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
   :     :  :  :  :        :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
   :     :  :  :  :        :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$5])
      +- LogicalJoin(condition=[=($4, $6)], joinType=[inner])
         :- LogicalJoin(condition=[=($2, $3)], joinType=[inner])
         :  :- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :  :  :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         +- LogicalUnion(all=[false])
            :- LogicalProject(X0=[$1], X1=[$0])
            :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
            :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
            :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
            +- LogicalProject(X0=[$1], X1=[$4])
               +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
                  :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
                  :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
                  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
                  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 3790.9948130732264, cumulative cost = {5349212.605712252 rows, 2.4686694229042447E8 cpu, 6.777042E7 io, 3.1914274594442565E7 network, 1.7118917494364534E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 3790.9948130732264, cumulative cost = {5345421.610899178 rows, 2.468062863734153E8 cpu, 6.777042E7 io, 3.1914274594442565E7 network, 1.6876293826327845E7 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 3790.9948130732264, cumulative cost = {5341630.616086105 rows, 2.461390712863144E8 cpu, 6.777042E7 io, 3.1823290718928806E7 network, 1.6876293826327845E7 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 20913.612636698977, cumulative cost = {5337839.621273031 rows, 2.4580445348412722E8 cpu, 6.777042E7 io, 3.1823290718928806E7 network, 1.6633670158291157E7 memory}
         :- Calc(select=[x000 AS X0, X0 AS X1]): rowcount = 9023.201118868677, cumulative cost = {3091009.5187409017 rows, 1.6663085590528482E8 cpu, 3.6965268E7 io, 2.211428563803798E7 network, 9555444.679145578 memory}
         :  +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[X0, X1, y, x000], isBroadcast=[true], build=[left]): rowcount = 9023.201118868677, cumulative cost = {3081986.317622033 rows, 1.6663085590528482E8 cpu, 3.6965268E7 io, 2.211428563803798E7 network, 9555444.679145578 memory}
         :     :- Exchange(distribution=[broadcast]): rowcount = 15007.73412579119, cumulative cost = {1450815.4365031645 rows, 6.09644459122785E7 cpu, 1.8482916E7 io, 7805855.238037977 network, 4078989.9681012724 memory}
         :     :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 15007.73412579119, cumulative cost = {1435807.7023773734 rows, 5.856320845215191E7 cpu, 1.8482916E7 io, 7445669.619018989 network, 4078989.9681012724 memory}
         :     :     +- Exchange(distribution=[hash[X0, X1]]): rowcount = 15007.73412579119, cumulative cost = {1420799.9682515822 rows, 5.832308470613925E7 cpu, 1.8482916E7 io, 7445669.619018989 network, 3118494.984050636 memory}
         :     :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 15007.73412579119, cumulative cost = {1405792.2341257911 rows, 5.56817235E7 cpu, 1.8482916E7 io, 7085484.0 network, 3118494.984050636 memory}
         :     :           +- Union(all=[true], union=[X0, X1]): rowcount = 82792.5, cumulative cost = {1390784.5 rows, 5.43570435E7 cpu, 1.8482916E7 io, 7085484.0 network, 2158000.0 memory}
         :     :              :- Calc(select=[y AS X0, x AS X1]): rowcount = 38511.9, cumulative cost = {333816.80000000005 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :     :              :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 38511.9, cumulative cost = {295304.9 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :     :              :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :     :              :     +- Exchange(distribution=[broadcast]): rowcount = 47.0, cumulative cost = {94.0 rows, 7520.0 cpu, 564.0 io, 564.0 network, 0.0 memory}
         :     :              :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 47.0, cumulative cost = {47.0 rows, 0.0 cpu, 564.0 io, 0.0 network, 0.0 memory}
         :     :              +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 44280.6, cumulative cost = {974175.2 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
         :     :                 +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 44280.6, cumulative cost = {929894.6 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
         :     :                    :- Exchange(distribution=[hash[y]]): rowcount = 256699.0, cumulative cost = {513398.0 rows, 4.3125432E7 cpu, 6160776.0 io, 6160776.0 network, 0.0 memory}
         :     :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :     :                    +- Exchange(distribution=[hash[x]]): rowcount = 38505.0, cumulative cost = {372216.0 rows, 6725699.0 cpu, 6160800.0 io, 924144.0 network, 28.0 memory}
         :     :                       +- Calc(select=[x, y0]): rowcount = 38505.0, cumulative cost = {333711.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
         :     :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 38505.0, cumulative cost = {295206.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
         :     :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :     :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :     :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :     +- Calc(select=[y, x00 AS x000]): rowcount = 45146.939999999995, cumulative cost = {1622147.6799999997 rows, 1.051851726E8 cpu, 1.8482352E7 io, 1.43084304E7 network, 4636021.6 memory}
         :        +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x00], build=[right]): rowcount = 45146.939999999995, cumulative cost = {1577000.7399999998 rows, 1.051851726E8 cpu, 1.8482352E7 io, 1.43084304E7 network, 4636021.6 memory}
         :           :- Exchange(distribution=[hash[x]]): rowcount = 256699.0, cumulative cost = {513398.0 rows, 4.3125432E7 cpu, 6160776.0 io, 6160776.0 network, 0.0 memory}
         :           :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :           +- Exchange(distribution=[hash[y]]): rowcount = 44280.6, cumulative cost = {1018455.7999999999 rows, 5.96519038E7 cpu, 1.2321576E7 io, 8147654.4 network, 2156308.0 memory}
         :              +- Calc(select=[y, x0 AS x00]): rowcount = 44280.6, cumulative cost = {974175.2 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
         :                 +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x0], build=[right]): rowcount = 44280.6, cumulative cost = {929894.6 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
         :                    :- Exchange(distribution=[hash[x]]): rowcount = 256699.0, cumulative cost = {513398.0 rows, 4.3125432E7 cpu, 6160776.0 io, 6160776.0 network, 0.0 memory}
         :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :                    +- Exchange(distribution=[hash[y]]): rowcount = 38505.0, cumulative cost = {372216.0 rows, 6725699.0 cpu, 6160800.0 io, 924144.0 network, 28.0 memory}
         :                       +- Calc(select=[y, x0]): rowcount = 38505.0, cumulative cost = {333711.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
         :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, x0, y0], build=[right]): rowcount = 38505.0, cumulative cost = {295206.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
         :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x0 AS X0, X0 AS X1]): rowcount = 11890.411517830302, cumulative cost = {2225916.489895431 rows, 7.915268396620572E7 cpu, 3.0805152E7 io, 9709005.080890825 network, 7078225.479145579 memory}
            +- HashJoin(joinType=[InnerJoin], where=[=(y, x)], select=[x, X0, y, x0], build=[right]): rowcount = 11890.411517830302, cumulative cost = {2214026.0783776008 rows, 7.915268396620572E7 cpu, 3.0805152E7 io, 9709005.080890825 network, 7078225.479145579 memory}
               :- Exchange(distribution=[hash[x]]): rowcount = 40756.010118868675, cumulative cost = {1829782.4668597705 rows, 6.998510948525476E7 cpu, 2.4643692E7 io, 8783999.480890825 network, 4919423.079145579 memory}
               :  +- Calc(select=[x, X0]): rowcount = 40756.010118868675, cumulative cost = {1789026.4567409018 rows, 6.313809978528483E7 cpu, 2.4643692E7 io, 7805855.238037977 network, 4919423.079145579 memory}
               :     +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[x, y, X0, X1], isBroadcast=[true], build=[right]): rowcount = 40756.010118868675, cumulative cost = {1748270.4466220331 rows, 6.313809978528483E7 cpu, 2.4643692E7 io, 7805855.238037977 network, 4919423.079145579 memory}
               :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
               :        +- Exchange(distribution=[broadcast]): rowcount = 15007.73412579119, cumulative cost = {1450815.4365031645 rows, 6.09644459122785E7 cpu, 1.8482916E7 io, 7805855.238037977 network, 4078989.9681012724 memory}
               :           +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 15007.73412579119, cumulative cost = {1435807.7023773734 rows, 5.856320845215191E7 cpu, 1.8482916E7 io, 7445669.619018989 network, 4078989.9681012724 memory}
               :              +- Exchange(distribution=[hash[X0, X1]]): rowcount = 15007.73412579119, cumulative cost = {1420799.9682515822 rows, 5.832308470613925E7 cpu, 1.8482916E7 io, 7445669.619018989 network, 3118494.984050636 memory}
               :                 +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 15007.73412579119, cumulative cost = {1405792.2341257911 rows, 5.56817235E7 cpu, 1.8482916E7 io, 7085484.0 network, 3118494.984050636 memory}
               :                    +- Union(all=[true], union=[X0, X1]): rowcount = 82792.5, cumulative cost = {1390784.5 rows, 5.43570435E7 cpu, 1.8482916E7 io, 7085484.0 network, 2158000.0 memory}
               :                       :- Calc(select=[y AS X0, x AS X1]): rowcount = 38511.9, cumulative cost = {333816.80000000005 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
               :                       :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 38511.9, cumulative cost = {295304.9 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
               :                       :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
               :                       :     +- Exchange(distribution=[broadcast]): rowcount = 47.0, cumulative cost = {94.0 rows, 7520.0 cpu, 564.0 io, 564.0 network, 0.0 memory}
               :                       :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 47.0, cumulative cost = {47.0 rows, 0.0 cpu, 564.0 io, 0.0 network, 0.0 memory}
               :                       +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 44280.6, cumulative cost = {974175.2 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
               :                          +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 44280.6, cumulative cost = {929894.6 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
               :                             :- Exchange(distribution=[hash[y]]): rowcount = 256699.0, cumulative cost = {513398.0 rows, 4.3125432E7 cpu, 6160776.0 io, 6160776.0 network, 0.0 memory}
               :                             :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
               :                             +- Exchange(distribution=[hash[x]]): rowcount = 38505.0, cumulative cost = {372216.0 rows, 6725699.0 cpu, 6160800.0 io, 924144.0 network, 28.0 memory}
               :                                +- Calc(select=[x, y0]): rowcount = 38505.0, cumulative cost = {333711.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
               :                                   +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 38505.0, cumulative cost = {295206.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
               :                                      :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
               :                                      +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
               :                                         +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[hash[y]]): rowcount = 38513.4, cumulative cost = {372353.20000000007 rows, 8533419.2 cpu, 6161460.0 io, 925005.6000000001 network, 2052.0 memory}
                  +- Calc(select=[y, x0]): rowcount = 38513.4, cumulative cost = {333839.80000000005 rows, 2063168.0 cpu, 6161460.0 io, 684.0 network, 2052.0 memory}
                     +- HashJoin(joinType=[InnerJoin], where=[=(x0, x)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 38513.4, cumulative cost = {295326.4 rows, 2063168.0 cpu, 6161460.0 io, 684.0 network, 2052.0 memory}
                        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
                        +- Exchange(distribution=[broadcast]): rowcount = 57.0, cumulative cost = {114.0 rows, 9120.0 cpu, 684.0 io, 684.0 network, 0.0 memory}
                           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 57.0, cumulative cost = {57.0 rows, 0.0 cpu, 684.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[x000 AS X0, X0 AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[X0, X1, y, x000], isBroadcast=[true], build=[left])\n:     :- [#1] Exchange(distribution=[broadcast])\n:     +- Calc(select=[y, x00 AS x000])\n:        +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x00], build=[right])\n:           :- [#4] Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])\n:           +- [#5] Exchange(distribution=[hash[y]])\n+- Calc(select=[x0 AS X0, X0 AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(y = x)], select=[x, X0, y, x0], build=[right])\n      :- [#2] Exchange(distribution=[hash[x]])\n      +- [#3] Exchange(distribution=[hash[y]])\n])
         :- Exchange(distribution=[broadcast])(reuse_id=[2])
         :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
         :     +- Exchange(distribution=[hash[X0, X1]])
         :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
         :           +- MultipleInput(readOrder=[1,0,2,1], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[y AS X0, x AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:     :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- Calc(select=[y0 AS X0, x AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])\n      :- [#3] Exchange(distribution=[hash[y]])\n      +- [#4] Exchange(distribution=[hash[x]])\n])
         :              :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :              :- Exchange(distribution=[broadcast])
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :              :- Exchange(distribution=[hash[y]])
         :              :  +- Reused(reference_id=[1])
         :              +- Exchange(distribution=[hash[x]])
         :                 +- Calc(select=[x, y0])
         :                    +- NestedLoopJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])
         :                       :- Reused(reference_id=[1])
         :                       +- Exchange(distribution=[broadcast])(reuse_id=[3])
         :                          +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
         :- Exchange(distribution=[hash[x]])
         :  +- Calc(select=[x, X0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[x, y, X0, X1], isBroadcast=[true], build=[right])
         :        :- Exchange(distribution=[any], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Reused(reference_id=[2])
         :- Exchange(distribution=[hash[y]])
         :  +- Calc(select=[y, x0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(x0 = x)], select=[x, y, x0], isBroadcast=[true], build=[right])
         :        :- Reused(reference_id=[1])
         :        +- Exchange(distribution=[broadcast])
         :           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])
         :  +- Reused(reference_id=[1])
         +- Exchange(distribution=[hash[y]])
            +- Calc(select=[y, x0 AS x00])
               +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x0], build=[right])
                  :- Exchange(distribution=[hash[x]])
                  :  +- Reused(reference_id=[1])
                  +- Exchange(distribution=[hash[y]])
                     +- Calc(select=[y, x0])
                        +- NestedLoopJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, x0, y0], build=[right])
                           :- Reused(reference_id=[1])
                           +- Reused(reference_id=[3])

Job has been submitted with JobID 83da92f6094f5a81225c2b42ff0372f9
WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT s_2.y AS X0, r_0.x AS X1 FROM s AS s_2 INNER JOIN r AS r_1 on s_2.x = r_1.y INNER JOIN r AS r_0 on r_1.x = r_0.y )), p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1 FROM p12 AS p12_4 INNER JOIN r AS r_3 ON r_3.y = p12_4.X1 INNER JOIN r AS r_2 ON r_2.y = r_3.x INNER JOIN r AS r_1 ON r_1.y = r_2.x INNER JOIN s as s_0 ON s_0.y = r_1.x UNION (SELECT a_0.x AS X0, p12_3.X0 AS X1 FROM a AS a_0 INNER JOIN r AS r_1 ON a_0.x = r_1.x INNER JOIN r AS r_2 ON r_1.y = r_2.x INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1

------------> using sink uuid: d7e60481_cf64_4019_90c6_148603705884

Adding statistics for table s number 3 
Adding statistics for table a number 3 
Adding statistics for table b number 3 
Adding statistics for table r number 3 
Adding statistics for table t number 3 
sql argument: WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1
             FROM r AS r_0
                      INNER JOIN b AS b_1 ON r_0.y = b_1.x
             UNION
             (SELECT s_2.y AS X0, r_0.x AS X1
              FROM s AS s_2
                       INNER JOIN r AS r_1 on s_2.x = r_1.y
                       INNER JOIN r AS r_0 on r_1.x = r_0.y
             )),
     p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1
            FROM p12 AS p12_4
                INNER JOIN r AS r_3 ON r_3.y = p12_4.X1
                INNER JOIN r AS r_2 ON r_2.y = r_3.x
                INNER JOIN r AS r_1 ON r_1.y = r_2.x
                INNER JOIN s as s_0 ON s_0.y = r_1.x
            UNION
            (SELECT a_0.x AS X0, p12_3.X0 AS X1
            FROM a AS a_0
                     INNER JOIN r AS r_1 ON a_0.x = r_1.x
                     INNER JOIN r AS r_2 ON r_1.y = r_2.x
                     INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalProject(X0=[$8], X1=[$0])
   :  +- LogicalJoin(condition=[=($9, $6)], joinType=[inner])
   :     :- LogicalJoin(condition=[=($7, $4)], joinType=[inner])
   :     :  :- LogicalJoin(condition=[=($5, $2)], joinType=[inner])
   :     :  :  :- LogicalJoin(condition=[=($3, $1)], joinType=[inner])
   :     :  :  :  :- LogicalUnion(all=[false])
   :     :  :  :  :  :- LogicalProject(X0=[$1], X1=[$0])
   :     :  :  :  :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :     :  :  :  :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :     :  :  :  :  +- LogicalProject(X0=[$1], X1=[$4])
   :     :  :  :  :     +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
   :     :  :  :  :        :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
   :     :  :  :  :        :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$5])
      +- LogicalJoin(condition=[=($4, $6)], joinType=[inner])
         :- LogicalJoin(condition=[=($2, $3)], joinType=[inner])
         :  :- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :  :  :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         +- LogicalUnion(all=[false])
            :- LogicalProject(X0=[$1], X1=[$0])
            :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
            :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
            :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
            +- LogicalProject(X0=[$1], X1=[$4])
               +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
                  :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
                  :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
                  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
                  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 3790.9948130732264, cumulative cost = {5349212.605712252 rows, 2.4686694229042447E8 cpu, 6.777042E7 io, 3.1914274594442565E7 network, 1.7118917494364534E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 3790.9948130732264, cumulative cost = {5345421.610899178 rows, 2.468062863734153E8 cpu, 6.777042E7 io, 3.1914274594442565E7 network, 1.6876293826327845E7 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 3790.9948130732264, cumulative cost = {5341630.616086105 rows, 2.461390712863144E8 cpu, 6.777042E7 io, 3.1823290718928806E7 network, 1.6876293826327845E7 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 20913.612636698977, cumulative cost = {5337839.621273031 rows, 2.4580445348412722E8 cpu, 6.777042E7 io, 3.1823290718928806E7 network, 1.6633670158291157E7 memory}
         :- Calc(select=[x000 AS X0, X0 AS X1]): rowcount = 9023.201118868677, cumulative cost = {3091009.5187409017 rows, 1.6663085590528482E8 cpu, 3.6965268E7 io, 2.211428563803798E7 network, 9555444.679145578 memory}
         :  +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[X0, X1, y, x000], isBroadcast=[true], build=[left]): rowcount = 9023.201118868677, cumulative cost = {3081986.317622033 rows, 1.6663085590528482E8 cpu, 3.6965268E7 io, 2.211428563803798E7 network, 9555444.679145578 memory}
         :     :- Exchange(distribution=[broadcast]): rowcount = 15007.73412579119, cumulative cost = {1450815.4365031645 rows, 6.09644459122785E7 cpu, 1.8482916E7 io, 7805855.238037977 network, 4078989.9681012724 memory}
         :     :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 15007.73412579119, cumulative cost = {1435807.7023773734 rows, 5.856320845215191E7 cpu, 1.8482916E7 io, 7445669.619018989 network, 4078989.9681012724 memory}
         :     :     +- Exchange(distribution=[hash[X0, X1]]): rowcount = 15007.73412579119, cumulative cost = {1420799.9682515822 rows, 5.832308470613925E7 cpu, 1.8482916E7 io, 7445669.619018989 network, 3118494.984050636 memory}
         :     :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 15007.73412579119, cumulative cost = {1405792.2341257911 rows, 5.56817235E7 cpu, 1.8482916E7 io, 7085484.0 network, 3118494.984050636 memory}
         :     :           +- Union(all=[true], union=[X0, X1]): rowcount = 82792.5, cumulative cost = {1390784.5 rows, 5.43570435E7 cpu, 1.8482916E7 io, 7085484.0 network, 2158000.0 memory}
         :     :              :- Calc(select=[y AS X0, x AS X1]): rowcount = 38511.9, cumulative cost = {333816.80000000005 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :     :              :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 38511.9, cumulative cost = {295304.9 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :     :              :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :     :              :     +- Exchange(distribution=[broadcast]): rowcount = 47.0, cumulative cost = {94.0 rows, 7520.0 cpu, 564.0 io, 564.0 network, 0.0 memory}
         :     :              :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 47.0, cumulative cost = {47.0 rows, 0.0 cpu, 564.0 io, 0.0 network, 0.0 memory}
         :     :              +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 44280.6, cumulative cost = {974175.2 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
         :     :                 +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 44280.6, cumulative cost = {929894.6 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
         :     :                    :- Exchange(distribution=[hash[y]]): rowcount = 256699.0, cumulative cost = {513398.0 rows, 4.3125432E7 cpu, 6160776.0 io, 6160776.0 network, 0.0 memory}
         :     :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :     :                    +- Exchange(distribution=[hash[x]]): rowcount = 38505.0, cumulative cost = {372216.0 rows, 6725699.0 cpu, 6160800.0 io, 924144.0 network, 28.0 memory}
         :     :                       +- Calc(select=[x, y0]): rowcount = 38505.0, cumulative cost = {333711.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
         :     :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 38505.0, cumulative cost = {295206.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
         :     :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :     :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :     :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :     +- Calc(select=[y, x00 AS x000]): rowcount = 45146.939999999995, cumulative cost = {1622147.6799999997 rows, 1.051851726E8 cpu, 1.8482352E7 io, 1.43084304E7 network, 4636021.6 memory}
         :        +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x00], build=[right]): rowcount = 45146.939999999995, cumulative cost = {1577000.7399999998 rows, 1.051851726E8 cpu, 1.8482352E7 io, 1.43084304E7 network, 4636021.6 memory}
         :           :- Exchange(distribution=[hash[x]]): rowcount = 256699.0, cumulative cost = {513398.0 rows, 4.3125432E7 cpu, 6160776.0 io, 6160776.0 network, 0.0 memory}
         :           :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :           +- Exchange(distribution=[hash[y]]): rowcount = 44280.6, cumulative cost = {1018455.7999999999 rows, 5.96519038E7 cpu, 1.2321576E7 io, 8147654.4 network, 2156308.0 memory}
         :              +- Calc(select=[y, x0 AS x00]): rowcount = 44280.6, cumulative cost = {974175.2 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
         :                 +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x0], build=[right]): rowcount = 44280.6, cumulative cost = {929894.6 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
         :                    :- Exchange(distribution=[hash[x]]): rowcount = 256699.0, cumulative cost = {513398.0 rows, 4.3125432E7 cpu, 6160776.0 io, 6160776.0 network, 0.0 memory}
         :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :                    +- Exchange(distribution=[hash[y]]): rowcount = 38505.0, cumulative cost = {372216.0 rows, 6725699.0 cpu, 6160800.0 io, 924144.0 network, 28.0 memory}
         :                       +- Calc(select=[y, x0]): rowcount = 38505.0, cumulative cost = {333711.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
         :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, x0, y0], build=[right]): rowcount = 38505.0, cumulative cost = {295206.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
         :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x0 AS X0, X0 AS X1]): rowcount = 11890.411517830302, cumulative cost = {2225916.489895431 rows, 7.915268396620572E7 cpu, 3.0805152E7 io, 9709005.080890825 network, 7078225.479145579 memory}
            +- HashJoin(joinType=[InnerJoin], where=[=(y, x)], select=[x, X0, y, x0], build=[right]): rowcount = 11890.411517830302, cumulative cost = {2214026.0783776008 rows, 7.915268396620572E7 cpu, 3.0805152E7 io, 9709005.080890825 network, 7078225.479145579 memory}
               :- Exchange(distribution=[hash[x]]): rowcount = 40756.010118868675, cumulative cost = {1829782.4668597705 rows, 6.998510948525476E7 cpu, 2.4643692E7 io, 8783999.480890825 network, 4919423.079145579 memory}
               :  +- Calc(select=[x, X0]): rowcount = 40756.010118868675, cumulative cost = {1789026.4567409018 rows, 6.313809978528483E7 cpu, 2.4643692E7 io, 7805855.238037977 network, 4919423.079145579 memory}
               :     +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[x, y, X0, X1], isBroadcast=[true], build=[right]): rowcount = 40756.010118868675, cumulative cost = {1748270.4466220331 rows, 6.313809978528483E7 cpu, 2.4643692E7 io, 7805855.238037977 network, 4919423.079145579 memory}
               :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
               :        +- Exchange(distribution=[broadcast]): rowcount = 15007.73412579119, cumulative cost = {1450815.4365031645 rows, 6.09644459122785E7 cpu, 1.8482916E7 io, 7805855.238037977 network, 4078989.9681012724 memory}
               :           +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 15007.73412579119, cumulative cost = {1435807.7023773734 rows, 5.856320845215191E7 cpu, 1.8482916E7 io, 7445669.619018989 network, 4078989.9681012724 memory}
               :              +- Exchange(distribution=[hash[X0, X1]]): rowcount = 15007.73412579119, cumulative cost = {1420799.9682515822 rows, 5.832308470613925E7 cpu, 1.8482916E7 io, 7445669.619018989 network, 3118494.984050636 memory}
               :                 +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 15007.73412579119, cumulative cost = {1405792.2341257911 rows, 5.56817235E7 cpu, 1.8482916E7 io, 7085484.0 network, 3118494.984050636 memory}
               :                    +- Union(all=[true], union=[X0, X1]): rowcount = 82792.5, cumulative cost = {1390784.5 rows, 5.43570435E7 cpu, 1.8482916E7 io, 7085484.0 network, 2158000.0 memory}
               :                       :- Calc(select=[y AS X0, x AS X1]): rowcount = 38511.9, cumulative cost = {333816.80000000005 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
               :                       :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 38511.9, cumulative cost = {295304.9 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
               :                       :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
               :                       :     +- Exchange(distribution=[broadcast]): rowcount = 47.0, cumulative cost = {94.0 rows, 7520.0 cpu, 564.0 io, 564.0 network, 0.0 memory}
               :                       :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 47.0, cumulative cost = {47.0 rows, 0.0 cpu, 564.0 io, 0.0 network, 0.0 memory}
               :                       +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 44280.6, cumulative cost = {974175.2 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
               :                          +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 44280.6, cumulative cost = {929894.6 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
               :                             :- Exchange(distribution=[hash[y]]): rowcount = 256699.0, cumulative cost = {513398.0 rows, 4.3125432E7 cpu, 6160776.0 io, 6160776.0 network, 0.0 memory}
               :                             :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
               :                             +- Exchange(distribution=[hash[x]]): rowcount = 38505.0, cumulative cost = {372216.0 rows, 6725699.0 cpu, 6160800.0 io, 924144.0 network, 28.0 memory}
               :                                +- Calc(select=[x, y0]): rowcount = 38505.0, cumulative cost = {333711.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
               :                                   +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 38505.0, cumulative cost = {295206.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
               :                                      :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
               :                                      +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
               :                                         +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[hash[y]]): rowcount = 38513.4, cumulative cost = {372353.20000000007 rows, 8533419.2 cpu, 6161460.0 io, 925005.6000000001 network, 2052.0 memory}
                  +- Calc(select=[y, x0]): rowcount = 38513.4, cumulative cost = {333839.80000000005 rows, 2063168.0 cpu, 6161460.0 io, 684.0 network, 2052.0 memory}
                     +- HashJoin(joinType=[InnerJoin], where=[=(x0, x)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 38513.4, cumulative cost = {295326.4 rows, 2063168.0 cpu, 6161460.0 io, 684.0 network, 2052.0 memory}
                        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
                        +- Exchange(distribution=[broadcast]): rowcount = 57.0, cumulative cost = {114.0 rows, 9120.0 cpu, 684.0 io, 684.0 network, 0.0 memory}
                           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 57.0, cumulative cost = {57.0 rows, 0.0 cpu, 684.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[x000 AS X0, X0 AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[X0, X1, y, x000], isBroadcast=[true], build=[left])\n:     :- [#1] Exchange(distribution=[broadcast])\n:     +- Calc(select=[y, x00 AS x000])\n:        +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x00], build=[right])\n:           :- [#4] Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])\n:           +- [#5] Exchange(distribution=[hash[y]])\n+- Calc(select=[x0 AS X0, X0 AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(y = x)], select=[x, X0, y, x0], build=[right])\n      :- [#2] Exchange(distribution=[hash[x]])\n      +- [#3] Exchange(distribution=[hash[y]])\n])
         :- Exchange(distribution=[broadcast])(reuse_id=[2])
         :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
         :     +- Exchange(distribution=[hash[X0, X1]])
         :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
         :           +- MultipleInput(readOrder=[1,0,2,1], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[y AS X0, x AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:     :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- Calc(select=[y0 AS X0, x AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])\n      :- [#3] Exchange(distribution=[hash[y]])\n      +- [#4] Exchange(distribution=[hash[x]])\n])
         :              :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :              :- Exchange(distribution=[broadcast])
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :              :- Exchange(distribution=[hash[y]])
         :              :  +- Reused(reference_id=[1])
         :              +- Exchange(distribution=[hash[x]])
         :                 +- Calc(select=[x, y0])
         :                    +- NestedLoopJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])
         :                       :- Reused(reference_id=[1])
         :                       +- Exchange(distribution=[broadcast])(reuse_id=[3])
         :                          +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
         :- Exchange(distribution=[hash[x]])
         :  +- Calc(select=[x, X0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[x, y, X0, X1], isBroadcast=[true], build=[right])
         :        :- Exchange(distribution=[any], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Reused(reference_id=[2])
         :- Exchange(distribution=[hash[y]])
         :  +- Calc(select=[y, x0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(x0 = x)], select=[x, y, x0], isBroadcast=[true], build=[right])
         :        :- Reused(reference_id=[1])
         :        +- Exchange(distribution=[broadcast])
         :           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])
         :  +- Reused(reference_id=[1])
         +- Exchange(distribution=[hash[y]])
            +- Calc(select=[y, x0 AS x00])
               +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x0], build=[right])
                  :- Exchange(distribution=[hash[x]])
                  :  +- Reused(reference_id=[1])
                  +- Exchange(distribution=[hash[y]])
                     +- Calc(select=[y, x0])
                        +- NestedLoopJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, x0, y0], build=[right])
                           :- Reused(reference_id=[1])
                           +- Reused(reference_id=[3])

Job has been submitted with JobID d1beae5f6f7ed52a755b56e6b9dc2db6
WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT s_2.y AS X0, r_0.x AS X1 FROM s AS s_2 INNER JOIN r AS r_1 on s_2.x = r_1.y INNER JOIN r AS r_0 on r_1.x = r_0.y )), p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1 FROM p12 AS p12_4 INNER JOIN r AS r_3 ON r_3.y = p12_4.X1 INNER JOIN r AS r_2 ON r_2.y = r_3.x INNER JOIN r AS r_1 ON r_1.y = r_2.x INNER JOIN s as s_0 ON s_0.y = r_1.x UNION (SELECT a_0.x AS X0, p12_3.X0 AS X1 FROM a AS a_0 INNER JOIN r AS r_1 ON a_0.x = r_1.x INNER JOIN r AS r_2 ON r_1.y = r_2.x INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1

------------> using sink uuid: 2c573235_05a6_4070_a10e_a6a945e618ee

Adding statistics for table s number 3 
Adding statistics for table a number 3 
Adding statistics for table b number 3 
Adding statistics for table r number 3 
Adding statistics for table t number 3 
sql argument: WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1
             FROM r AS r_0
                      INNER JOIN b AS b_1 ON r_0.y = b_1.x
             UNION
             (SELECT s_2.y AS X0, r_0.x AS X1
              FROM s AS s_2
                       INNER JOIN r AS r_1 on s_2.x = r_1.y
                       INNER JOIN r AS r_0 on r_1.x = r_0.y
             )),
     p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1
            FROM p12 AS p12_4
                INNER JOIN r AS r_3 ON r_3.y = p12_4.X1
                INNER JOIN r AS r_2 ON r_2.y = r_3.x
                INNER JOIN r AS r_1 ON r_1.y = r_2.x
                INNER JOIN s as s_0 ON s_0.y = r_1.x
            UNION
            (SELECT a_0.x AS X0, p12_3.X0 AS X1
            FROM a AS a_0
                     INNER JOIN r AS r_1 ON a_0.x = r_1.x
                     INNER JOIN r AS r_2 ON r_1.y = r_2.x
                     INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalProject(X0=[$8], X1=[$0])
   :  +- LogicalJoin(condition=[=($9, $6)], joinType=[inner])
   :     :- LogicalJoin(condition=[=($7, $4)], joinType=[inner])
   :     :  :- LogicalJoin(condition=[=($5, $2)], joinType=[inner])
   :     :  :  :- LogicalJoin(condition=[=($3, $1)], joinType=[inner])
   :     :  :  :  :- LogicalUnion(all=[false])
   :     :  :  :  :  :- LogicalProject(X0=[$1], X1=[$0])
   :     :  :  :  :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :     :  :  :  :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :     :  :  :  :  +- LogicalProject(X0=[$1], X1=[$4])
   :     :  :  :  :     +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
   :     :  :  :  :        :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
   :     :  :  :  :        :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$5])
      +- LogicalJoin(condition=[=($4, $6)], joinType=[inner])
         :- LogicalJoin(condition=[=($2, $3)], joinType=[inner])
         :  :- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :  :  :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         +- LogicalUnion(all=[false])
            :- LogicalProject(X0=[$1], X1=[$0])
            :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
            :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
            :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
            +- LogicalProject(X0=[$1], X1=[$4])
               +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
                  :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
                  :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
                  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
                  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 3790.9948130732264, cumulative cost = {5349212.605712252 rows, 2.4686694229042447E8 cpu, 6.777042E7 io, 3.1914274594442565E7 network, 1.7118917494364534E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 3790.9948130732264, cumulative cost = {5345421.610899178 rows, 2.468062863734153E8 cpu, 6.777042E7 io, 3.1914274594442565E7 network, 1.6876293826327845E7 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 3790.9948130732264, cumulative cost = {5341630.616086105 rows, 2.461390712863144E8 cpu, 6.777042E7 io, 3.1823290718928806E7 network, 1.6876293826327845E7 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 20913.612636698977, cumulative cost = {5337839.621273031 rows, 2.4580445348412722E8 cpu, 6.777042E7 io, 3.1823290718928806E7 network, 1.6633670158291157E7 memory}
         :- Calc(select=[x000 AS X0, X0 AS X1]): rowcount = 9023.201118868677, cumulative cost = {3091009.5187409017 rows, 1.6663085590528482E8 cpu, 3.6965268E7 io, 2.211428563803798E7 network, 9555444.679145578 memory}
         :  +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[X0, X1, y, x000], isBroadcast=[true], build=[left]): rowcount = 9023.201118868677, cumulative cost = {3081986.317622033 rows, 1.6663085590528482E8 cpu, 3.6965268E7 io, 2.211428563803798E7 network, 9555444.679145578 memory}
         :     :- Exchange(distribution=[broadcast]): rowcount = 15007.73412579119, cumulative cost = {1450815.4365031645 rows, 6.09644459122785E7 cpu, 1.8482916E7 io, 7805855.238037977 network, 4078989.9681012724 memory}
         :     :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 15007.73412579119, cumulative cost = {1435807.7023773734 rows, 5.856320845215191E7 cpu, 1.8482916E7 io, 7445669.619018989 network, 4078989.9681012724 memory}
         :     :     +- Exchange(distribution=[hash[X0, X1]]): rowcount = 15007.73412579119, cumulative cost = {1420799.9682515822 rows, 5.832308470613925E7 cpu, 1.8482916E7 io, 7445669.619018989 network, 3118494.984050636 memory}
         :     :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 15007.73412579119, cumulative cost = {1405792.2341257911 rows, 5.56817235E7 cpu, 1.8482916E7 io, 7085484.0 network, 3118494.984050636 memory}
         :     :           +- Union(all=[true], union=[X0, X1]): rowcount = 82792.5, cumulative cost = {1390784.5 rows, 5.43570435E7 cpu, 1.8482916E7 io, 7085484.0 network, 2158000.0 memory}
         :     :              :- Calc(select=[y AS X0, x AS X1]): rowcount = 38511.9, cumulative cost = {333816.80000000005 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :     :              :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 38511.9, cumulative cost = {295304.9 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :     :              :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :     :              :     +- Exchange(distribution=[broadcast]): rowcount = 47.0, cumulative cost = {94.0 rows, 7520.0 cpu, 564.0 io, 564.0 network, 0.0 memory}
         :     :              :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 47.0, cumulative cost = {47.0 rows, 0.0 cpu, 564.0 io, 0.0 network, 0.0 memory}
         :     :              +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 44280.6, cumulative cost = {974175.2 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
         :     :                 +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 44280.6, cumulative cost = {929894.6 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
         :     :                    :- Exchange(distribution=[hash[y]]): rowcount = 256699.0, cumulative cost = {513398.0 rows, 4.3125432E7 cpu, 6160776.0 io, 6160776.0 network, 0.0 memory}
         :     :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :     :                    +- Exchange(distribution=[hash[x]]): rowcount = 38505.0, cumulative cost = {372216.0 rows, 6725699.0 cpu, 6160800.0 io, 924144.0 network, 28.0 memory}
         :     :                       +- Calc(select=[x, y0]): rowcount = 38505.0, cumulative cost = {333711.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
         :     :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 38505.0, cumulative cost = {295206.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
         :     :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :     :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :     :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :     +- Calc(select=[y, x00 AS x000]): rowcount = 45146.939999999995, cumulative cost = {1622147.6799999997 rows, 1.051851726E8 cpu, 1.8482352E7 io, 1.43084304E7 network, 4636021.6 memory}
         :        +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x00], build=[right]): rowcount = 45146.939999999995, cumulative cost = {1577000.7399999998 rows, 1.051851726E8 cpu, 1.8482352E7 io, 1.43084304E7 network, 4636021.6 memory}
         :           :- Exchange(distribution=[hash[x]]): rowcount = 256699.0, cumulative cost = {513398.0 rows, 4.3125432E7 cpu, 6160776.0 io, 6160776.0 network, 0.0 memory}
         :           :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :           +- Exchange(distribution=[hash[y]]): rowcount = 44280.6, cumulative cost = {1018455.7999999999 rows, 5.96519038E7 cpu, 1.2321576E7 io, 8147654.4 network, 2156308.0 memory}
         :              +- Calc(select=[y, x0 AS x00]): rowcount = 44280.6, cumulative cost = {974175.2 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
         :                 +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x0], build=[right]): rowcount = 44280.6, cumulative cost = {929894.6 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
         :                    :- Exchange(distribution=[hash[x]]): rowcount = 256699.0, cumulative cost = {513398.0 rows, 4.3125432E7 cpu, 6160776.0 io, 6160776.0 network, 0.0 memory}
         :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :                    +- Exchange(distribution=[hash[y]]): rowcount = 38505.0, cumulative cost = {372216.0 rows, 6725699.0 cpu, 6160800.0 io, 924144.0 network, 28.0 memory}
         :                       +- Calc(select=[y, x0]): rowcount = 38505.0, cumulative cost = {333711.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
         :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, x0, y0], build=[right]): rowcount = 38505.0, cumulative cost = {295206.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
         :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x0 AS X0, X0 AS X1]): rowcount = 11890.411517830302, cumulative cost = {2225916.489895431 rows, 7.915268396620572E7 cpu, 3.0805152E7 io, 9709005.080890825 network, 7078225.479145579 memory}
            +- HashJoin(joinType=[InnerJoin], where=[=(y, x)], select=[x, X0, y, x0], build=[right]): rowcount = 11890.411517830302, cumulative cost = {2214026.0783776008 rows, 7.915268396620572E7 cpu, 3.0805152E7 io, 9709005.080890825 network, 7078225.479145579 memory}
               :- Exchange(distribution=[hash[x]]): rowcount = 40756.010118868675, cumulative cost = {1829782.4668597705 rows, 6.998510948525476E7 cpu, 2.4643692E7 io, 8783999.480890825 network, 4919423.079145579 memory}
               :  +- Calc(select=[x, X0]): rowcount = 40756.010118868675, cumulative cost = {1789026.4567409018 rows, 6.313809978528483E7 cpu, 2.4643692E7 io, 7805855.238037977 network, 4919423.079145579 memory}
               :     +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[x, y, X0, X1], isBroadcast=[true], build=[right]): rowcount = 40756.010118868675, cumulative cost = {1748270.4466220331 rows, 6.313809978528483E7 cpu, 2.4643692E7 io, 7805855.238037977 network, 4919423.079145579 memory}
               :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
               :        +- Exchange(distribution=[broadcast]): rowcount = 15007.73412579119, cumulative cost = {1450815.4365031645 rows, 6.09644459122785E7 cpu, 1.8482916E7 io, 7805855.238037977 network, 4078989.9681012724 memory}
               :           +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 15007.73412579119, cumulative cost = {1435807.7023773734 rows, 5.856320845215191E7 cpu, 1.8482916E7 io, 7445669.619018989 network, 4078989.9681012724 memory}
               :              +- Exchange(distribution=[hash[X0, X1]]): rowcount = 15007.73412579119, cumulative cost = {1420799.9682515822 rows, 5.832308470613925E7 cpu, 1.8482916E7 io, 7445669.619018989 network, 3118494.984050636 memory}
               :                 +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 15007.73412579119, cumulative cost = {1405792.2341257911 rows, 5.56817235E7 cpu, 1.8482916E7 io, 7085484.0 network, 3118494.984050636 memory}
               :                    +- Union(all=[true], union=[X0, X1]): rowcount = 82792.5, cumulative cost = {1390784.5 rows, 5.43570435E7 cpu, 1.8482916E7 io, 7085484.0 network, 2158000.0 memory}
               :                       :- Calc(select=[y AS X0, x AS X1]): rowcount = 38511.9, cumulative cost = {333816.80000000005 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
               :                       :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 38511.9, cumulative cost = {295304.9 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
               :                       :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
               :                       :     +- Exchange(distribution=[broadcast]): rowcount = 47.0, cumulative cost = {94.0 rows, 7520.0 cpu, 564.0 io, 564.0 network, 0.0 memory}
               :                       :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 47.0, cumulative cost = {47.0 rows, 0.0 cpu, 564.0 io, 0.0 network, 0.0 memory}
               :                       +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 44280.6, cumulative cost = {974175.2 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
               :                          +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 44280.6, cumulative cost = {929894.6 rows, 5.2212763E7 cpu, 1.2321576E7 io, 7084920.0 network, 2156308.0 memory}
               :                             :- Exchange(distribution=[hash[y]]): rowcount = 256699.0, cumulative cost = {513398.0 rows, 4.3125432E7 cpu, 6160776.0 io, 6160776.0 network, 0.0 memory}
               :                             :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
               :                             +- Exchange(distribution=[hash[x]]): rowcount = 38505.0, cumulative cost = {372216.0 rows, 6725699.0 cpu, 6160800.0 io, 924144.0 network, 28.0 memory}
               :                                +- Calc(select=[x, y0]): rowcount = 38505.0, cumulative cost = {333711.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
               :                                   +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 38505.0, cumulative cost = {295206.0 rows, 256859.0 cpu, 6160800.0 io, 24.0 network, 28.0 memory}
               :                                      :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
               :                                      +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
               :                                         +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[hash[y]]): rowcount = 38513.4, cumulative cost = {372353.20000000007 rows, 8533419.2 cpu, 6161460.0 io, 925005.6000000001 network, 2052.0 memory}
                  +- Calc(select=[y, x0]): rowcount = 38513.4, cumulative cost = {333839.80000000005 rows, 2063168.0 cpu, 6161460.0 io, 684.0 network, 2052.0 memory}
                     +- HashJoin(joinType=[InnerJoin], where=[=(x0, x)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 38513.4, cumulative cost = {295326.4 rows, 2063168.0 cpu, 6161460.0 io, 684.0 network, 2052.0 memory}
                        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
                        +- Exchange(distribution=[broadcast]): rowcount = 57.0, cumulative cost = {114.0 rows, 9120.0 cpu, 684.0 io, 684.0 network, 0.0 memory}
                           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 57.0, cumulative cost = {57.0 rows, 0.0 cpu, 684.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[x000 AS X0, X0 AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[X0, X1, y, x000], isBroadcast=[true], build=[left])\n:     :- [#1] Exchange(distribution=[broadcast])\n:     +- Calc(select=[y, x00 AS x000])\n:        +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x00], build=[right])\n:           :- [#4] Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])\n:           +- [#5] Exchange(distribution=[hash[y]])\n+- Calc(select=[x0 AS X0, X0 AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(y = x)], select=[x, X0, y, x0], build=[right])\n      :- [#2] Exchange(distribution=[hash[x]])\n      +- [#3] Exchange(distribution=[hash[y]])\n])
         :- Exchange(distribution=[broadcast])(reuse_id=[2])
         :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
         :     +- Exchange(distribution=[hash[X0, X1]])
         :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
         :           +- MultipleInput(readOrder=[1,0,2,1], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[y AS X0, x AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:     :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- Calc(select=[y0 AS X0, x AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])\n      :- [#3] Exchange(distribution=[hash[y]])\n      +- [#4] Exchange(distribution=[hash[x]])\n])
         :              :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :              :- Exchange(distribution=[broadcast])
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :              :- Exchange(distribution=[hash[y]])
         :              :  +- Reused(reference_id=[1])
         :              +- Exchange(distribution=[hash[x]])
         :                 +- Calc(select=[x, y0])
         :                    +- NestedLoopJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])
         :                       :- Reused(reference_id=[1])
         :                       +- Exchange(distribution=[broadcast])(reuse_id=[3])
         :                          +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
         :- Exchange(distribution=[hash[x]])
         :  +- Calc(select=[x, X0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[x, y, X0, X1], isBroadcast=[true], build=[right])
         :        :- Exchange(distribution=[any], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Reused(reference_id=[2])
         :- Exchange(distribution=[hash[y]])
         :  +- Calc(select=[y, x0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(x0 = x)], select=[x, y, x0], isBroadcast=[true], build=[right])
         :        :- Reused(reference_id=[1])
         :        +- Exchange(distribution=[broadcast])
         :           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])
         :  +- Reused(reference_id=[1])
         +- Exchange(distribution=[hash[y]])
            +- Calc(select=[y, x0 AS x00])
               +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x0], build=[right])
                  :- Exchange(distribution=[hash[x]])
                  :  +- Reused(reference_id=[1])
                  +- Exchange(distribution=[hash[y]])
                     +- Calc(select=[y, x0])
                        +- NestedLoopJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, x0, y0], build=[right])
                           :- Reused(reference_id=[1])
                           +- Reused(reference_id=[3])

Job has been submitted with JobID 49d1074cd09e8e38148d1987975a1367
WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT s_2.y AS X0, r_0.x AS X1 FROM s AS s_2 INNER JOIN r AS r_1 on s_2.x = r_1.y INNER JOIN r AS r_0 on r_1.x = r_0.y )), p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1 FROM p12 AS p12_4 INNER JOIN r AS r_3 ON r_3.y = p12_4.X1 INNER JOIN r AS r_2 ON r_2.y = r_3.x INNER JOIN r AS r_1 ON r_1.y = r_2.x INNER JOIN s as s_0 ON s_0.y = r_1.x UNION (SELECT a_0.x AS X0, p12_3.X0 AS X1 FROM a AS a_0 INNER JOIN r AS r_1 ON a_0.x = r_1.x INNER JOIN r AS r_2 ON r_1.y = r_2.x INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1

------------> using sink uuid: 2c59163a_942e_4df6_b66e_28b7f2a92068

Adding statistics for table s number 5 
Adding statistics for table a number 5 
Adding statistics for table b number 5 
Adding statistics for table r number 5 
Adding statistics for table t number 5 
sql argument: WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1
             FROM r AS r_0
                      INNER JOIN b AS b_1 ON r_0.y = b_1.x
             UNION
             (SELECT s_2.y AS X0, r_0.x AS X1
              FROM s AS s_2
                       INNER JOIN r AS r_1 on s_2.x = r_1.y
                       INNER JOIN r AS r_0 on r_1.x = r_0.y
             )),
     p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1
            FROM p12 AS p12_4
                INNER JOIN r AS r_3 ON r_3.y = p12_4.X1
                INNER JOIN r AS r_2 ON r_2.y = r_3.x
                INNER JOIN r AS r_1 ON r_1.y = r_2.x
                INNER JOIN s as s_0 ON s_0.y = r_1.x
            UNION
            (SELECT a_0.x AS X0, p12_3.X0 AS X1
            FROM a AS a_0
                     INNER JOIN r AS r_1 ON a_0.x = r_1.x
                     INNER JOIN r AS r_2 ON r_1.y = r_2.x
                     INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalProject(X0=[$8], X1=[$0])
   :  +- LogicalJoin(condition=[=($9, $6)], joinType=[inner])
   :     :- LogicalJoin(condition=[=($7, $4)], joinType=[inner])
   :     :  :- LogicalJoin(condition=[=($5, $2)], joinType=[inner])
   :     :  :  :- LogicalJoin(condition=[=($3, $1)], joinType=[inner])
   :     :  :  :  :- LogicalUnion(all=[false])
   :     :  :  :  :  :- LogicalProject(X0=[$1], X1=[$0])
   :     :  :  :  :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :     :  :  :  :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :     :  :  :  :  +- LogicalProject(X0=[$1], X1=[$4])
   :     :  :  :  :     +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
   :     :  :  :  :        :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
   :     :  :  :  :        :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$5])
      +- LogicalJoin(condition=[=($4, $6)], joinType=[inner])
         :- LogicalJoin(condition=[=($2, $3)], joinType=[inner])
         :  :- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :  :  :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         +- LogicalUnion(all=[false])
            :- LogicalProject(X0=[$1], X1=[$0])
            :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
            :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
            :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
            +- LogicalProject(X0=[$1], X1=[$4])
               +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
                  :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
                  :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
                  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
                  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 34070.37215974037, cumulative cost = {5.078742322832537E7 rows, 2.6765364600731173E9 cpu, 6.09074928E8 io, 3.519282157360017E8 network, 1.538402018618865E8 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 34070.37215974037, cumulative cost = {5.0753352856165625E7 rows, 2.6759913341185613E9 cpu, 6.09074928E8 io, 3.519282157360017E8 network, 1.516596980436631E8 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 34070.37215974037, cumulative cost = {5.071928248400588E7 rows, 2.669994948618447E9 cpu, 6.09074928E8 io, 3.511105268041679E8 network, 1.516596980436631E8 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 187954.5082150499, cumulative cost = {5.068521211184614E7 rows, 2.666987676487006E9 cpu, 6.09074928E8 io, 3.511105268041679E8 network, 1.4947919422543973E8 memory}
         :- Calc(select=[x000 AS X0, X0 AS X1]): rowcount = 81094.7509057499, cumulative cost = {2.8185652542006496E7 rows, 1.5668072051229396E9 cpu, 3.32220108E8 io, 2.0848646537483996E8 network, 8.587522756271987E7 memory}
         :  +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[X0, X1, y, x000], build=[left]): rowcount = 81094.7509057499, cumulative cost = {2.8104557791100748E7 rows, 1.5668072051229396E9 cpu, 3.32220108E8 io, 2.0848646537483996E8 network, 8.587522756271987E7 memory}
         :     :- Exchange(distribution=[hash[X1]]): rowcount = 134878.5470799993, cumulative cost = {1.3038856400819996E7 rows, 5.489769892362998E8 cpu, 1.66112196E8 io, 7.015317225983997E7 network, 3.665659602623991E7 memory}
         :     :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 134878.5470799993, cumulative cost = {1.2903977853739997E7 rows, 5.263173933268599E8 cpu, 1.66112196E8 io, 6.691608712991998E7 network, 3.665659602623991E7 memory}
         :     :     +- Exchange(distribution=[hash[X0, X1]]): rowcount = 134878.5470799993, cumulative cost = {1.2769099306659998E7 rows, 5.241593365735799E8 cpu, 1.66112196E8 io, 6.691608712991998E7 network, 2.8024369013119955E7 memory}
         :     :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 134878.5470799993, cumulative cost = {1.263422075958E7 rows, 5.004207122875E8 cpu, 1.66112196E8 io, 6.3679002E7 network, 2.8024369013119955E7 memory}
         :     :           +- Union(all=[true], union=[X0, X1]): rowcount = 744078.4874999999, cumulative cost = {1.24993422125E7 rows, 4.885154564875E8 cpu, 1.66112196E8 io, 6.3679002E7 network, 1.9392142E7 memory}
         :     :              :- Calc(select=[y AS X0, x AS X1]): rowcount = 346111.64999999997, cumulative cost = {2999991.3 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :     :              :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 346111.64999999997, cumulative cost = {2653879.65 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :     :              :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :     :              :     +- Exchange(distribution=[broadcast]): rowcount = 357.0, cumulative cost = {714.0 rows, 57120.0 cpu, 4284.0 io, 4284.0 network, 0.0 memory}
         :     :              :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 357.0, cumulative cost = {357.0 rows, 0.0 cpu, 4284.0 io, 0.0 network, 0.0 memory}
         :     :              +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 397966.83749999997, cumulative cost = {8755272.425 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
         :     :                 +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 397966.83749999997, cumulative cost = {8357305.5875 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
         :     :                    :- Exchange(distribution=[hash[y]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
         :     :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :     :                    +- Exchange(distribution=[hash[x]]): rowcount = 346058.25, cumulative cost = {3345230.75 rows, 6.0445E7 cpu, 5.536932E7 io, 8305422.0 network, 28.0 memory}
         :     :                       +- Calc(select=[x, y0]): rowcount = 346058.25, cumulative cost = {2999172.5 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
         :     :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 346058.25, cumulative cost = {2653114.25 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
         :     :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :     :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :     :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :     +- Exchange(distribution=[hash[y]]): rowcount = 405753.125625, cumulative cost = {1.4984606639375001E7 rows, 1.013505162505E9 cpu, 1.66107912E8 io, 1.38333293115E8 network, 4.16654329E7 memory}
         :        +- Calc(select=[y, x00 AS x000]): rowcount = 405753.125625, cumulative cost = {1.4578853513750002E7 rows, 9.453386374E8 cpu, 1.66107912E8 io, 1.285952181E8 network, 4.16654329E7 memory}
         :           +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x00], build=[right]): rowcount = 405753.125625, cumulative cost = {1.4173100388125002E7 rows, 9.453386374E8 cpu, 1.66107912E8 io, 1.285952181E8 network, 4.16654329E7 memory}
         :              :- Exchange(distribution=[hash[x]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :              +- Exchange(distribution=[hash[y]]): rowcount = 397966.83749999997, cumulative cost = {9153239.262500001 rows, 5.361133987E8 cpu, 1.10738616E8 io, 7.32259221E7 network, 1.937929E7 memory}
         :                 +- Calc(select=[y, x0 AS x00]): rowcount = 397966.83749999997, cumulative cost = {8755272.425 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
         :                    +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x0], build=[right]): rowcount = 397966.83749999997, cumulative cost = {8357305.5875 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
         :                       :- Exchange(distribution=[hash[x]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
         :                       :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :                       +- Exchange(distribution=[hash[y]]): rowcount = 346058.25, cumulative cost = {3345230.75 rows, 6.0445E7 cpu, 5.536932E7 io, 8305422.0 network, 28.0 memory}
         :                          +- Calc(select=[y, x0]): rowcount = 346058.25, cumulative cost = {2999172.5 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
         :                             +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, x0, y0], build=[right]): rowcount = 346058.25, cumulative cost = {2653114.25 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
         :                                :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :                                +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                                   +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x0 AS X0, X0 AS X1]): rowcount = 106859.7573093, cumulative cost = {2.2311605061624594E7 rows, 1.099992516855852E9 cpu, 2.7685482E8 io, 1.4262406142932796E8 network, 6.360396666271987E7 memory}
            +- HashJoin(joinType=[InnerJoin], where=[=(y, x)], select=[x, X0, y, x0], build=[right]): rowcount = 106859.7573093, cumulative cost = {2.2204745304315295E7 rows, 1.099992516855852E9 cpu, 2.7685482E8 io, 1.4262406142932796E8 network, 6.360396666271987E7 memory}
               :- Exchange(distribution=[hash[x]]): rowcount = 366289.88206199993, cumulative cost = {1.8751834047005996E7 rows, 1.0176342217993559E9 cpu, 2.21481492E8 io, 1.3431342542932796E8 network, 4.420979466271987E7 memory}
               :  +- Calc(select=[x, X0]): rowcount = 366289.88206199993, cumulative cost = {1.8385544164943997E7 rows, 9.560975216129398E8 cpu, 2.21481492E8 io, 1.2552246825983997E8 network, 4.420979466271987E7 memory}
               :     +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[x, y, X0, X1], build=[right]): rowcount = 366289.88206199993, cumulative cost = {1.8019254282881998E7 rows, 9.560975216129398E8 cpu, 2.21481492E8 io, 1.2552246825983997E8 network, 4.420979466271987E7 memory}
               :        :- Exchange(distribution=[hash[y]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
               :        :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
               :        +- Exchange(distribution=[hash[X1]]): rowcount = 134878.5470799993, cumulative cost = {1.3038856400819996E7 rows, 5.489769892362998E8 cpu, 1.66112196E8 io, 7.015317225983997E7 network, 3.665659602623991E7 memory}
               :           +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 134878.5470799993, cumulative cost = {1.2903977853739997E7 rows, 5.263173933268599E8 cpu, 1.66112196E8 io, 6.691608712991998E7 network, 3.665659602623991E7 memory}
               :              +- Exchange(distribution=[hash[X0, X1]]): rowcount = 134878.5470799993, cumulative cost = {1.2769099306659998E7 rows, 5.241593365735799E8 cpu, 1.66112196E8 io, 6.691608712991998E7 network, 2.8024369013119955E7 memory}
               :                 +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 134878.5470799993, cumulative cost = {1.263422075958E7 rows, 5.004207122875E8 cpu, 1.66112196E8 io, 6.3679002E7 network, 2.8024369013119955E7 memory}
               :                    +- Union(all=[true], union=[X0, X1]): rowcount = 744078.4874999999, cumulative cost = {1.24993422125E7 rows, 4.885154564875E8 cpu, 1.66112196E8 io, 6.3679002E7 network, 1.9392142E7 memory}
               :                       :- Calc(select=[y AS X0, x AS X1]): rowcount = 346111.64999999997, cumulative cost = {2999991.3 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
               :                       :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 346111.64999999997, cumulative cost = {2653879.65 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
               :                       :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
               :                       :     +- Exchange(distribution=[broadcast]): rowcount = 357.0, cumulative cost = {714.0 rows, 57120.0 cpu, 4284.0 io, 4284.0 network, 0.0 memory}
               :                       :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 357.0, cumulative cost = {357.0 rows, 0.0 cpu, 4284.0 io, 0.0 network, 0.0 memory}
               :                       +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 397966.83749999997, cumulative cost = {8755272.425 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
               :                          +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 397966.83749999997, cumulative cost = {8357305.5875 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
               :                             :- Exchange(distribution=[hash[y]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
               :                             :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
               :                             +- Exchange(distribution=[hash[x]]): rowcount = 346058.25, cumulative cost = {3345230.75 rows, 6.0445E7 cpu, 5.536932E7 io, 8305422.0 network, 28.0 memory}
               :                                +- Calc(select=[x, y0]): rowcount = 346058.25, cumulative cost = {2999172.5 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
               :                                   +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 346058.25, cumulative cost = {2653114.25 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
               :                                      :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
               :                                      +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
               :                                         +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[hash[y]]): rowcount = 346108.5, cumulative cost = {3346051.5 rows, 7.6659108E7 cpu, 5.5373328E7 io, 8310636.0 network, 12096.0 memory}
                  +- Calc(select=[y, x0]): rowcount = 346108.5, cumulative cost = {2999943.0 rows, 1.851288E7 cpu, 5.5373328E7 io, 4032.0 network, 12096.0 memory}
                     +- HashJoin(joinType=[InnerJoin], where=[=(x0, x)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 346108.5, cumulative cost = {2653834.5 rows, 1.851288E7 cpu, 5.5373328E7 io, 4032.0 network, 12096.0 memory}
                        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
                        +- Exchange(distribution=[broadcast]): rowcount = 336.0, cumulative cost = {672.0 rows, 53760.0 cpu, 4032.0 io, 4032.0 network, 0.0 memory}
                           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 336.0, cumulative cost = {336.0 rows, 0.0 cpu, 4032.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[0,1,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[x000 AS X0, X0 AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[X0, X1, y, x000], build=[left])\n:     :- [#1] Exchange(distribution=[hash[X1]])\n:     +- [#2] Exchange(distribution=[hash[y]])\n+- Calc(select=[x0 AS X0, X0 AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(y = x)], select=[x, X0, y, x0], build=[right])\n      :- [#3] Exchange(distribution=[hash[x]])\n      +- [#4] Exchange(distribution=[hash[y]])\n])
         :- Exchange(distribution=[hash[X1]])(reuse_id=[3])
         :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
         :     +- Exchange(distribution=[hash[X0, X1]])
         :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
         :           +- MultipleInput(readOrder=[1,0,2,1], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[y AS X0, x AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:     :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- Calc(select=[y0 AS X0, x AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])\n      :- [#3] Exchange(distribution=[hash[y]])\n      +- [#4] Exchange(distribution=[hash[x]])\n])
         :              :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :              :- Exchange(distribution=[broadcast])
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :              :- Exchange(distribution=[hash[y]])
         :              :  +- Reused(reference_id=[1])
         :              +- Exchange(distribution=[hash[x]])
         :                 +- Calc(select=[x, y0])
         :                    +- NestedLoopJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])
         :                       :- Reused(reference_id=[1])
         :                       +- Exchange(distribution=[broadcast])(reuse_id=[2])
         :                          +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
         :- Exchange(distribution=[hash[y]])
         :  +- Calc(select=[y, x00 AS x000])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x00], build=[right])
         :        :- Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Exchange(distribution=[hash[y]])
         :           +- Calc(select=[y, x0 AS x00])
         :              +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x0], build=[right])
         :                 :- Exchange(distribution=[hash[x]])
         :                 :  +- Reused(reference_id=[1])
         :                 +- Exchange(distribution=[hash[y]])
         :                    +- Calc(select=[y, x0])
         :                       +- NestedLoopJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, x0, y0], build=[right])
         :                          :- Reused(reference_id=[1])
         :                          +- Reused(reference_id=[2])
         :- Exchange(distribution=[hash[x]])
         :  +- Calc(select=[x, X0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[x, y, X0, X1], build=[right])
         :        :- Exchange(distribution=[hash[y]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Reused(reference_id=[3])
         +- Exchange(distribution=[hash[y]])
            +- Calc(select=[y, x0])
               +- HashJoin(joinType=[InnerJoin], where=[(x0 = x)], select=[x, y, x0], isBroadcast=[true], build=[right])
                  :- Reused(reference_id=[1])
                  +- Exchange(distribution=[broadcast])
                     +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])

Job has been submitted with JobID 0dd3df319b5534b2da5e168032602c22
WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT s_2.y AS X0, r_0.x AS X1 FROM s AS s_2 INNER JOIN r AS r_1 on s_2.x = r_1.y INNER JOIN r AS r_0 on r_1.x = r_0.y )), p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1 FROM p12 AS p12_4 INNER JOIN r AS r_3 ON r_3.y = p12_4.X1 INNER JOIN r AS r_2 ON r_2.y = r_3.x INNER JOIN r AS r_1 ON r_1.y = r_2.x INNER JOIN s as s_0 ON s_0.y = r_1.x UNION (SELECT a_0.x AS X0, p12_3.X0 AS X1 FROM a AS a_0 INNER JOIN r AS r_1 ON a_0.x = r_1.x INNER JOIN r AS r_2 ON r_1.y = r_2.x INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...

------------> using sink uuid: 9e5996f6_421a_44c3_9a05_33031670e229

Adding statistics for table s number 5 
Adding statistics for table a number 5 
Adding statistics for table b number 5 
Adding statistics for table r number 5 
Adding statistics for table t number 5 
sql argument: WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1
             FROM r AS r_0
                      INNER JOIN b AS b_1 ON r_0.y = b_1.x
             UNION
             (SELECT s_2.y AS X0, r_0.x AS X1
              FROM s AS s_2
                       INNER JOIN r AS r_1 on s_2.x = r_1.y
                       INNER JOIN r AS r_0 on r_1.x = r_0.y
             )),
     p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1
            FROM p12 AS p12_4
                INNER JOIN r AS r_3 ON r_3.y = p12_4.X1
                INNER JOIN r AS r_2 ON r_2.y = r_3.x
                INNER JOIN r AS r_1 ON r_1.y = r_2.x
                INNER JOIN s as s_0 ON s_0.y = r_1.x
            UNION
            (SELECT a_0.x AS X0, p12_3.X0 AS X1
            FROM a AS a_0
                     INNER JOIN r AS r_1 ON a_0.x = r_1.x
                     INNER JOIN r AS r_2 ON r_1.y = r_2.x
                     INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalProject(X0=[$8], X1=[$0])
   :  +- LogicalJoin(condition=[=($9, $6)], joinType=[inner])
   :     :- LogicalJoin(condition=[=($7, $4)], joinType=[inner])
   :     :  :- LogicalJoin(condition=[=($5, $2)], joinType=[inner])
   :     :  :  :- LogicalJoin(condition=[=($3, $1)], joinType=[inner])
   :     :  :  :  :- LogicalUnion(all=[false])
   :     :  :  :  :  :- LogicalProject(X0=[$1], X1=[$0])
   :     :  :  :  :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :     :  :  :  :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :     :  :  :  :  +- LogicalProject(X0=[$1], X1=[$4])
   :     :  :  :  :     +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
   :     :  :  :  :        :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
   :     :  :  :  :        :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$5])
      +- LogicalJoin(condition=[=($4, $6)], joinType=[inner])
         :- LogicalJoin(condition=[=($2, $3)], joinType=[inner])
         :  :- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :  :  :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         +- LogicalUnion(all=[false])
            :- LogicalProject(X0=[$1], X1=[$0])
            :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
            :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
            :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
            +- LogicalProject(X0=[$1], X1=[$4])
               +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
                  :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
                  :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
                  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
                  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 34070.37215974037, cumulative cost = {5.078742322832537E7 rows, 2.6765364600731173E9 cpu, 6.09074928E8 io, 3.519282157360017E8 network, 1.538402018618865E8 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 34070.37215974037, cumulative cost = {5.0753352856165625E7 rows, 2.6759913341185613E9 cpu, 6.09074928E8 io, 3.519282157360017E8 network, 1.516596980436631E8 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 34070.37215974037, cumulative cost = {5.071928248400588E7 rows, 2.669994948618447E9 cpu, 6.09074928E8 io, 3.511105268041679E8 network, 1.516596980436631E8 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 187954.5082150499, cumulative cost = {5.068521211184614E7 rows, 2.666987676487006E9 cpu, 6.09074928E8 io, 3.511105268041679E8 network, 1.4947919422543973E8 memory}
         :- Calc(select=[x000 AS X0, X0 AS X1]): rowcount = 81094.7509057499, cumulative cost = {2.8185652542006496E7 rows, 1.5668072051229396E9 cpu, 3.32220108E8 io, 2.0848646537483996E8 network, 8.587522756271987E7 memory}
         :  +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[X0, X1, y, x000], build=[left]): rowcount = 81094.7509057499, cumulative cost = {2.8104557791100748E7 rows, 1.5668072051229396E9 cpu, 3.32220108E8 io, 2.0848646537483996E8 network, 8.587522756271987E7 memory}
         :     :- Exchange(distribution=[hash[X1]]): rowcount = 134878.5470799993, cumulative cost = {1.3038856400819996E7 rows, 5.489769892362998E8 cpu, 1.66112196E8 io, 7.015317225983997E7 network, 3.665659602623991E7 memory}
         :     :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 134878.5470799993, cumulative cost = {1.2903977853739997E7 rows, 5.263173933268599E8 cpu, 1.66112196E8 io, 6.691608712991998E7 network, 3.665659602623991E7 memory}
         :     :     +- Exchange(distribution=[hash[X0, X1]]): rowcount = 134878.5470799993, cumulative cost = {1.2769099306659998E7 rows, 5.241593365735799E8 cpu, 1.66112196E8 io, 6.691608712991998E7 network, 2.8024369013119955E7 memory}
         :     :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 134878.5470799993, cumulative cost = {1.263422075958E7 rows, 5.004207122875E8 cpu, 1.66112196E8 io, 6.3679002E7 network, 2.8024369013119955E7 memory}
         :     :           +- Union(all=[true], union=[X0, X1]): rowcount = 744078.4874999999, cumulative cost = {1.24993422125E7 rows, 4.885154564875E8 cpu, 1.66112196E8 io, 6.3679002E7 network, 1.9392142E7 memory}
         :     :              :- Calc(select=[y AS X0, x AS X1]): rowcount = 346111.64999999997, cumulative cost = {2999991.3 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :     :              :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 346111.64999999997, cumulative cost = {2653879.65 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :     :              :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :     :              :     +- Exchange(distribution=[broadcast]): rowcount = 357.0, cumulative cost = {714.0 rows, 57120.0 cpu, 4284.0 io, 4284.0 network, 0.0 memory}
         :     :              :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 357.0, cumulative cost = {357.0 rows, 0.0 cpu, 4284.0 io, 0.0 network, 0.0 memory}
         :     :              +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 397966.83749999997, cumulative cost = {8755272.425 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
         :     :                 +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 397966.83749999997, cumulative cost = {8357305.5875 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
         :     :                    :- Exchange(distribution=[hash[y]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
         :     :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :     :                    +- Exchange(distribution=[hash[x]]): rowcount = 346058.25, cumulative cost = {3345230.75 rows, 6.0445E7 cpu, 5.536932E7 io, 8305422.0 network, 28.0 memory}
         :     :                       +- Calc(select=[x, y0]): rowcount = 346058.25, cumulative cost = {2999172.5 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
         :     :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 346058.25, cumulative cost = {2653114.25 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
         :     :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :     :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :     :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :     +- Exchange(distribution=[hash[y]]): rowcount = 405753.125625, cumulative cost = {1.4984606639375001E7 rows, 1.013505162505E9 cpu, 1.66107912E8 io, 1.38333293115E8 network, 4.16654329E7 memory}
         :        +- Calc(select=[y, x00 AS x000]): rowcount = 405753.125625, cumulative cost = {1.4578853513750002E7 rows, 9.453386374E8 cpu, 1.66107912E8 io, 1.285952181E8 network, 4.16654329E7 memory}
         :           +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x00], build=[right]): rowcount = 405753.125625, cumulative cost = {1.4173100388125002E7 rows, 9.453386374E8 cpu, 1.66107912E8 io, 1.285952181E8 network, 4.16654329E7 memory}
         :              :- Exchange(distribution=[hash[x]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :              +- Exchange(distribution=[hash[y]]): rowcount = 397966.83749999997, cumulative cost = {9153239.262500001 rows, 5.361133987E8 cpu, 1.10738616E8 io, 7.32259221E7 network, 1.937929E7 memory}
         :                 +- Calc(select=[y, x0 AS x00]): rowcount = 397966.83749999997, cumulative cost = {8755272.425 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
         :                    +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x0], build=[right]): rowcount = 397966.83749999997, cumulative cost = {8357305.5875 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
         :                       :- Exchange(distribution=[hash[x]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
         :                       :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :                       +- Exchange(distribution=[hash[y]]): rowcount = 346058.25, cumulative cost = {3345230.75 rows, 6.0445E7 cpu, 5.536932E7 io, 8305422.0 network, 28.0 memory}
         :                          +- Calc(select=[y, x0]): rowcount = 346058.25, cumulative cost = {2999172.5 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
         :                             +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, x0, y0], build=[right]): rowcount = 346058.25, cumulative cost = {2653114.25 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
         :                                :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :                                +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                                   +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x0 AS X0, X0 AS X1]): rowcount = 106859.7573093, cumulative cost = {2.2311605061624594E7 rows, 1.099992516855852E9 cpu, 2.7685482E8 io, 1.4262406142932796E8 network, 6.360396666271987E7 memory}
            +- HashJoin(joinType=[InnerJoin], where=[=(y, x)], select=[x, X0, y, x0], build=[right]): rowcount = 106859.7573093, cumulative cost = {2.2204745304315295E7 rows, 1.099992516855852E9 cpu, 2.7685482E8 io, 1.4262406142932796E8 network, 6.360396666271987E7 memory}
               :- Exchange(distribution=[hash[x]]): rowcount = 366289.88206199993, cumulative cost = {1.8751834047005996E7 rows, 1.0176342217993559E9 cpu, 2.21481492E8 io, 1.3431342542932796E8 network, 4.420979466271987E7 memory}
               :  +- Calc(select=[x, X0]): rowcount = 366289.88206199993, cumulative cost = {1.8385544164943997E7 rows, 9.560975216129398E8 cpu, 2.21481492E8 io, 1.2552246825983997E8 network, 4.420979466271987E7 memory}
               :     +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[x, y, X0, X1], build=[right]): rowcount = 366289.88206199993, cumulative cost = {1.8019254282881998E7 rows, 9.560975216129398E8 cpu, 2.21481492E8 io, 1.2552246825983997E8 network, 4.420979466271987E7 memory}
               :        :- Exchange(distribution=[hash[y]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
               :        :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
               :        +- Exchange(distribution=[hash[X1]]): rowcount = 134878.5470799993, cumulative cost = {1.3038856400819996E7 rows, 5.489769892362998E8 cpu, 1.66112196E8 io, 7.015317225983997E7 network, 3.665659602623991E7 memory}
               :           +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 134878.5470799993, cumulative cost = {1.2903977853739997E7 rows, 5.263173933268599E8 cpu, 1.66112196E8 io, 6.691608712991998E7 network, 3.665659602623991E7 memory}
               :              +- Exchange(distribution=[hash[X0, X1]]): rowcount = 134878.5470799993, cumulative cost = {1.2769099306659998E7 rows, 5.241593365735799E8 cpu, 1.66112196E8 io, 6.691608712991998E7 network, 2.8024369013119955E7 memory}
               :                 +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 134878.5470799993, cumulative cost = {1.263422075958E7 rows, 5.004207122875E8 cpu, 1.66112196E8 io, 6.3679002E7 network, 2.8024369013119955E7 memory}
               :                    +- Union(all=[true], union=[X0, X1]): rowcount = 744078.4874999999, cumulative cost = {1.24993422125E7 rows, 4.885154564875E8 cpu, 1.66112196E8 io, 6.3679002E7 network, 1.9392142E7 memory}
               :                       :- Calc(select=[y AS X0, x AS X1]): rowcount = 346111.64999999997, cumulative cost = {2999991.3 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
               :                       :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 346111.64999999997, cumulative cost = {2653879.65 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
               :                       :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
               :                       :     +- Exchange(distribution=[broadcast]): rowcount = 357.0, cumulative cost = {714.0 rows, 57120.0 cpu, 4284.0 io, 4284.0 network, 0.0 memory}
               :                       :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 357.0, cumulative cost = {357.0 rows, 0.0 cpu, 4284.0 io, 0.0 network, 0.0 memory}
               :                       +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 397966.83749999997, cumulative cost = {8755272.425 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
               :                          +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 397966.83749999997, cumulative cost = {8357305.5875 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
               :                             :- Exchange(distribution=[hash[y]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
               :                             :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
               :                             +- Exchange(distribution=[hash[x]]): rowcount = 346058.25, cumulative cost = {3345230.75 rows, 6.0445E7 cpu, 5.536932E7 io, 8305422.0 network, 28.0 memory}
               :                                +- Calc(select=[x, y0]): rowcount = 346058.25, cumulative cost = {2999172.5 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
               :                                   +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 346058.25, cumulative cost = {2653114.25 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
               :                                      :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
               :                                      +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
               :                                         +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[hash[y]]): rowcount = 346108.5, cumulative cost = {3346051.5 rows, 7.6659108E7 cpu, 5.5373328E7 io, 8310636.0 network, 12096.0 memory}
                  +- Calc(select=[y, x0]): rowcount = 346108.5, cumulative cost = {2999943.0 rows, 1.851288E7 cpu, 5.5373328E7 io, 4032.0 network, 12096.0 memory}
                     +- HashJoin(joinType=[InnerJoin], where=[=(x0, x)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 346108.5, cumulative cost = {2653834.5 rows, 1.851288E7 cpu, 5.5373328E7 io, 4032.0 network, 12096.0 memory}
                        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
                        +- Exchange(distribution=[broadcast]): rowcount = 336.0, cumulative cost = {672.0 rows, 53760.0 cpu, 4032.0 io, 4032.0 network, 0.0 memory}
                           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 336.0, cumulative cost = {336.0 rows, 0.0 cpu, 4032.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[0,1,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[x000 AS X0, X0 AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[X0, X1, y, x000], build=[left])\n:     :- [#1] Exchange(distribution=[hash[X1]])\n:     +- [#2] Exchange(distribution=[hash[y]])\n+- Calc(select=[x0 AS X0, X0 AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(y = x)], select=[x, X0, y, x0], build=[right])\n      :- [#3] Exchange(distribution=[hash[x]])\n      +- [#4] Exchange(distribution=[hash[y]])\n])
         :- Exchange(distribution=[hash[X1]])(reuse_id=[3])
         :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
         :     +- Exchange(distribution=[hash[X0, X1]])
         :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
         :           +- MultipleInput(readOrder=[1,0,2,1], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[y AS X0, x AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:     :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- Calc(select=[y0 AS X0, x AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])\n      :- [#3] Exchange(distribution=[hash[y]])\n      +- [#4] Exchange(distribution=[hash[x]])\n])
         :              :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :              :- Exchange(distribution=[broadcast])
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :              :- Exchange(distribution=[hash[y]])
         :              :  +- Reused(reference_id=[1])
         :              +- Exchange(distribution=[hash[x]])
         :                 +- Calc(select=[x, y0])
         :                    +- NestedLoopJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])
         :                       :- Reused(reference_id=[1])
         :                       +- Exchange(distribution=[broadcast])(reuse_id=[2])
         :                          +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
         :- Exchange(distribution=[hash[y]])
         :  +- Calc(select=[y, x00 AS x000])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x00], build=[right])
         :        :- Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Exchange(distribution=[hash[y]])
         :           +- Calc(select=[y, x0 AS x00])
         :              +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x0], build=[right])
         :                 :- Exchange(distribution=[hash[x]])
         :                 :  +- Reused(reference_id=[1])
         :                 +- Exchange(distribution=[hash[y]])
         :                    +- Calc(select=[y, x0])
         :                       +- NestedLoopJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, x0, y0], build=[right])
         :                          :- Reused(reference_id=[1])
         :                          +- Reused(reference_id=[2])
         :- Exchange(distribution=[hash[x]])
         :  +- Calc(select=[x, X0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[x, y, X0, X1], build=[right])
         :        :- Exchange(distribution=[hash[y]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Reused(reference_id=[3])
         +- Exchange(distribution=[hash[y]])
            +- Calc(select=[y, x0])
               +- HashJoin(joinType=[InnerJoin], where=[(x0 = x)], select=[x, y, x0], isBroadcast=[true], build=[right])
                  :- Reused(reference_id=[1])
                  +- Exchange(distribution=[broadcast])
                     +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])

Job has been submitted with JobID 65d59ec61496bc8061d9d4e45fe60fb6
WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT s_2.y AS X0, r_0.x AS X1 FROM s AS s_2 INNER JOIN r AS r_1 on s_2.x = r_1.y INNER JOIN r AS r_0 on r_1.x = r_0.y )), p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1 FROM p12 AS p12_4 INNER JOIN r AS r_3 ON r_3.y = p12_4.X1 INNER JOIN r AS r_2 ON r_2.y = r_3.x INNER JOIN r AS r_1 ON r_1.y = r_2.x INNER JOIN s as s_0 ON s_0.y = r_1.x UNION (SELECT a_0.x AS X0, p12_3.X0 AS X1 FROM a AS a_0 INNER JOIN r AS r_1 ON a_0.x = r_1.x INNER JOIN r AS r_2 ON r_1.y = r_2.x INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...

------------> using sink uuid: f32c0093_111b_4160_9469_a0625565f29f

Adding statistics for table s number 5 
Adding statistics for table a number 5 
Adding statistics for table b number 5 
Adding statistics for table r number 5 
Adding statistics for table t number 5 
sql argument: WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1
             FROM r AS r_0
                      INNER JOIN b AS b_1 ON r_0.y = b_1.x
             UNION
             (SELECT s_2.y AS X0, r_0.x AS X1
              FROM s AS s_2
                       INNER JOIN r AS r_1 on s_2.x = r_1.y
                       INNER JOIN r AS r_0 on r_1.x = r_0.y
             )),
     p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1
            FROM p12 AS p12_4
                INNER JOIN r AS r_3 ON r_3.y = p12_4.X1
                INNER JOIN r AS r_2 ON r_2.y = r_3.x
                INNER JOIN r AS r_1 ON r_1.y = r_2.x
                INNER JOIN s as s_0 ON s_0.y = r_1.x
            UNION
            (SELECT a_0.x AS X0, p12_3.X0 AS X1
            FROM a AS a_0
                     INNER JOIN r AS r_1 ON a_0.x = r_1.x
                     INNER JOIN r AS r_2 ON r_1.y = r_2.x
                     INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalProject(X0=[$8], X1=[$0])
   :  +- LogicalJoin(condition=[=($9, $6)], joinType=[inner])
   :     :- LogicalJoin(condition=[=($7, $4)], joinType=[inner])
   :     :  :- LogicalJoin(condition=[=($5, $2)], joinType=[inner])
   :     :  :  :- LogicalJoin(condition=[=($3, $1)], joinType=[inner])
   :     :  :  :  :- LogicalUnion(all=[false])
   :     :  :  :  :  :- LogicalProject(X0=[$1], X1=[$0])
   :     :  :  :  :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :     :  :  :  :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :     :  :  :  :  +- LogicalProject(X0=[$1], X1=[$4])
   :     :  :  :  :     +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
   :     :  :  :  :        :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
   :     :  :  :  :        :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$5])
      +- LogicalJoin(condition=[=($4, $6)], joinType=[inner])
         :- LogicalJoin(condition=[=($2, $3)], joinType=[inner])
         :  :- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :  :  :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         +- LogicalUnion(all=[false])
            :- LogicalProject(X0=[$1], X1=[$0])
            :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
            :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
            :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
            +- LogicalProject(X0=[$1], X1=[$4])
               +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
                  :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
                  :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
                  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
                  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 34070.37215974037, cumulative cost = {5.078742322832537E7 rows, 2.6765364600731173E9 cpu, 6.09074928E8 io, 3.519282157360017E8 network, 1.538402018618865E8 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 34070.37215974037, cumulative cost = {5.0753352856165625E7 rows, 2.6759913341185613E9 cpu, 6.09074928E8 io, 3.519282157360017E8 network, 1.516596980436631E8 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 34070.37215974037, cumulative cost = {5.071928248400588E7 rows, 2.669994948618447E9 cpu, 6.09074928E8 io, 3.511105268041679E8 network, 1.516596980436631E8 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 187954.5082150499, cumulative cost = {5.068521211184614E7 rows, 2.666987676487006E9 cpu, 6.09074928E8 io, 3.511105268041679E8 network, 1.4947919422543973E8 memory}
         :- Calc(select=[x000 AS X0, X0 AS X1]): rowcount = 81094.7509057499, cumulative cost = {2.8185652542006496E7 rows, 1.5668072051229396E9 cpu, 3.32220108E8 io, 2.0848646537483996E8 network, 8.587522756271987E7 memory}
         :  +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[X0, X1, y, x000], build=[left]): rowcount = 81094.7509057499, cumulative cost = {2.8104557791100748E7 rows, 1.5668072051229396E9 cpu, 3.32220108E8 io, 2.0848646537483996E8 network, 8.587522756271987E7 memory}
         :     :- Exchange(distribution=[hash[X1]]): rowcount = 134878.5470799993, cumulative cost = {1.3038856400819996E7 rows, 5.489769892362998E8 cpu, 1.66112196E8 io, 7.015317225983997E7 network, 3.665659602623991E7 memory}
         :     :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 134878.5470799993, cumulative cost = {1.2903977853739997E7 rows, 5.263173933268599E8 cpu, 1.66112196E8 io, 6.691608712991998E7 network, 3.665659602623991E7 memory}
         :     :     +- Exchange(distribution=[hash[X0, X1]]): rowcount = 134878.5470799993, cumulative cost = {1.2769099306659998E7 rows, 5.241593365735799E8 cpu, 1.66112196E8 io, 6.691608712991998E7 network, 2.8024369013119955E7 memory}
         :     :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 134878.5470799993, cumulative cost = {1.263422075958E7 rows, 5.004207122875E8 cpu, 1.66112196E8 io, 6.3679002E7 network, 2.8024369013119955E7 memory}
         :     :           +- Union(all=[true], union=[X0, X1]): rowcount = 744078.4874999999, cumulative cost = {1.24993422125E7 rows, 4.885154564875E8 cpu, 1.66112196E8 io, 6.3679002E7 network, 1.9392142E7 memory}
         :     :              :- Calc(select=[y AS X0, x AS X1]): rowcount = 346111.64999999997, cumulative cost = {2999991.3 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :     :              :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 346111.64999999997, cumulative cost = {2653879.65 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :     :              :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :     :              :     +- Exchange(distribution=[broadcast]): rowcount = 357.0, cumulative cost = {714.0 rows, 57120.0 cpu, 4284.0 io, 4284.0 network, 0.0 memory}
         :     :              :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 357.0, cumulative cost = {357.0 rows, 0.0 cpu, 4284.0 io, 0.0 network, 0.0 memory}
         :     :              +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 397966.83749999997, cumulative cost = {8755272.425 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
         :     :                 +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 397966.83749999997, cumulative cost = {8357305.5875 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
         :     :                    :- Exchange(distribution=[hash[y]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
         :     :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :     :                    +- Exchange(distribution=[hash[x]]): rowcount = 346058.25, cumulative cost = {3345230.75 rows, 6.0445E7 cpu, 5.536932E7 io, 8305422.0 network, 28.0 memory}
         :     :                       +- Calc(select=[x, y0]): rowcount = 346058.25, cumulative cost = {2999172.5 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
         :     :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 346058.25, cumulative cost = {2653114.25 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
         :     :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :     :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :     :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :     +- Exchange(distribution=[hash[y]]): rowcount = 405753.125625, cumulative cost = {1.4984606639375001E7 rows, 1.013505162505E9 cpu, 1.66107912E8 io, 1.38333293115E8 network, 4.16654329E7 memory}
         :        +- Calc(select=[y, x00 AS x000]): rowcount = 405753.125625, cumulative cost = {1.4578853513750002E7 rows, 9.453386374E8 cpu, 1.66107912E8 io, 1.285952181E8 network, 4.16654329E7 memory}
         :           +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x00], build=[right]): rowcount = 405753.125625, cumulative cost = {1.4173100388125002E7 rows, 9.453386374E8 cpu, 1.66107912E8 io, 1.285952181E8 network, 4.16654329E7 memory}
         :              :- Exchange(distribution=[hash[x]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :              +- Exchange(distribution=[hash[y]]): rowcount = 397966.83749999997, cumulative cost = {9153239.262500001 rows, 5.361133987E8 cpu, 1.10738616E8 io, 7.32259221E7 network, 1.937929E7 memory}
         :                 +- Calc(select=[y, x0 AS x00]): rowcount = 397966.83749999997, cumulative cost = {8755272.425 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
         :                    +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x0], build=[right]): rowcount = 397966.83749999997, cumulative cost = {8357305.5875 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
         :                       :- Exchange(distribution=[hash[x]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
         :                       :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :                       +- Exchange(distribution=[hash[y]]): rowcount = 346058.25, cumulative cost = {3345230.75 rows, 6.0445E7 cpu, 5.536932E7 io, 8305422.0 network, 28.0 memory}
         :                          +- Calc(select=[y, x0]): rowcount = 346058.25, cumulative cost = {2999172.5 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
         :                             +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, x0, y0], build=[right]): rowcount = 346058.25, cumulative cost = {2653114.25 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
         :                                :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :                                +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                                   +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x0 AS X0, X0 AS X1]): rowcount = 106859.7573093, cumulative cost = {2.2311605061624594E7 rows, 1.099992516855852E9 cpu, 2.7685482E8 io, 1.4262406142932796E8 network, 6.360396666271987E7 memory}
            +- HashJoin(joinType=[InnerJoin], where=[=(y, x)], select=[x, X0, y, x0], build=[right]): rowcount = 106859.7573093, cumulative cost = {2.2204745304315295E7 rows, 1.099992516855852E9 cpu, 2.7685482E8 io, 1.4262406142932796E8 network, 6.360396666271987E7 memory}
               :- Exchange(distribution=[hash[x]]): rowcount = 366289.88206199993, cumulative cost = {1.8751834047005996E7 rows, 1.0176342217993559E9 cpu, 2.21481492E8 io, 1.3431342542932796E8 network, 4.420979466271987E7 memory}
               :  +- Calc(select=[x, X0]): rowcount = 366289.88206199993, cumulative cost = {1.8385544164943997E7 rows, 9.560975216129398E8 cpu, 2.21481492E8 io, 1.2552246825983997E8 network, 4.420979466271987E7 memory}
               :     +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[x, y, X0, X1], build=[right]): rowcount = 366289.88206199993, cumulative cost = {1.8019254282881998E7 rows, 9.560975216129398E8 cpu, 2.21481492E8 io, 1.2552246825983997E8 network, 4.420979466271987E7 memory}
               :        :- Exchange(distribution=[hash[y]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
               :        :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
               :        +- Exchange(distribution=[hash[X1]]): rowcount = 134878.5470799993, cumulative cost = {1.3038856400819996E7 rows, 5.489769892362998E8 cpu, 1.66112196E8 io, 7.015317225983997E7 network, 3.665659602623991E7 memory}
               :           +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 134878.5470799993, cumulative cost = {1.2903977853739997E7 rows, 5.263173933268599E8 cpu, 1.66112196E8 io, 6.691608712991998E7 network, 3.665659602623991E7 memory}
               :              +- Exchange(distribution=[hash[X0, X1]]): rowcount = 134878.5470799993, cumulative cost = {1.2769099306659998E7 rows, 5.241593365735799E8 cpu, 1.66112196E8 io, 6.691608712991998E7 network, 2.8024369013119955E7 memory}
               :                 +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 134878.5470799993, cumulative cost = {1.263422075958E7 rows, 5.004207122875E8 cpu, 1.66112196E8 io, 6.3679002E7 network, 2.8024369013119955E7 memory}
               :                    +- Union(all=[true], union=[X0, X1]): rowcount = 744078.4874999999, cumulative cost = {1.24993422125E7 rows, 4.885154564875E8 cpu, 1.66112196E8 io, 6.3679002E7 network, 1.9392142E7 memory}
               :                       :- Calc(select=[y AS X0, x AS X1]): rowcount = 346111.64999999997, cumulative cost = {2999991.3 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
               :                       :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 346111.64999999997, cumulative cost = {2653879.65 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
               :                       :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
               :                       :     +- Exchange(distribution=[broadcast]): rowcount = 357.0, cumulative cost = {714.0 rows, 57120.0 cpu, 4284.0 io, 4284.0 network, 0.0 memory}
               :                       :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 357.0, cumulative cost = {357.0 rows, 0.0 cpu, 4284.0 io, 0.0 network, 0.0 memory}
               :                       +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 397966.83749999997, cumulative cost = {8755272.425 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
               :                          +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 397966.83749999997, cumulative cost = {8357305.5875 rows, 4.6925497E8 cpu, 1.10738616E8 io, 6.3674718E7 network, 1.937929E7 memory}
               :                             :- Exchange(distribution=[hash[y]]): rowcount = 2307054.0, cumulative cost = {4614108.0 rows, 3.87585072E8 cpu, 5.5369296E7 io, 5.5369296E7 network, 0.0 memory}
               :                             :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
               :                             +- Exchange(distribution=[hash[x]]): rowcount = 346058.25, cumulative cost = {3345230.75 rows, 6.0445E7 cpu, 5.536932E7 io, 8305422.0 network, 28.0 memory}
               :                                +- Calc(select=[x, y0]): rowcount = 346058.25, cumulative cost = {2999172.5 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
               :                                   +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 346058.25, cumulative cost = {2653114.25 rows, 2307214.0 cpu, 5.536932E7 io, 24.0 network, 28.0 memory}
               :                                      :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
               :                                      +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
               :                                         +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[hash[y]]): rowcount = 346108.5, cumulative cost = {3346051.5 rows, 7.6659108E7 cpu, 5.5373328E7 io, 8310636.0 network, 12096.0 memory}
                  +- Calc(select=[y, x0]): rowcount = 346108.5, cumulative cost = {2999943.0 rows, 1.851288E7 cpu, 5.5373328E7 io, 4032.0 network, 12096.0 memory}
                     +- HashJoin(joinType=[InnerJoin], where=[=(x0, x)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 346108.5, cumulative cost = {2653834.5 rows, 1.851288E7 cpu, 5.5373328E7 io, 4032.0 network, 12096.0 memory}
                        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
                        +- Exchange(distribution=[broadcast]): rowcount = 336.0, cumulative cost = {672.0 rows, 53760.0 cpu, 4032.0 io, 4032.0 network, 0.0 memory}
                           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 336.0, cumulative cost = {336.0 rows, 0.0 cpu, 4032.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[0,1,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[x000 AS X0, X0 AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[X0, X1, y, x000], build=[left])\n:     :- [#1] Exchange(distribution=[hash[X1]])\n:     +- [#2] Exchange(distribution=[hash[y]])\n+- Calc(select=[x0 AS X0, X0 AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(y = x)], select=[x, X0, y, x0], build=[right])\n      :- [#3] Exchange(distribution=[hash[x]])\n      +- [#4] Exchange(distribution=[hash[y]])\n])
         :- Exchange(distribution=[hash[X1]])(reuse_id=[3])
         :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
         :     +- Exchange(distribution=[hash[X0, X1]])
         :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
         :           +- MultipleInput(readOrder=[1,0,2,1], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[y AS X0, x AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:     :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- Calc(select=[y0 AS X0, x AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])\n      :- [#3] Exchange(distribution=[hash[y]])\n      +- [#4] Exchange(distribution=[hash[x]])\n])
         :              :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :              :- Exchange(distribution=[broadcast])
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :              :- Exchange(distribution=[hash[y]])
         :              :  +- Reused(reference_id=[1])
         :              +- Exchange(distribution=[hash[x]])
         :                 +- Calc(select=[x, y0])
         :                    +- NestedLoopJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])
         :                       :- Reused(reference_id=[1])
         :                       +- Exchange(distribution=[broadcast])(reuse_id=[2])
         :                          +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
         :- Exchange(distribution=[hash[y]])
         :  +- Calc(select=[y, x00 AS x000])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x00], build=[right])
         :        :- Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Exchange(distribution=[hash[y]])
         :           +- Calc(select=[y, x0 AS x00])
         :              +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x0], build=[right])
         :                 :- Exchange(distribution=[hash[x]])
         :                 :  +- Reused(reference_id=[1])
         :                 +- Exchange(distribution=[hash[y]])
         :                    +- Calc(select=[y, x0])
         :                       +- NestedLoopJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, x0, y0], build=[right])
         :                          :- Reused(reference_id=[1])
         :                          +- Reused(reference_id=[2])
         :- Exchange(distribution=[hash[x]])
         :  +- Calc(select=[x, X0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[x, y, X0, X1], build=[right])
         :        :- Exchange(distribution=[hash[y]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Reused(reference_id=[3])
         +- Exchange(distribution=[hash[y]])
            +- Calc(select=[y, x0])
               +- HashJoin(joinType=[InnerJoin], where=[(x0 = x)], select=[x, y, x0], isBroadcast=[true], build=[right])
                  :- Reused(reference_id=[1])
                  +- Exchange(distribution=[broadcast])
                     +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])

Job has been submitted with JobID 94ef3c395e0e14c0753ae424be7d8807
WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT s_2.y AS X0, r_0.x AS X1 FROM s AS s_2 INNER JOIN r AS r_1 on s_2.x = r_1.y INNER JOIN r AS r_0 on r_1.x = r_0.y )), p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1 FROM p12 AS p12_4 INNER JOIN r AS r_3 ON r_3.y = p12_4.X1 INNER JOIN r AS r_2 ON r_2.y = r_3.x INNER JOIN r AS r_1 ON r_1.y = r_2.x INNER JOIN s as s_0 ON s_0.y = r_1.x UNION (SELECT a_0.x AS X0, p12_3.X0 AS X1 FROM a AS a_0 INNER JOIN r AS r_1 ON a_0.x = r_1.x INNER JOIN r AS r_2 ON r_1.y = r_2.x INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...

------------> using sink uuid: d3fad983_ad6b_41fe_a55f_f847e4513f6f

Adding statistics for table s number 7 
Adding statistics for table a number 7 
Adding statistics for table b number 7 
Adding statistics for table r number 7 
Adding statistics for table t number 7 
sql argument: WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1
             FROM r AS r_0
                      INNER JOIN b AS b_1 ON r_0.y = b_1.x
             UNION
             (SELECT s_2.y AS X0, r_0.x AS X1
              FROM s AS s_2
                       INNER JOIN r AS r_1 on s_2.x = r_1.y
                       INNER JOIN r AS r_0 on r_1.x = r_0.y
             )),
     p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1
            FROM p12 AS p12_4
                INNER JOIN r AS r_3 ON r_3.y = p12_4.X1
                INNER JOIN r AS r_2 ON r_2.y = r_3.x
                INNER JOIN r AS r_1 ON r_1.y = r_2.x
                INNER JOIN s as s_0 ON s_0.y = r_1.x
            UNION
            (SELECT a_0.x AS X0, p12_3.X0 AS X1
            FROM a AS a_0
                     INNER JOIN r AS r_1 ON a_0.x = r_1.x
                     INNER JOIN r AS r_2 ON r_1.y = r_2.x
                     INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalProject(X0=[$8], X1=[$0])
   :  +- LogicalJoin(condition=[=($9, $6)], joinType=[inner])
   :     :- LogicalJoin(condition=[=($7, $4)], joinType=[inner])
   :     :  :- LogicalJoin(condition=[=($5, $2)], joinType=[inner])
   :     :  :  :- LogicalJoin(condition=[=($3, $1)], joinType=[inner])
   :     :  :  :  :- LogicalUnion(all=[false])
   :     :  :  :  :  :- LogicalProject(X0=[$1], X1=[$0])
   :     :  :  :  :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :     :  :  :  :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :     :  :  :  :  +- LogicalProject(X0=[$1], X1=[$4])
   :     :  :  :  :     +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
   :     :  :  :  :        :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
   :     :  :  :  :        :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$5])
      +- LogicalJoin(condition=[=($4, $6)], joinType=[inner])
         :- LogicalJoin(condition=[=($2, $3)], joinType=[inner])
         :  :- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :  :  :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         +- LogicalUnion(all=[false])
            :- LogicalProject(X0=[$1], X1=[$0])
            :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
            :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
            :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
            +- LogicalProject(X0=[$1], X1=[$4])
               +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
                  :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
                  :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
                  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
                  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 94661.99978162195, cumulative cost = {1.4110860038951352E8 rows, 7.436472461903848E9 cpu, 1.692285912E9 io, 9.778074315402737E8 network, 4.27391124176841E8 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 94661.99978162195, cumulative cost = {1.410139383897319E8 rows, 7.434957869907342E9 cpu, 1.692285912E9 io, 9.778074315402737E8 network, 4.2133275619081724E8 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 94661.99978162195, cumulative cost = {1.409192763899503E8 rows, 7.418297357945777E9 cpu, 1.692285912E9 io, 9.755355435455147E8 network, 4.2133275619081724E8 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 522217.647995997, cumulative cost = {1.408246143901687E8 rows, 7.409941875577841E9 cpu, 1.692285912E9 io, 9.755355435455147E8 network, 4.1527438820479345E8 memory}
         :- Calc(select=[x000 AS X0, X0 AS X1]): rowcount = 225318.10511282345, cumulative cost = {7.831206441173425E7 rows, 4.353259023198794E9 cpu, 9.23060508E8 io, 5.792689356001035E8 network, 2.3858465178239673E8 memory}
         :  +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[X0, X1, y, x000], build=[left]): rowcount = 225318.10511282345, cumulative cost = {7.808674630662143E7 rows, 4.353259023198794E9 cpu, 9.23060508E8 io, 5.792689356001035E8 network, 2.3858465178239673E8 memory}
         :     :- Exchange(distribution=[hash[X1]]): rowcount = 374745.2392521563, cumulative cost = {3.622705738700863E7 rows, 1.5252422625007763E9 cpu, 4.61533644E8 io, 1.949132010841035E8 network, 1.01832565024276E8 memory}
         :     :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 374745.2392521563, cumulative cost = {3.585231214775647E7 rows, 1.4622850623064141E9 cpu, 4.61533644E8 io, 1.8591931534205174E8 network, 1.01832565024276E8 memory}
         :     :     +- Exchange(distribution=[hash[X0, X1]]): rowcount = 374745.2392521563, cumulative cost = {3.5477566908504315E7 rows, 1.4562891384783797E9 cpu, 4.61533644E8 io, 1.8591931534205174E8 network, 7.7848869712138E7 memory}
         :     :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 374745.2392521563, cumulative cost = {3.510282166925216E7 rows, 1.3903339763700001E9 cpu, 4.61533644E8 io, 1.769254296E8 network, 7.7848869712138E7 memory}
         :     :           +- Union(all=[true], union=[X0, X1]): rowcount = 2067340.41, cumulative cost = {3.472807643E7 rows, 1.3572565298100002E9 cpu, 4.61533644E8 io, 1.769254296E8 network, 5.38651744E7 memory}
         :     :              :- Calc(select=[y AS X0, x AS X1]): rowcount = 961599.0, cumulative cost = {8334423.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :     :              :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 961599.0, cumulative cost = {7372824.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :     :              :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :     :              :     +- Exchange(distribution=[broadcast]): rowcount = 565.0, cumulative cost = {1130.0 rows, 90400.0 cpu, 6780.0 io, 6780.0 network, 0.0 memory}
         :     :              :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 565.0, cumulative cost = {565.0 rows, 0.0 cpu, 6780.0 io, 0.0 network, 0.0 memory}
         :     :              +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 1105741.41, cumulative cost = {2.432631302E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
         :     :                 +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 1105741.41, cumulative cost = {2.322057161E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
         :     :                    :- Exchange(distribution=[hash[y]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
         :     :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :     :                    +- Exchange(distribution=[hash[x]]): rowcount = 961514.3999999999, cumulative cost = {9294640.200000001 rows, 1.679446742E8 cpu, 1.53842304E8 io, 2.3076369599999998E7 network, 28.0 memory}
         :     :                       +- Calc(select=[x, y0]): rowcount = 961514.3999999999, cumulative cost = {8333125.800000001 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
         :     :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 961514.3999999999, cumulative cost = {7371611.4 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
         :     :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :     :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :     :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :     +- Exchange(distribution=[hash[y]]): rowcount = 1127375.4615, cumulative cost = {4.163437081449999E7 rows, 2.8159997950920005E9 cpu, 4.61526864E8 io, 3.84355734516E8 network, 1.1576635335999998E8 memory}
         :        +- Calc(select=[y, x00 AS x000]): rowcount = 1127375.4615, cumulative cost = {4.050699535299999E7 rows, 2.6266007175600004E9 cpu, 4.61526864E8 io, 3.5729872344E8 network, 1.1576635335999998E8 memory}
         :           +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x00], build=[right]): rowcount = 1127375.4615, cumulative cost = {3.9379619891499996E7 rows, 2.6266007175600004E9 cpu, 4.61526864E8 io, 3.5729872344E8 network, 1.1576635335999998E8 memory}
         :              :- Exchange(distribution=[hash[x]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :              +- Exchange(distribution=[hash[y]]): rowcount = 1105741.41, cumulative cost = {2.543205443E7 rows, 1.4895780662800002E9 cpu, 3.07684584E8 io, 2.0345644344E8 network, 5.38448344E7 memory}
         :                 +- Calc(select=[y, x0 AS x00]): rowcount = 1105741.41, cumulative cost = {2.432631302E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
         :                    +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x0], build=[right]): rowcount = 1105741.41, cumulative cost = {2.322057161E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
         :                       :- Exchange(distribution=[hash[x]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
         :                       :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :                       +- Exchange(distribution=[hash[y]]): rowcount = 961514.3999999999, cumulative cost = {9294640.200000001 rows, 1.679446742E8 cpu, 1.53842304E8 io, 2.3076369599999998E7 network, 28.0 memory}
         :                          +- Calc(select=[y, x0]): rowcount = 961514.3999999999, cumulative cost = {8333125.800000001 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
         :                             +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, x0, y0], build=[right]): rowcount = 961514.3999999999, cumulative cost = {7371611.4 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
         :                                :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :                                +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                                   +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x0 AS X0, X0 AS X1]): rowcount = 296899.5428831735, cumulative cost = {6.199033233043844E7 rows, 3.0561606347310505E9 cpu, 7.69225404E8 io, 3.962666079454112E8 network, 1.7668973642239675E8 memory}
            +- HashJoin(joinType=[InnerJoin], where=[=(y, x)], select=[x, X0, y, x0], build=[right]): rowcount = 296899.5428831735, cumulative cost = {6.169343278755527E7 rows, 3.0561606347310505E9 cpu, 7.69225404E8 io, 3.962666079454112E8 network, 1.7668973642239675E8 memory}
               :- Exchange(distribution=[hash[x]]): rowcount = 1017726.0358878234, cumulative cost = {5.21004254946721E7 rows, 2.827394918443948E9 cpu, 6.15375924E8 io, 3.731809059454112E8 network, 1.2281829842239675E8 memory}
               :  +- Calc(select=[x, X0]): rowcount = 1017726.0358878234, cumulative cost = {5.1082699458784275E7 rows, 2.6564169444147935E9 cpu, 6.15375924E8 io, 3.4875548108410347E8 network, 1.2281829842239675E8 memory}
               :     +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[x, y, X0, X1], build=[right]): rowcount = 1017726.0358878234, cumulative cost = {5.006497342289645E7 rows, 2.6564169444147935E9 cpu, 6.15375924E8 io, 3.4875548108410347E8 network, 1.2281829842239675E8 memory}
               :        :- Exchange(distribution=[hash[y]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
               :        :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
               :        +- Exchange(distribution=[hash[X1]]): rowcount = 374745.2392521563, cumulative cost = {3.622705738700863E7 rows, 1.5252422625007763E9 cpu, 4.61533644E8 io, 1.949132010841035E8 network, 1.01832565024276E8 memory}
               :           +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 374745.2392521563, cumulative cost = {3.585231214775647E7 rows, 1.4622850623064141E9 cpu, 4.61533644E8 io, 1.8591931534205174E8 network, 1.01832565024276E8 memory}
               :              +- Exchange(distribution=[hash[X0, X1]]): rowcount = 374745.2392521563, cumulative cost = {3.5477566908504315E7 rows, 1.4562891384783797E9 cpu, 4.61533644E8 io, 1.8591931534205174E8 network, 7.7848869712138E7 memory}
               :                 +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 374745.2392521563, cumulative cost = {3.510282166925216E7 rows, 1.3903339763700001E9 cpu, 4.61533644E8 io, 1.769254296E8 network, 7.7848869712138E7 memory}
               :                    +- Union(all=[true], union=[X0, X1]): rowcount = 2067340.41, cumulative cost = {3.472807643E7 rows, 1.3572565298100002E9 cpu, 4.61533644E8 io, 1.769254296E8 network, 5.38651744E7 memory}
               :                       :- Calc(select=[y AS X0, x AS X1]): rowcount = 961599.0, cumulative cost = {8334423.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
               :                       :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 961599.0, cumulative cost = {7372824.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
               :                       :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
               :                       :     +- Exchange(distribution=[broadcast]): rowcount = 565.0, cumulative cost = {1130.0 rows, 90400.0 cpu, 6780.0 io, 6780.0 network, 0.0 memory}
               :                       :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 565.0, cumulative cost = {565.0 rows, 0.0 cpu, 6780.0 io, 0.0 network, 0.0 memory}
               :                       +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 1105741.41, cumulative cost = {2.432631302E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
               :                          +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 1105741.41, cumulative cost = {2.322057161E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
               :                             :- Exchange(distribution=[hash[y]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
               :                             :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
               :                             +- Exchange(distribution=[hash[x]]): rowcount = 961514.3999999999, cumulative cost = {9294640.200000001 rows, 1.679446742E8 cpu, 1.53842304E8 io, 2.3076369599999998E7 network, 28.0 memory}
               :                                +- Calc(select=[x, y0]): rowcount = 961514.3999999999, cumulative cost = {8333125.800000001 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
               :                                   +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 961514.3999999999, cumulative cost = {7371611.4 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
               :                                      :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
               :                                      +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
               :                                         +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[hash[y]]): rowcount = 961604.25, cumulative cost = {9296107.75 rows, 2.12931074E8 cpu, 1.5384948E8 io, 2.3085702E7 network, 21600.0 memory}
                  +- Calc(select=[y, x0]): rowcount = 961604.25, cumulative cost = {8334503.5 rows, 5.138156E7 cpu, 1.5384948E8 io, 7200.0 network, 21600.0 memory}
                     +- HashJoin(joinType=[InnerJoin], where=[=(x0, x)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 961604.25, cumulative cost = {7372899.25 rows, 5.138156E7 cpu, 1.5384948E8 io, 7200.0 network, 21600.0 memory}
                        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
                        +- Exchange(distribution=[broadcast]): rowcount = 600.0, cumulative cost = {1200.0 rows, 96000.0 cpu, 7200.0 io, 7200.0 network, 0.0 memory}
                           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 600.0, cumulative cost = {600.0 rows, 0.0 cpu, 7200.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[0,1,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[x000 AS X0, X0 AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[X0, X1, y, x000], build=[left])\n:     :- [#1] Exchange(distribution=[hash[X1]])\n:     +- [#2] Exchange(distribution=[hash[y]])\n+- Calc(select=[x0 AS X0, X0 AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(y = x)], select=[x, X0, y, x0], build=[right])\n      :- [#3] Exchange(distribution=[hash[x]])\n      +- [#4] Exchange(distribution=[hash[y]])\n])
         :- Exchange(distribution=[hash[X1]])(reuse_id=[3])
         :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
         :     +- Exchange(distribution=[hash[X0, X1]])
         :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
         :           +- MultipleInput(readOrder=[1,0,2,1], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[y AS X0, x AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:     :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- Calc(select=[y0 AS X0, x AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])\n      :- [#3] Exchange(distribution=[hash[y]])\n      +- [#4] Exchange(distribution=[hash[x]])\n])
         :              :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :              :- Exchange(distribution=[broadcast])
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :              :- Exchange(distribution=[hash[y]])
         :              :  +- Reused(reference_id=[1])
         :              +- Exchange(distribution=[hash[x]])
         :                 +- Calc(select=[x, y0])
         :                    +- NestedLoopJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])
         :                       :- Reused(reference_id=[1])
         :                       +- Exchange(distribution=[broadcast])(reuse_id=[2])
         :                          +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
         :- Exchange(distribution=[hash[y]])
         :  +- Calc(select=[y, x00 AS x000])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x00], build=[right])
         :        :- Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Exchange(distribution=[hash[y]])
         :           +- Calc(select=[y, x0 AS x00])
         :              +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x0], build=[right])
         :                 :- Exchange(distribution=[hash[x]])
         :                 :  +- Reused(reference_id=[1])
         :                 +- Exchange(distribution=[hash[y]])
         :                    +- Calc(select=[y, x0])
         :                       +- NestedLoopJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, x0, y0], build=[right])
         :                          :- Reused(reference_id=[1])
         :                          +- Reused(reference_id=[2])
         :- Exchange(distribution=[hash[x]])
         :  +- Calc(select=[x, X0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[x, y, X0, X1], build=[right])
         :        :- Exchange(distribution=[hash[y]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Reused(reference_id=[3])
         +- Exchange(distribution=[hash[y]])
            +- Calc(select=[y, x0])
               +- HashJoin(joinType=[InnerJoin], where=[(x0 = x)], select=[x, y, x0], isBroadcast=[true], build=[right])
                  :- Reused(reference_id=[1])
                  +- Exchange(distribution=[broadcast])
                     +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])

Job has been submitted with JobID e8774909ff9c10ba7a0d1a6b92a49318
WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT s_2.y AS X0, r_0.x AS X1 FROM s AS s_2 INNER JOIN r AS r_1 on s_2.x = r_1.y INNER JOIN r AS r_0 on r_1.x = r_0.y )), p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1 FROM p12 AS p12_4 INNER JOIN r AS r_3 ON r_3.y = p12_4.X1 INNER JOIN r AS r_2 ON r_2.y = r_3.x INNER JOIN r AS r_1 ON r_1.y = r_2.x INNER JOIN s as s_0 ON s_0.y = r_1.x UNION (SELECT a_0.x AS X0, p12_3.X0 AS X1 FROM a AS a_0 INNER JOIN r AS r_1 ON a_0.x = r_1.x INNER JOIN r AS r_2 ON r_1.y = r_2.x INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...
waiting...

------------> using sink uuid: e1230ad8_05f3_493b_bd14_a9195b3c5b86

Adding statistics for table s number 7 
Adding statistics for table a number 7 
Adding statistics for table b number 7 
Adding statistics for table r number 7 
Adding statistics for table t number 7 
sql argument: WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1
             FROM r AS r_0
                      INNER JOIN b AS b_1 ON r_0.y = b_1.x
             UNION
             (SELECT s_2.y AS X0, r_0.x AS X1
              FROM s AS s_2
                       INNER JOIN r AS r_1 on s_2.x = r_1.y
                       INNER JOIN r AS r_0 on r_1.x = r_0.y
             )),
     p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1
            FROM p12 AS p12_4
                INNER JOIN r AS r_3 ON r_3.y = p12_4.X1
                INNER JOIN r AS r_2 ON r_2.y = r_3.x
                INNER JOIN r AS r_1 ON r_1.y = r_2.x
                INNER JOIN s as s_0 ON s_0.y = r_1.x
            UNION
            (SELECT a_0.x AS X0, p12_3.X0 AS X1
            FROM a AS a_0
                     INNER JOIN r AS r_1 ON a_0.x = r_1.x
                     INNER JOIN r AS r_2 ON r_1.y = r_2.x
                     INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalProject(X0=[$8], X1=[$0])
   :  +- LogicalJoin(condition=[=($9, $6)], joinType=[inner])
   :     :- LogicalJoin(condition=[=($7, $4)], joinType=[inner])
   :     :  :- LogicalJoin(condition=[=($5, $2)], joinType=[inner])
   :     :  :  :- LogicalJoin(condition=[=($3, $1)], joinType=[inner])
   :     :  :  :  :- LogicalUnion(all=[false])
   :     :  :  :  :  :- LogicalProject(X0=[$1], X1=[$0])
   :     :  :  :  :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :     :  :  :  :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :     :  :  :  :  +- LogicalProject(X0=[$1], X1=[$4])
   :     :  :  :  :     +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
   :     :  :  :  :        :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
   :     :  :  :  :        :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$5])
      +- LogicalJoin(condition=[=($4, $6)], joinType=[inner])
         :- LogicalJoin(condition=[=($2, $3)], joinType=[inner])
         :  :- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :  :  :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         +- LogicalUnion(all=[false])
            :- LogicalProject(X0=[$1], X1=[$0])
            :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
            :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
            :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
            +- LogicalProject(X0=[$1], X1=[$4])
               +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
                  :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
                  :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
                  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
                  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 94661.99978162195, cumulative cost = {1.4110860038951352E8 rows, 7.436472461903848E9 cpu, 1.692285912E9 io, 9.778074315402737E8 network, 4.27391124176841E8 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 94661.99978162195, cumulative cost = {1.410139383897319E8 rows, 7.434957869907342E9 cpu, 1.692285912E9 io, 9.778074315402737E8 network, 4.2133275619081724E8 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 94661.99978162195, cumulative cost = {1.409192763899503E8 rows, 7.418297357945777E9 cpu, 1.692285912E9 io, 9.755355435455147E8 network, 4.2133275619081724E8 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 522217.647995997, cumulative cost = {1.408246143901687E8 rows, 7.409941875577841E9 cpu, 1.692285912E9 io, 9.755355435455147E8 network, 4.1527438820479345E8 memory}
         :- Calc(select=[x000 AS X0, X0 AS X1]): rowcount = 225318.10511282345, cumulative cost = {7.831206441173425E7 rows, 4.353259023198794E9 cpu, 9.23060508E8 io, 5.792689356001035E8 network, 2.3858465178239673E8 memory}
         :  +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[X0, X1, y, x000], build=[left]): rowcount = 225318.10511282345, cumulative cost = {7.808674630662143E7 rows, 4.353259023198794E9 cpu, 9.23060508E8 io, 5.792689356001035E8 network, 2.3858465178239673E8 memory}
         :     :- Exchange(distribution=[hash[X1]]): rowcount = 374745.2392521563, cumulative cost = {3.622705738700863E7 rows, 1.5252422625007763E9 cpu, 4.61533644E8 io, 1.949132010841035E8 network, 1.01832565024276E8 memory}
         :     :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 374745.2392521563, cumulative cost = {3.585231214775647E7 rows, 1.4622850623064141E9 cpu, 4.61533644E8 io, 1.8591931534205174E8 network, 1.01832565024276E8 memory}
         :     :     +- Exchange(distribution=[hash[X0, X1]]): rowcount = 374745.2392521563, cumulative cost = {3.5477566908504315E7 rows, 1.4562891384783797E9 cpu, 4.61533644E8 io, 1.8591931534205174E8 network, 7.7848869712138E7 memory}
         :     :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 374745.2392521563, cumulative cost = {3.510282166925216E7 rows, 1.3903339763700001E9 cpu, 4.61533644E8 io, 1.769254296E8 network, 7.7848869712138E7 memory}
         :     :           +- Union(all=[true], union=[X0, X1]): rowcount = 2067340.41, cumulative cost = {3.472807643E7 rows, 1.3572565298100002E9 cpu, 4.61533644E8 io, 1.769254296E8 network, 5.38651744E7 memory}
         :     :              :- Calc(select=[y AS X0, x AS X1]): rowcount = 961599.0, cumulative cost = {8334423.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :     :              :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 961599.0, cumulative cost = {7372824.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :     :              :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :     :              :     +- Exchange(distribution=[broadcast]): rowcount = 565.0, cumulative cost = {1130.0 rows, 90400.0 cpu, 6780.0 io, 6780.0 network, 0.0 memory}
         :     :              :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 565.0, cumulative cost = {565.0 rows, 0.0 cpu, 6780.0 io, 0.0 network, 0.0 memory}
         :     :              +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 1105741.41, cumulative cost = {2.432631302E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
         :     :                 +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 1105741.41, cumulative cost = {2.322057161E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
         :     :                    :- Exchange(distribution=[hash[y]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
         :     :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :     :                    +- Exchange(distribution=[hash[x]]): rowcount = 961514.3999999999, cumulative cost = {9294640.200000001 rows, 1.679446742E8 cpu, 1.53842304E8 io, 2.3076369599999998E7 network, 28.0 memory}
         :     :                       +- Calc(select=[x, y0]): rowcount = 961514.3999999999, cumulative cost = {8333125.800000001 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
         :     :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 961514.3999999999, cumulative cost = {7371611.4 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
         :     :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :     :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :     :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :     +- Exchange(distribution=[hash[y]]): rowcount = 1127375.4615, cumulative cost = {4.163437081449999E7 rows, 2.8159997950920005E9 cpu, 4.61526864E8 io, 3.84355734516E8 network, 1.1576635335999998E8 memory}
         :        +- Calc(select=[y, x00 AS x000]): rowcount = 1127375.4615, cumulative cost = {4.050699535299999E7 rows, 2.6266007175600004E9 cpu, 4.61526864E8 io, 3.5729872344E8 network, 1.1576635335999998E8 memory}
         :           +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x00], build=[right]): rowcount = 1127375.4615, cumulative cost = {3.9379619891499996E7 rows, 2.6266007175600004E9 cpu, 4.61526864E8 io, 3.5729872344E8 network, 1.1576635335999998E8 memory}
         :              :- Exchange(distribution=[hash[x]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :              +- Exchange(distribution=[hash[y]]): rowcount = 1105741.41, cumulative cost = {2.543205443E7 rows, 1.4895780662800002E9 cpu, 3.07684584E8 io, 2.0345644344E8 network, 5.38448344E7 memory}
         :                 +- Calc(select=[y, x0 AS x00]): rowcount = 1105741.41, cumulative cost = {2.432631302E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
         :                    +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x0], build=[right]): rowcount = 1105741.41, cumulative cost = {2.322057161E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
         :                       :- Exchange(distribution=[hash[x]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
         :                       :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :                       +- Exchange(distribution=[hash[y]]): rowcount = 961514.3999999999, cumulative cost = {9294640.200000001 rows, 1.679446742E8 cpu, 1.53842304E8 io, 2.3076369599999998E7 network, 28.0 memory}
         :                          +- Calc(select=[y, x0]): rowcount = 961514.3999999999, cumulative cost = {8333125.800000001 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
         :                             +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, x0, y0], build=[right]): rowcount = 961514.3999999999, cumulative cost = {7371611.4 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
         :                                :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :                                +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                                   +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x0 AS X0, X0 AS X1]): rowcount = 296899.5428831735, cumulative cost = {6.199033233043844E7 rows, 3.0561606347310505E9 cpu, 7.69225404E8 io, 3.962666079454112E8 network, 1.7668973642239675E8 memory}
            +- HashJoin(joinType=[InnerJoin], where=[=(y, x)], select=[x, X0, y, x0], build=[right]): rowcount = 296899.5428831735, cumulative cost = {6.169343278755527E7 rows, 3.0561606347310505E9 cpu, 7.69225404E8 io, 3.962666079454112E8 network, 1.7668973642239675E8 memory}
               :- Exchange(distribution=[hash[x]]): rowcount = 1017726.0358878234, cumulative cost = {5.21004254946721E7 rows, 2.827394918443948E9 cpu, 6.15375924E8 io, 3.731809059454112E8 network, 1.2281829842239675E8 memory}
               :  +- Calc(select=[x, X0]): rowcount = 1017726.0358878234, cumulative cost = {5.1082699458784275E7 rows, 2.6564169444147935E9 cpu, 6.15375924E8 io, 3.4875548108410347E8 network, 1.2281829842239675E8 memory}
               :     +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[x, y, X0, X1], build=[right]): rowcount = 1017726.0358878234, cumulative cost = {5.006497342289645E7 rows, 2.6564169444147935E9 cpu, 6.15375924E8 io, 3.4875548108410347E8 network, 1.2281829842239675E8 memory}
               :        :- Exchange(distribution=[hash[y]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
               :        :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
               :        +- Exchange(distribution=[hash[X1]]): rowcount = 374745.2392521563, cumulative cost = {3.622705738700863E7 rows, 1.5252422625007763E9 cpu, 4.61533644E8 io, 1.949132010841035E8 network, 1.01832565024276E8 memory}
               :           +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 374745.2392521563, cumulative cost = {3.585231214775647E7 rows, 1.4622850623064141E9 cpu, 4.61533644E8 io, 1.8591931534205174E8 network, 1.01832565024276E8 memory}
               :              +- Exchange(distribution=[hash[X0, X1]]): rowcount = 374745.2392521563, cumulative cost = {3.5477566908504315E7 rows, 1.4562891384783797E9 cpu, 4.61533644E8 io, 1.8591931534205174E8 network, 7.7848869712138E7 memory}
               :                 +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 374745.2392521563, cumulative cost = {3.510282166925216E7 rows, 1.3903339763700001E9 cpu, 4.61533644E8 io, 1.769254296E8 network, 7.7848869712138E7 memory}
               :                    +- Union(all=[true], union=[X0, X1]): rowcount = 2067340.41, cumulative cost = {3.472807643E7 rows, 1.3572565298100002E9 cpu, 4.61533644E8 io, 1.769254296E8 network, 5.38651744E7 memory}
               :                       :- Calc(select=[y AS X0, x AS X1]): rowcount = 961599.0, cumulative cost = {8334423.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
               :                       :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 961599.0, cumulative cost = {7372824.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
               :                       :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
               :                       :     +- Exchange(distribution=[broadcast]): rowcount = 565.0, cumulative cost = {1130.0 rows, 90400.0 cpu, 6780.0 io, 6780.0 network, 0.0 memory}
               :                       :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 565.0, cumulative cost = {565.0 rows, 0.0 cpu, 6780.0 io, 0.0 network, 0.0 memory}
               :                       +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 1105741.41, cumulative cost = {2.432631302E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
               :                          +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 1105741.41, cumulative cost = {2.322057161E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
               :                             :- Exchange(distribution=[hash[y]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
               :                             :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
               :                             +- Exchange(distribution=[hash[x]]): rowcount = 961514.3999999999, cumulative cost = {9294640.200000001 rows, 1.679446742E8 cpu, 1.53842304E8 io, 2.3076369599999998E7 network, 28.0 memory}
               :                                +- Calc(select=[x, y0]): rowcount = 961514.3999999999, cumulative cost = {8333125.800000001 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
               :                                   +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 961514.3999999999, cumulative cost = {7371611.4 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
               :                                      :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
               :                                      +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
               :                                         +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[hash[y]]): rowcount = 961604.25, cumulative cost = {9296107.75 rows, 2.12931074E8 cpu, 1.5384948E8 io, 2.3085702E7 network, 21600.0 memory}
                  +- Calc(select=[y, x0]): rowcount = 961604.25, cumulative cost = {8334503.5 rows, 5.138156E7 cpu, 1.5384948E8 io, 7200.0 network, 21600.0 memory}
                     +- HashJoin(joinType=[InnerJoin], where=[=(x0, x)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 961604.25, cumulative cost = {7372899.25 rows, 5.138156E7 cpu, 1.5384948E8 io, 7200.0 network, 21600.0 memory}
                        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
                        +- Exchange(distribution=[broadcast]): rowcount = 600.0, cumulative cost = {1200.0 rows, 96000.0 cpu, 7200.0 io, 7200.0 network, 0.0 memory}
                           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 600.0, cumulative cost = {600.0 rows, 0.0 cpu, 7200.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[0,1,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[x000 AS X0, X0 AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[X0, X1, y, x000], build=[left])\n:     :- [#1] Exchange(distribution=[hash[X1]])\n:     +- [#2] Exchange(distribution=[hash[y]])\n+- Calc(select=[x0 AS X0, X0 AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(y = x)], select=[x, X0, y, x0], build=[right])\n      :- [#3] Exchange(distribution=[hash[x]])\n      +- [#4] Exchange(distribution=[hash[y]])\n])
         :- Exchange(distribution=[hash[X1]])(reuse_id=[3])
         :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
         :     +- Exchange(distribution=[hash[X0, X1]])
         :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
         :           +- MultipleInput(readOrder=[1,0,2,1], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[y AS X0, x AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:     :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- Calc(select=[y0 AS X0, x AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])\n      :- [#3] Exchange(distribution=[hash[y]])\n      +- [#4] Exchange(distribution=[hash[x]])\n])
         :              :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :              :- Exchange(distribution=[broadcast])
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :              :- Exchange(distribution=[hash[y]])
         :              :  +- Reused(reference_id=[1])
         :              +- Exchange(distribution=[hash[x]])
         :                 +- Calc(select=[x, y0])
         :                    +- NestedLoopJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])
         :                       :- Reused(reference_id=[1])
         :                       +- Exchange(distribution=[broadcast])(reuse_id=[2])
         :                          +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
         :- Exchange(distribution=[hash[y]])
         :  +- Calc(select=[y, x00 AS x000])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x00], build=[right])
         :        :- Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Exchange(distribution=[hash[y]])
         :           +- Calc(select=[y, x0 AS x00])
         :              +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x0], build=[right])
         :                 :- Exchange(distribution=[hash[x]])
         :                 :  +- Reused(reference_id=[1])
         :                 +- Exchange(distribution=[hash[y]])
         :                    +- Calc(select=[y, x0])
         :                       +- NestedLoopJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, x0, y0], build=[right])
         :                          :- Reused(reference_id=[1])
         :                          +- Reused(reference_id=[2])
         :- Exchange(distribution=[hash[x]])
         :  +- Calc(select=[x, X0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[x, y, X0, X1], build=[right])
         :        :- Exchange(distribution=[hash[y]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Reused(reference_id=[3])
         +- Exchange(distribution=[hash[y]])
            +- Calc(select=[y, x0])
               +- HashJoin(joinType=[InnerJoin], where=[(x0 = x)], select=[x, y, x0], isBroadcast=[true], build=[right])
                  :- Reused(reference_id=[1])
                  +- Exchange(distribution=[broadcast])
                     +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])

Job has been submitted with JobID 8f933dd0a0b80efd5ea93402b1a56e21
WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT s_2.y AS X0, r_0.x AS X1 FROM s AS s_2 INNER JOIN r AS r_1 on s_2.x = r_1.y INNER JOIN r AS r_0 on r_1.x = r_0.y )), p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1 FROM p12 AS p12_4 INNER JOIN r AS r_3 ON r_3.y = p12_4.X1 INNER JOIN r AS r_2 ON r_2.y = r_3.x INNER JOIN r AS r_1 ON r_1.y = r_2.x INNER JOIN s as s_0 ON s_0.y = r_1.x UNION (SELECT a_0.x AS X0, p12_3.X0 AS X1 FROM a AS a_0 INNER JOIN r AS r_1 ON a_0.x = r_1.x INNER JOIN r AS r_2 ON r_1.y = r_2.x INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...
waiting...

------------> using sink uuid: eb2290cb_dd09_4ab1_a491_7036e0cbd30d

Adding statistics for table s number 7 
Adding statistics for table a number 7 
Adding statistics for table b number 7 
Adding statistics for table r number 7 
Adding statistics for table t number 7 
sql argument: WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1
             FROM r AS r_0
                      INNER JOIN b AS b_1 ON r_0.y = b_1.x
             UNION
             (SELECT s_2.y AS X0, r_0.x AS X1
              FROM s AS s_2
                       INNER JOIN r AS r_1 on s_2.x = r_1.y
                       INNER JOIN r AS r_0 on r_1.x = r_0.y
             )),
     p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1
            FROM p12 AS p12_4
                INNER JOIN r AS r_3 ON r_3.y = p12_4.X1
                INNER JOIN r AS r_2 ON r_2.y = r_3.x
                INNER JOIN r AS r_1 ON r_1.y = r_2.x
                INNER JOIN s as s_0 ON s_0.y = r_1.x
            UNION
            (SELECT a_0.x AS X0, p12_3.X0 AS X1
            FROM a AS a_0
                     INNER JOIN r AS r_1 ON a_0.x = r_1.x
                     INNER JOIN r AS r_2 ON r_1.y = r_2.x
                     INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalProject(X0=[$8], X1=[$0])
   :  +- LogicalJoin(condition=[=($9, $6)], joinType=[inner])
   :     :- LogicalJoin(condition=[=($7, $4)], joinType=[inner])
   :     :  :- LogicalJoin(condition=[=($5, $2)], joinType=[inner])
   :     :  :  :- LogicalJoin(condition=[=($3, $1)], joinType=[inner])
   :     :  :  :  :- LogicalUnion(all=[false])
   :     :  :  :  :  :- LogicalProject(X0=[$1], X1=[$0])
   :     :  :  :  :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :     :  :  :  :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :     :  :  :  :  +- LogicalProject(X0=[$1], X1=[$4])
   :     :  :  :  :     +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
   :     :  :  :  :        :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
   :     :  :  :  :        :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$5])
      +- LogicalJoin(condition=[=($4, $6)], joinType=[inner])
         :- LogicalJoin(condition=[=($2, $3)], joinType=[inner])
         :  :- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :  :  :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         +- LogicalUnion(all=[false])
            :- LogicalProject(X0=[$1], X1=[$0])
            :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
            :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
            :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
            +- LogicalProject(X0=[$1], X1=[$4])
               +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
                  :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
                  :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
                  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
                  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 94661.99978162195, cumulative cost = {1.4110860038951352E8 rows, 7.436472461903848E9 cpu, 1.692285912E9 io, 9.778074315402737E8 network, 4.27391124176841E8 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 94661.99978162195, cumulative cost = {1.410139383897319E8 rows, 7.434957869907342E9 cpu, 1.692285912E9 io, 9.778074315402737E8 network, 4.2133275619081724E8 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 94661.99978162195, cumulative cost = {1.409192763899503E8 rows, 7.418297357945777E9 cpu, 1.692285912E9 io, 9.755355435455147E8 network, 4.2133275619081724E8 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 522217.647995997, cumulative cost = {1.408246143901687E8 rows, 7.409941875577841E9 cpu, 1.692285912E9 io, 9.755355435455147E8 network, 4.1527438820479345E8 memory}
         :- Calc(select=[x000 AS X0, X0 AS X1]): rowcount = 225318.10511282345, cumulative cost = {7.831206441173425E7 rows, 4.353259023198794E9 cpu, 9.23060508E8 io, 5.792689356001035E8 network, 2.3858465178239673E8 memory}
         :  +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[X0, X1, y, x000], build=[left]): rowcount = 225318.10511282345, cumulative cost = {7.808674630662143E7 rows, 4.353259023198794E9 cpu, 9.23060508E8 io, 5.792689356001035E8 network, 2.3858465178239673E8 memory}
         :     :- Exchange(distribution=[hash[X1]]): rowcount = 374745.2392521563, cumulative cost = {3.622705738700863E7 rows, 1.5252422625007763E9 cpu, 4.61533644E8 io, 1.949132010841035E8 network, 1.01832565024276E8 memory}
         :     :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 374745.2392521563, cumulative cost = {3.585231214775647E7 rows, 1.4622850623064141E9 cpu, 4.61533644E8 io, 1.8591931534205174E8 network, 1.01832565024276E8 memory}
         :     :     +- Exchange(distribution=[hash[X0, X1]]): rowcount = 374745.2392521563, cumulative cost = {3.5477566908504315E7 rows, 1.4562891384783797E9 cpu, 4.61533644E8 io, 1.8591931534205174E8 network, 7.7848869712138E7 memory}
         :     :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 374745.2392521563, cumulative cost = {3.510282166925216E7 rows, 1.3903339763700001E9 cpu, 4.61533644E8 io, 1.769254296E8 network, 7.7848869712138E7 memory}
         :     :           +- Union(all=[true], union=[X0, X1]): rowcount = 2067340.41, cumulative cost = {3.472807643E7 rows, 1.3572565298100002E9 cpu, 4.61533644E8 io, 1.769254296E8 network, 5.38651744E7 memory}
         :     :              :- Calc(select=[y AS X0, x AS X1]): rowcount = 961599.0, cumulative cost = {8334423.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :     :              :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 961599.0, cumulative cost = {7372824.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :     :              :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :     :              :     +- Exchange(distribution=[broadcast]): rowcount = 565.0, cumulative cost = {1130.0 rows, 90400.0 cpu, 6780.0 io, 6780.0 network, 0.0 memory}
         :     :              :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 565.0, cumulative cost = {565.0 rows, 0.0 cpu, 6780.0 io, 0.0 network, 0.0 memory}
         :     :              +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 1105741.41, cumulative cost = {2.432631302E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
         :     :                 +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 1105741.41, cumulative cost = {2.322057161E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
         :     :                    :- Exchange(distribution=[hash[y]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
         :     :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :     :                    +- Exchange(distribution=[hash[x]]): rowcount = 961514.3999999999, cumulative cost = {9294640.200000001 rows, 1.679446742E8 cpu, 1.53842304E8 io, 2.3076369599999998E7 network, 28.0 memory}
         :     :                       +- Calc(select=[x, y0]): rowcount = 961514.3999999999, cumulative cost = {8333125.800000001 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
         :     :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 961514.3999999999, cumulative cost = {7371611.4 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
         :     :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :     :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :     :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :     +- Exchange(distribution=[hash[y]]): rowcount = 1127375.4615, cumulative cost = {4.163437081449999E7 rows, 2.8159997950920005E9 cpu, 4.61526864E8 io, 3.84355734516E8 network, 1.1576635335999998E8 memory}
         :        +- Calc(select=[y, x00 AS x000]): rowcount = 1127375.4615, cumulative cost = {4.050699535299999E7 rows, 2.6266007175600004E9 cpu, 4.61526864E8 io, 3.5729872344E8 network, 1.1576635335999998E8 memory}
         :           +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x00], build=[right]): rowcount = 1127375.4615, cumulative cost = {3.9379619891499996E7 rows, 2.6266007175600004E9 cpu, 4.61526864E8 io, 3.5729872344E8 network, 1.1576635335999998E8 memory}
         :              :- Exchange(distribution=[hash[x]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :              +- Exchange(distribution=[hash[y]]): rowcount = 1105741.41, cumulative cost = {2.543205443E7 rows, 1.4895780662800002E9 cpu, 3.07684584E8 io, 2.0345644344E8 network, 5.38448344E7 memory}
         :                 +- Calc(select=[y, x0 AS x00]): rowcount = 1105741.41, cumulative cost = {2.432631302E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
         :                    +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x0], build=[right]): rowcount = 1105741.41, cumulative cost = {2.322057161E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
         :                       :- Exchange(distribution=[hash[x]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
         :                       :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :                       +- Exchange(distribution=[hash[y]]): rowcount = 961514.3999999999, cumulative cost = {9294640.200000001 rows, 1.679446742E8 cpu, 1.53842304E8 io, 2.3076369599999998E7 network, 28.0 memory}
         :                          +- Calc(select=[y, x0]): rowcount = 961514.3999999999, cumulative cost = {8333125.800000001 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
         :                             +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, x0, y0], build=[right]): rowcount = 961514.3999999999, cumulative cost = {7371611.4 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
         :                                :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :                                +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                                   +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x0 AS X0, X0 AS X1]): rowcount = 296899.5428831735, cumulative cost = {6.199033233043844E7 rows, 3.0561606347310505E9 cpu, 7.69225404E8 io, 3.962666079454112E8 network, 1.7668973642239675E8 memory}
            +- HashJoin(joinType=[InnerJoin], where=[=(y, x)], select=[x, X0, y, x0], build=[right]): rowcount = 296899.5428831735, cumulative cost = {6.169343278755527E7 rows, 3.0561606347310505E9 cpu, 7.69225404E8 io, 3.962666079454112E8 network, 1.7668973642239675E8 memory}
               :- Exchange(distribution=[hash[x]]): rowcount = 1017726.0358878234, cumulative cost = {5.21004254946721E7 rows, 2.827394918443948E9 cpu, 6.15375924E8 io, 3.731809059454112E8 network, 1.2281829842239675E8 memory}
               :  +- Calc(select=[x, X0]): rowcount = 1017726.0358878234, cumulative cost = {5.1082699458784275E7 rows, 2.6564169444147935E9 cpu, 6.15375924E8 io, 3.4875548108410347E8 network, 1.2281829842239675E8 memory}
               :     +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[x, y, X0, X1], build=[right]): rowcount = 1017726.0358878234, cumulative cost = {5.006497342289645E7 rows, 2.6564169444147935E9 cpu, 6.15375924E8 io, 3.4875548108410347E8 network, 1.2281829842239675E8 memory}
               :        :- Exchange(distribution=[hash[y]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
               :        :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
               :        +- Exchange(distribution=[hash[X1]]): rowcount = 374745.2392521563, cumulative cost = {3.622705738700863E7 rows, 1.5252422625007763E9 cpu, 4.61533644E8 io, 1.949132010841035E8 network, 1.01832565024276E8 memory}
               :           +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 374745.2392521563, cumulative cost = {3.585231214775647E7 rows, 1.4622850623064141E9 cpu, 4.61533644E8 io, 1.8591931534205174E8 network, 1.01832565024276E8 memory}
               :              +- Exchange(distribution=[hash[X0, X1]]): rowcount = 374745.2392521563, cumulative cost = {3.5477566908504315E7 rows, 1.4562891384783797E9 cpu, 4.61533644E8 io, 1.8591931534205174E8 network, 7.7848869712138E7 memory}
               :                 +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 374745.2392521563, cumulative cost = {3.510282166925216E7 rows, 1.3903339763700001E9 cpu, 4.61533644E8 io, 1.769254296E8 network, 7.7848869712138E7 memory}
               :                    +- Union(all=[true], union=[X0, X1]): rowcount = 2067340.41, cumulative cost = {3.472807643E7 rows, 1.3572565298100002E9 cpu, 4.61533644E8 io, 1.769254296E8 network, 5.38651744E7 memory}
               :                       :- Calc(select=[y AS X0, x AS X1]): rowcount = 961599.0, cumulative cost = {8334423.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
               :                       :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 961599.0, cumulative cost = {7372824.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
               :                       :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
               :                       :     +- Exchange(distribution=[broadcast]): rowcount = 565.0, cumulative cost = {1130.0 rows, 90400.0 cpu, 6780.0 io, 6780.0 network, 0.0 memory}
               :                       :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 565.0, cumulative cost = {565.0 rows, 0.0 cpu, 6780.0 io, 0.0 network, 0.0 memory}
               :                       +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 1105741.41, cumulative cost = {2.432631302E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
               :                          +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 1105741.41, cumulative cost = {2.322057161E7 rows, 1.3038135094E9 cpu, 3.07684584E8 io, 1.769186496E8 network, 5.38448344E7 memory}
               :                             :- Exchange(distribution=[hash[y]]): rowcount = 6410095.0, cumulative cost = {1.282019E7 rows, 1.07689596E9 cpu, 1.5384228E8 io, 1.5384228E8 network, 0.0 memory}
               :                             :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
               :                             +- Exchange(distribution=[hash[x]]): rowcount = 961514.3999999999, cumulative cost = {9294640.200000001 rows, 1.679446742E8 cpu, 1.53842304E8 io, 2.3076369599999998E7 network, 28.0 memory}
               :                                +- Calc(select=[x, y0]): rowcount = 961514.3999999999, cumulative cost = {8333125.800000001 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
               :                                   +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 961514.3999999999, cumulative cost = {7371611.4 rows, 6410255.0 cpu, 1.53842304E8 io, 24.0 network, 28.0 memory}
               :                                      :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
               :                                      +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
               :                                         +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[hash[y]]): rowcount = 961604.25, cumulative cost = {9296107.75 rows, 2.12931074E8 cpu, 1.5384948E8 io, 2.3085702E7 network, 21600.0 memory}
                  +- Calc(select=[y, x0]): rowcount = 961604.25, cumulative cost = {8334503.5 rows, 5.138156E7 cpu, 1.5384948E8 io, 7200.0 network, 21600.0 memory}
                     +- HashJoin(joinType=[InnerJoin], where=[=(x0, x)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 961604.25, cumulative cost = {7372899.25 rows, 5.138156E7 cpu, 1.5384948E8 io, 7200.0 network, 21600.0 memory}
                        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
                        +- Exchange(distribution=[broadcast]): rowcount = 600.0, cumulative cost = {1200.0 rows, 96000.0 cpu, 7200.0 io, 7200.0 network, 0.0 memory}
                           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 600.0, cumulative cost = {600.0 rows, 0.0 cpu, 7200.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[0,1,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[x000 AS X0, X0 AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[X0, X1, y, x000], build=[left])\n:     :- [#1] Exchange(distribution=[hash[X1]])\n:     +- [#2] Exchange(distribution=[hash[y]])\n+- Calc(select=[x0 AS X0, X0 AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(y = x)], select=[x, X0, y, x0], build=[right])\n      :- [#3] Exchange(distribution=[hash[x]])\n      +- [#4] Exchange(distribution=[hash[y]])\n])
         :- Exchange(distribution=[hash[X1]])(reuse_id=[3])
         :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
         :     +- Exchange(distribution=[hash[X0, X1]])
         :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
         :           +- MultipleInput(readOrder=[1,0,2,1], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[y AS X0, x AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:     :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- Calc(select=[y0 AS X0, x AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])\n      :- [#3] Exchange(distribution=[hash[y]])\n      +- [#4] Exchange(distribution=[hash[x]])\n])
         :              :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :              :- Exchange(distribution=[broadcast])
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :              :- Exchange(distribution=[hash[y]])
         :              :  +- Reused(reference_id=[1])
         :              +- Exchange(distribution=[hash[x]])
         :                 +- Calc(select=[x, y0])
         :                    +- NestedLoopJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])
         :                       :- Reused(reference_id=[1])
         :                       +- Exchange(distribution=[broadcast])(reuse_id=[2])
         :                          +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
         :- Exchange(distribution=[hash[y]])
         :  +- Calc(select=[y, x00 AS x000])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x00], build=[right])
         :        :- Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Exchange(distribution=[hash[y]])
         :           +- Calc(select=[y, x0 AS x00])
         :              +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x0], build=[right])
         :                 :- Exchange(distribution=[hash[x]])
         :                 :  +- Reused(reference_id=[1])
         :                 +- Exchange(distribution=[hash[y]])
         :                    +- Calc(select=[y, x0])
         :                       +- NestedLoopJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, x0, y0], build=[right])
         :                          :- Reused(reference_id=[1])
         :                          +- Reused(reference_id=[2])
         :- Exchange(distribution=[hash[x]])
         :  +- Calc(select=[x, X0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[x, y, X0, X1], build=[right])
         :        :- Exchange(distribution=[hash[y]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Reused(reference_id=[3])
         +- Exchange(distribution=[hash[y]])
            +- Calc(select=[y, x0])
               +- HashJoin(joinType=[InnerJoin], where=[(x0 = x)], select=[x, y, x0], isBroadcast=[true], build=[right])
                  :- Reused(reference_id=[1])
                  +- Exchange(distribution=[broadcast])
                     +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])

Job has been submitted with JobID 933446b68a5591396c5179597dd11326
WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT s_2.y AS X0, r_0.x AS X1 FROM s AS s_2 INNER JOIN r AS r_1 on s_2.x = r_1.y INNER JOIN r AS r_0 on r_1.x = r_0.y )), p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1 FROM p12 AS p12_4 INNER JOIN r AS r_3 ON r_3.y = p12_4.X1 INNER JOIN r AS r_2 ON r_2.y = r_3.x INNER JOIN r AS r_1 ON r_1.y = r_2.x INNER JOIN s as s_0 ON s_0.y = r_1.x UNION (SELECT a_0.x AS X0, p12_3.X0 AS X1 FROM a AS a_0 INNER JOIN r AS r_1 ON a_0.x = r_1.x INNER JOIN r AS r_2 ON r_1.y = r_2.x INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...

------------> using sink uuid: 6dbf7137_3e6f_4fc2_a2da_229a2dd5b4e7

Adding statistics for table s number 9 
Adding statistics for table a number 9 
Adding statistics for table b number 9 
Adding statistics for table r number 9 
Adding statistics for table t number 9 
sql argument: WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1
             FROM r AS r_0
                      INNER JOIN b AS b_1 ON r_0.y = b_1.x
             UNION
             (SELECT s_2.y AS X0, r_0.x AS X1
              FROM s AS s_2
                       INNER JOIN r AS r_1 on s_2.x = r_1.y
                       INNER JOIN r AS r_0 on r_1.x = r_0.y
             )),
     p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1
            FROM p12 AS p12_4
                INNER JOIN r AS r_3 ON r_3.y = p12_4.X1
                INNER JOIN r AS r_2 ON r_2.y = r_3.x
                INNER JOIN r AS r_1 ON r_1.y = r_2.x
                INNER JOIN s as s_0 ON s_0.y = r_1.x
            UNION
            (SELECT a_0.x AS X0, p12_3.X0 AS X1
            FROM a AS a_0
                     INNER JOIN r AS r_1 ON a_0.x = r_1.x
                     INNER JOIN r AS r_2 ON r_1.y = r_2.x
                     INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalProject(X0=[$8], X1=[$0])
   :  +- LogicalJoin(condition=[=($9, $6)], joinType=[inner])
   :     :- LogicalJoin(condition=[=($7, $4)], joinType=[inner])
   :     :  :- LogicalJoin(condition=[=($5, $2)], joinType=[inner])
   :     :  :  :- LogicalJoin(condition=[=($3, $1)], joinType=[inner])
   :     :  :  :  :- LogicalUnion(all=[false])
   :     :  :  :  :  :- LogicalProject(X0=[$1], X1=[$0])
   :     :  :  :  :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :     :  :  :  :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :     :  :  :  :  +- LogicalProject(X0=[$1], X1=[$4])
   :     :  :  :  :     +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
   :     :  :  :  :        :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
   :     :  :  :  :        :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$5])
      +- LogicalJoin(condition=[=($4, $6)], joinType=[inner])
         :- LogicalJoin(condition=[=($2, $3)], joinType=[inner])
         :  :- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :  :  :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         +- LogicalUnion(all=[false])
            :- LogicalProject(X0=[$1], X1=[$0])
            :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
            :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
            :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
            +- LogicalProject(X0=[$1], X1=[$4])
               +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
                  :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
                  :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
                  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
                  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 60572.11526244861, cumulative cost = {9.02922779559936E7 rows, 4.75845055108896E9 cpu, 1.082850576E9 io, 6.25676293930597E8 network, 2.7348895396489584E8 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 60572.11526244861, cumulative cost = {9.023170584073114E7 rows, 4.7574813972447605E9 cpu, 1.082850576E9 io, 6.25676293930597E8 network, 2.696123385880991E8 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 60572.11526244861, cumulative cost = {9.01711337254687E7 rows, 4.74682070495857E9 cpu, 1.082850576E9 io, 6.242225631642982E8 network, 2.696123385880991E8 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 334155.49681467295, cumulative cost = {9.011056161020625E7 rows, 4.741474217009535E9 cpu, 1.082850576E9 io, 6.242225631642982E8 network, 2.6573572321130243E8 memory}
         :- Calc(select=[x000 AS X0, X0 AS X1]): rowcount = 144175.22029781347, cumulative cost = {5.0109980246745646E7 rows, 2.785548164870803E9 cpu, 5.90642052E8 io, 3.7065949555230033E8 network, 1.5266788889565122E8 memory}
         :  +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[X0, X1, y, x000], build=[left]): rowcount = 144175.22029781347, cumulative cost = {4.996580502644783E7 rows, 2.785548164870803E9 cpu, 5.90642052E8 io, 3.7065949555230033E8 network, 1.5266788889565122E8 memory}
         :     :- Exchange(distribution=[hash[X1]]): rowcount = 239791.84519375666, cumulative cost = {2.318094978327502E7 rows, 9.759785867672524E8 cpu, 2.95323804E8 io, 1.2472091136930032E8 network, 6.5163853384800844E7 memory}
         :     :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 239791.84519375666, cumulative cost = {2.2941157938081264E7 rows, 9.356935567747014E8 cpu, 2.95323804E8 io, 1.1896590708465016E8 network, 6.5163853384800844E7 memory}
         :     :     +- Exchange(distribution=[hash[X0, X1]]): rowcount = 239791.84519375666, cumulative cost = {2.270136609288751E7 rows, 9.318568872516012E8 cpu, 2.95323804E8 io, 1.1896590708465016E8 network, 4.981717529240042E7 memory}
         :     :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 239791.84519375666, cumulative cost = {2.2461574247693755E7 rows, 8.896535224975001E8 cpu, 2.95323804E8 io, 1.132109028E8 network, 4.981717529240042E7 memory}
         :     :           +- Union(all=[true], union=[X0, X1]): rowcount = 1322849.0175, cumulative cost = {2.22217824025E7 rows, 8.684879382175001E8 cpu, 2.95323804E8 io, 1.132109028E8 network, 3.4470497199999996E7 memory}
         :     :              :- Calc(select=[y AS X0, x AS X1]): rowcount = 615315.75, cumulative cost = {5333199.5 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :     :              :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 615315.75, cumulative cost = {4717883.75 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :     :              :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :     :              :     +- Exchange(distribution=[broadcast]): rowcount = 463.0, cumulative cost = {926.0 rows, 74080.0 cpu, 5556.0 io, 5556.0 network, 0.0 memory}
         :     :              :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 463.0, cumulative cost = {463.0 rows, 0.0 cpu, 5556.0 io, 0.0 network, 0.0 memory}
         :     :              +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 707533.2675, cumulative cost = {1.5565733885E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
         :     :                 +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 707533.2675, cumulative cost = {1.48582006175E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
         :     :                    :- Exchange(distribution=[hash[y]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
         :     :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :     :                    +- Exchange(distribution=[hash[x]]): rowcount = 615246.45, cumulative cost = {5947383.350000001 rows, 1.074632056E8 cpu, 9.8439432E7 io, 1.4765938799999999E7 network, 28.0 memory}
         :     :                       +- Calc(select=[x, y0]): rowcount = 615246.45, cumulative cost = {5332136.9 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
         :     :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 615246.45, cumulative cost = {4716890.45 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
         :     :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :     :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :     :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :     +- Exchange(distribution=[hash[y]]): rowcount = 721376.2901249999, cumulative cost = {2.6640680022875004E7 rows, 1.8018802330210001E9 cpu, 2.95318248E8 io, 2.45938584183E8 network, 7.407569217999999E7 memory}
         :        +- Calc(select=[y, x00 AS x000]): rowcount = 721376.2901249999, cumulative cost = {2.5919303732750002E7 rows, 1.6806890162800002E9 cpu, 2.95318248E8 io, 2.2862555322E8 network, 7.407569217999999E7 memory}
         :           +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x00], build=[right]): rowcount = 721376.2901249999, cumulative cost = {2.5197927442625E7 rows, 1.6806890162800002E9 cpu, 2.95318248E8 io, 2.2862555322E8 network, 7.407569217999999E7 memory}
         :              :- Exchange(distribution=[hash[x]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :              +- Exchange(distribution=[hash[y]]): rowcount = 707533.2675, cumulative cost = {1.62732671525E7 rows, 9.531397581400001E8 cpu, 1.9687884E8 io, 1.3018614522E8 network, 3.4453829199999996E7 memory}
         :                 +- Calc(select=[y, x0 AS x00]): rowcount = 707533.2675, cumulative cost = {1.5565733885E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
         :                    +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x0], build=[right]): rowcount = 707533.2675, cumulative cost = {1.48582006175E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
         :                       :- Exchange(distribution=[hash[x]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
         :                       :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :                       +- Exchange(distribution=[hash[y]]): rowcount = 615246.45, cumulative cost = {5947383.350000001 rows, 1.074632056E8 cpu, 9.8439432E7 io, 1.4765938799999999E7 network, 28.0 memory}
         :                          +- Calc(select=[y, x0]): rowcount = 615246.45, cumulative cost = {5332136.9 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
         :                             +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, x0, y0], build=[right]): rowcount = 615246.45, cumulative cost = {4716890.45 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
         :                                :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :                                +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                                   +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x0 AS X0, X0 AS X1]): rowcount = 189980.2765168595, cumulative cost = {3.966642586664593E7 rows, 1.9555918966419175E9 cpu, 4.92208524E8 io, 2.5356306761199784E8 network, 1.1306783431565121E8 memory}
            +- HashJoin(joinType=[InnerJoin], where=[=(y, x)], select=[x, X0, y, x0], build=[right]): rowcount = 189980.2765168595, cumulative cost = {3.947644559012907E7 rows, 1.9555918966419175E9 cpu, 4.92208524E8 io, 2.5356306761199784E8 network, 1.1306783431565121E8 memory}
               :- Exchange(distribution=[hash[x]]): rowcount = 651215.0767790634, cumulative cost = {3.333787901361221E7 rows, 1.809190046427685E9 cpu, 3.93763212E8 io, 2.3878948121199784E8 network, 7.859219671565121E7 memory}
               :  +- Calc(select=[x, X0]): rowcount = 651215.0767790634, cumulative cost = {3.2686663936833147E7 rows, 1.6997859135288024E9 cpu, 3.93763212E8 io, 2.231603193693003E8 network, 7.859219671565121E7 memory}
               :     +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[x, y, X0, X1], build=[right]): rowcount = 651215.0767790634, cumulative cost = {3.2035448860054083E7 rows, 1.6997859135288024E9 cpu, 3.93763212E8 io, 2.231603193693003E8 network, 7.859219671565121E7 memory}
               :        :- Exchange(distribution=[hash[y]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
               :        :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
               :        +- Exchange(distribution=[hash[X1]]): rowcount = 239791.84519375666, cumulative cost = {2.318094978327502E7 rows, 9.759785867672524E8 cpu, 2.95323804E8 io, 1.2472091136930032E8 network, 6.5163853384800844E7 memory}
               :           +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 239791.84519375666, cumulative cost = {2.2941157938081264E7 rows, 9.356935567747014E8 cpu, 2.95323804E8 io, 1.1896590708465016E8 network, 6.5163853384800844E7 memory}
               :              +- Exchange(distribution=[hash[X0, X1]]): rowcount = 239791.84519375666, cumulative cost = {2.270136609288751E7 rows, 9.318568872516012E8 cpu, 2.95323804E8 io, 1.1896590708465016E8 network, 4.981717529240042E7 memory}
               :                 +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 239791.84519375666, cumulative cost = {2.2461574247693755E7 rows, 8.896535224975001E8 cpu, 2.95323804E8 io, 1.132109028E8 network, 4.981717529240042E7 memory}
               :                    +- Union(all=[true], union=[X0, X1]): rowcount = 1322849.0175, cumulative cost = {2.22217824025E7 rows, 8.684879382175001E8 cpu, 2.95323804E8 io, 1.132109028E8 network, 3.4470497199999996E7 memory}
               :                       :- Calc(select=[y AS X0, x AS X1]): rowcount = 615315.75, cumulative cost = {5333199.5 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
               :                       :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 615315.75, cumulative cost = {4717883.75 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
               :                       :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
               :                       :     +- Exchange(distribution=[broadcast]): rowcount = 463.0, cumulative cost = {926.0 rows, 74080.0 cpu, 5556.0 io, 5556.0 network, 0.0 memory}
               :                       :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 463.0, cumulative cost = {463.0 rows, 0.0 cpu, 5556.0 io, 0.0 network, 0.0 memory}
               :                       +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 707533.2675, cumulative cost = {1.5565733885E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
               :                          +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 707533.2675, cumulative cost = {1.48582006175E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
               :                             :- Exchange(distribution=[hash[y]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
               :                             :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
               :                             +- Exchange(distribution=[hash[x]]): rowcount = 615246.45, cumulative cost = {5947383.350000001 rows, 1.074632056E8 cpu, 9.8439432E7 io, 1.4765938799999999E7 network, 28.0 memory}
               :                                +- Calc(select=[x, y0]): rowcount = 615246.45, cumulative cost = {5332136.9 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
               :                                   +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 615246.45, cumulative cost = {4716890.45 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
               :                                      :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
               :                                      +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
               :                                         +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[hash[y]]): rowcount = 615320.1, cumulative cost = {5948586.299999999 rows, 1.362695688E8 cpu, 9.8445312E7 io, 1.4773586399999999E7 network, 17712.0 memory}
                  +- Calc(select=[y, x0]): rowcount = 615320.1, cumulative cost = {5333266.199999999 rows, 3.2895792E7 cpu, 9.8445312E7 io, 5904.0 network, 17712.0 memory}
                     +- HashJoin(joinType=[InnerJoin], where=[=(x0, x)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 615320.1, cumulative cost = {4717946.1 rows, 3.2895792E7 cpu, 9.8445312E7 io, 5904.0 network, 17712.0 memory}
                        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
                        +- Exchange(distribution=[broadcast]): rowcount = 492.0, cumulative cost = {984.0 rows, 78720.0 cpu, 5904.0 io, 5904.0 network, 0.0 memory}
                           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 492.0, cumulative cost = {492.0 rows, 0.0 cpu, 5904.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[0,1,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[x000 AS X0, X0 AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[X0, X1, y, x000], build=[left])\n:     :- [#1] Exchange(distribution=[hash[X1]])\n:     +- [#2] Exchange(distribution=[hash[y]])\n+- Calc(select=[x0 AS X0, X0 AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(y = x)], select=[x, X0, y, x0], build=[right])\n      :- [#3] Exchange(distribution=[hash[x]])\n      +- [#4] Exchange(distribution=[hash[y]])\n])
         :- Exchange(distribution=[hash[X1]])(reuse_id=[3])
         :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
         :     +- Exchange(distribution=[hash[X0, X1]])
         :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
         :           +- MultipleInput(readOrder=[1,0,2,1], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[y AS X0, x AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:     :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- Calc(select=[y0 AS X0, x AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])\n      :- [#3] Exchange(distribution=[hash[y]])\n      +- [#4] Exchange(distribution=[hash[x]])\n])
         :              :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :              :- Exchange(distribution=[broadcast])
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :              :- Exchange(distribution=[hash[y]])
         :              :  +- Reused(reference_id=[1])
         :              +- Exchange(distribution=[hash[x]])
         :                 +- Calc(select=[x, y0])
         :                    +- NestedLoopJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])
         :                       :- Reused(reference_id=[1])
         :                       +- Exchange(distribution=[broadcast])(reuse_id=[2])
         :                          +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
         :- Exchange(distribution=[hash[y]])
         :  +- Calc(select=[y, x00 AS x000])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x00], build=[right])
         :        :- Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Exchange(distribution=[hash[y]])
         :           +- Calc(select=[y, x0 AS x00])
         :              +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x0], build=[right])
         :                 :- Exchange(distribution=[hash[x]])
         :                 :  +- Reused(reference_id=[1])
         :                 +- Exchange(distribution=[hash[y]])
         :                    +- Calc(select=[y, x0])
         :                       +- NestedLoopJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, x0, y0], build=[right])
         :                          :- Reused(reference_id=[1])
         :                          +- Reused(reference_id=[2])
         :- Exchange(distribution=[hash[x]])
         :  +- Calc(select=[x, X0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[x, y, X0, X1], build=[right])
         :        :- Exchange(distribution=[hash[y]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Reused(reference_id=[3])
         +- Exchange(distribution=[hash[y]])
            +- Calc(select=[y, x0])
               +- HashJoin(joinType=[InnerJoin], where=[(x0 = x)], select=[x, y, x0], isBroadcast=[true], build=[right])
                  :- Reused(reference_id=[1])
                  +- Exchange(distribution=[broadcast])
                     +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])

Job has been submitted with JobID 25d8b68a6914386d6bff07314a4e2354
WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT s_2.y AS X0, r_0.x AS X1 FROM s AS s_2 INNER JOIN r AS r_1 on s_2.x = r_1.y INNER JOIN r AS r_0 on r_1.x = r_0.y )), p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1 FROM p12 AS p12_4 INNER JOIN r AS r_3 ON r_3.y = p12_4.X1 INNER JOIN r AS r_2 ON r_2.y = r_3.x INNER JOIN r AS r_1 ON r_1.y = r_2.x INNER JOIN s as s_0 ON s_0.y = r_1.x UNION (SELECT a_0.x AS X0, p12_3.X0 AS X1 FROM a AS a_0 INNER JOIN r AS r_1 ON a_0.x = r_1.x INNER JOIN r AS r_2 ON r_1.y = r_2.x INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...
waiting...
waiting...
waiting...

------------> using sink uuid: 931f473c_7f4d_4b9a_a8c1_106cfaa48e6c

Adding statistics for table s number 9 
Adding statistics for table a number 9 
Adding statistics for table b number 9 
Adding statistics for table r number 9 
Adding statistics for table t number 9 
sql argument: WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1
             FROM r AS r_0
                      INNER JOIN b AS b_1 ON r_0.y = b_1.x
             UNION
             (SELECT s_2.y AS X0, r_0.x AS X1
              FROM s AS s_2
                       INNER JOIN r AS r_1 on s_2.x = r_1.y
                       INNER JOIN r AS r_0 on r_1.x = r_0.y
             )),
     p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1
            FROM p12 AS p12_4
                INNER JOIN r AS r_3 ON r_3.y = p12_4.X1
                INNER JOIN r AS r_2 ON r_2.y = r_3.x
                INNER JOIN r AS r_1 ON r_1.y = r_2.x
                INNER JOIN s as s_0 ON s_0.y = r_1.x
            UNION
            (SELECT a_0.x AS X0, p12_3.X0 AS X1
            FROM a AS a_0
                     INNER JOIN r AS r_1 ON a_0.x = r_1.x
                     INNER JOIN r AS r_2 ON r_1.y = r_2.x
                     INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalProject(X0=[$8], X1=[$0])
   :  +- LogicalJoin(condition=[=($9, $6)], joinType=[inner])
   :     :- LogicalJoin(condition=[=($7, $4)], joinType=[inner])
   :     :  :- LogicalJoin(condition=[=($5, $2)], joinType=[inner])
   :     :  :  :- LogicalJoin(condition=[=($3, $1)], joinType=[inner])
   :     :  :  :  :- LogicalUnion(all=[false])
   :     :  :  :  :  :- LogicalProject(X0=[$1], X1=[$0])
   :     :  :  :  :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :     :  :  :  :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :     :  :  :  :  +- LogicalProject(X0=[$1], X1=[$4])
   :     :  :  :  :     +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
   :     :  :  :  :        :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
   :     :  :  :  :        :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$5])
      +- LogicalJoin(condition=[=($4, $6)], joinType=[inner])
         :- LogicalJoin(condition=[=($2, $3)], joinType=[inner])
         :  :- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :  :  :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         +- LogicalUnion(all=[false])
            :- LogicalProject(X0=[$1], X1=[$0])
            :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
            :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
            :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
            +- LogicalProject(X0=[$1], X1=[$4])
               +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
                  :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
                  :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
                  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
                  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 60572.11526244861, cumulative cost = {9.02922779559936E7 rows, 4.75845055108896E9 cpu, 1.082850576E9 io, 6.25676293930597E8 network, 2.7348895396489584E8 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 60572.11526244861, cumulative cost = {9.023170584073114E7 rows, 4.7574813972447605E9 cpu, 1.082850576E9 io, 6.25676293930597E8 network, 2.696123385880991E8 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 60572.11526244861, cumulative cost = {9.01711337254687E7 rows, 4.74682070495857E9 cpu, 1.082850576E9 io, 6.242225631642982E8 network, 2.696123385880991E8 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 334155.49681467295, cumulative cost = {9.011056161020625E7 rows, 4.741474217009535E9 cpu, 1.082850576E9 io, 6.242225631642982E8 network, 2.6573572321130243E8 memory}
         :- Calc(select=[x000 AS X0, X0 AS X1]): rowcount = 144175.22029781347, cumulative cost = {5.0109980246745646E7 rows, 2.785548164870803E9 cpu, 5.90642052E8 io, 3.7065949555230033E8 network, 1.5266788889565122E8 memory}
         :  +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[X0, X1, y, x000], build=[left]): rowcount = 144175.22029781347, cumulative cost = {4.996580502644783E7 rows, 2.785548164870803E9 cpu, 5.90642052E8 io, 3.7065949555230033E8 network, 1.5266788889565122E8 memory}
         :     :- Exchange(distribution=[hash[X1]]): rowcount = 239791.84519375666, cumulative cost = {2.318094978327502E7 rows, 9.759785867672524E8 cpu, 2.95323804E8 io, 1.2472091136930032E8 network, 6.5163853384800844E7 memory}
         :     :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 239791.84519375666, cumulative cost = {2.2941157938081264E7 rows, 9.356935567747014E8 cpu, 2.95323804E8 io, 1.1896590708465016E8 network, 6.5163853384800844E7 memory}
         :     :     +- Exchange(distribution=[hash[X0, X1]]): rowcount = 239791.84519375666, cumulative cost = {2.270136609288751E7 rows, 9.318568872516012E8 cpu, 2.95323804E8 io, 1.1896590708465016E8 network, 4.981717529240042E7 memory}
         :     :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 239791.84519375666, cumulative cost = {2.2461574247693755E7 rows, 8.896535224975001E8 cpu, 2.95323804E8 io, 1.132109028E8 network, 4.981717529240042E7 memory}
         :     :           +- Union(all=[true], union=[X0, X1]): rowcount = 1322849.0175, cumulative cost = {2.22217824025E7 rows, 8.684879382175001E8 cpu, 2.95323804E8 io, 1.132109028E8 network, 3.4470497199999996E7 memory}
         :     :              :- Calc(select=[y AS X0, x AS X1]): rowcount = 615315.75, cumulative cost = {5333199.5 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :     :              :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 615315.75, cumulative cost = {4717883.75 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :     :              :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :     :              :     +- Exchange(distribution=[broadcast]): rowcount = 463.0, cumulative cost = {926.0 rows, 74080.0 cpu, 5556.0 io, 5556.0 network, 0.0 memory}
         :     :              :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 463.0, cumulative cost = {463.0 rows, 0.0 cpu, 5556.0 io, 0.0 network, 0.0 memory}
         :     :              +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 707533.2675, cumulative cost = {1.5565733885E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
         :     :                 +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 707533.2675, cumulative cost = {1.48582006175E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
         :     :                    :- Exchange(distribution=[hash[y]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
         :     :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :     :                    +- Exchange(distribution=[hash[x]]): rowcount = 615246.45, cumulative cost = {5947383.350000001 rows, 1.074632056E8 cpu, 9.8439432E7 io, 1.4765938799999999E7 network, 28.0 memory}
         :     :                       +- Calc(select=[x, y0]): rowcount = 615246.45, cumulative cost = {5332136.9 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
         :     :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 615246.45, cumulative cost = {4716890.45 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
         :     :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :     :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :     :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :     +- Exchange(distribution=[hash[y]]): rowcount = 721376.2901249999, cumulative cost = {2.6640680022875004E7 rows, 1.8018802330210001E9 cpu, 2.95318248E8 io, 2.45938584183E8 network, 7.407569217999999E7 memory}
         :        +- Calc(select=[y, x00 AS x000]): rowcount = 721376.2901249999, cumulative cost = {2.5919303732750002E7 rows, 1.6806890162800002E9 cpu, 2.95318248E8 io, 2.2862555322E8 network, 7.407569217999999E7 memory}
         :           +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x00], build=[right]): rowcount = 721376.2901249999, cumulative cost = {2.5197927442625E7 rows, 1.6806890162800002E9 cpu, 2.95318248E8 io, 2.2862555322E8 network, 7.407569217999999E7 memory}
         :              :- Exchange(distribution=[hash[x]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :              +- Exchange(distribution=[hash[y]]): rowcount = 707533.2675, cumulative cost = {1.62732671525E7 rows, 9.531397581400001E8 cpu, 1.9687884E8 io, 1.3018614522E8 network, 3.4453829199999996E7 memory}
         :                 +- Calc(select=[y, x0 AS x00]): rowcount = 707533.2675, cumulative cost = {1.5565733885E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
         :                    +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x0], build=[right]): rowcount = 707533.2675, cumulative cost = {1.48582006175E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
         :                       :- Exchange(distribution=[hash[x]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
         :                       :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :                       +- Exchange(distribution=[hash[y]]): rowcount = 615246.45, cumulative cost = {5947383.350000001 rows, 1.074632056E8 cpu, 9.8439432E7 io, 1.4765938799999999E7 network, 28.0 memory}
         :                          +- Calc(select=[y, x0]): rowcount = 615246.45, cumulative cost = {5332136.9 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
         :                             +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, x0, y0], build=[right]): rowcount = 615246.45, cumulative cost = {4716890.45 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
         :                                :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :                                +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                                   +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x0 AS X0, X0 AS X1]): rowcount = 189980.2765168595, cumulative cost = {3.966642586664593E7 rows, 1.9555918966419175E9 cpu, 4.92208524E8 io, 2.5356306761199784E8 network, 1.1306783431565121E8 memory}
            +- HashJoin(joinType=[InnerJoin], where=[=(y, x)], select=[x, X0, y, x0], build=[right]): rowcount = 189980.2765168595, cumulative cost = {3.947644559012907E7 rows, 1.9555918966419175E9 cpu, 4.92208524E8 io, 2.5356306761199784E8 network, 1.1306783431565121E8 memory}
               :- Exchange(distribution=[hash[x]]): rowcount = 651215.0767790634, cumulative cost = {3.333787901361221E7 rows, 1.809190046427685E9 cpu, 3.93763212E8 io, 2.3878948121199784E8 network, 7.859219671565121E7 memory}
               :  +- Calc(select=[x, X0]): rowcount = 651215.0767790634, cumulative cost = {3.2686663936833147E7 rows, 1.6997859135288024E9 cpu, 3.93763212E8 io, 2.231603193693003E8 network, 7.859219671565121E7 memory}
               :     +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[x, y, X0, X1], build=[right]): rowcount = 651215.0767790634, cumulative cost = {3.2035448860054083E7 rows, 1.6997859135288024E9 cpu, 3.93763212E8 io, 2.231603193693003E8 network, 7.859219671565121E7 memory}
               :        :- Exchange(distribution=[hash[y]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
               :        :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
               :        +- Exchange(distribution=[hash[X1]]): rowcount = 239791.84519375666, cumulative cost = {2.318094978327502E7 rows, 9.759785867672524E8 cpu, 2.95323804E8 io, 1.2472091136930032E8 network, 6.5163853384800844E7 memory}
               :           +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 239791.84519375666, cumulative cost = {2.2941157938081264E7 rows, 9.356935567747014E8 cpu, 2.95323804E8 io, 1.1896590708465016E8 network, 6.5163853384800844E7 memory}
               :              +- Exchange(distribution=[hash[X0, X1]]): rowcount = 239791.84519375666, cumulative cost = {2.270136609288751E7 rows, 9.318568872516012E8 cpu, 2.95323804E8 io, 1.1896590708465016E8 network, 4.981717529240042E7 memory}
               :                 +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 239791.84519375666, cumulative cost = {2.2461574247693755E7 rows, 8.896535224975001E8 cpu, 2.95323804E8 io, 1.132109028E8 network, 4.981717529240042E7 memory}
               :                    +- Union(all=[true], union=[X0, X1]): rowcount = 1322849.0175, cumulative cost = {2.22217824025E7 rows, 8.684879382175001E8 cpu, 2.95323804E8 io, 1.132109028E8 network, 3.4470497199999996E7 memory}
               :                       :- Calc(select=[y AS X0, x AS X1]): rowcount = 615315.75, cumulative cost = {5333199.5 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
               :                       :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 615315.75, cumulative cost = {4717883.75 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
               :                       :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
               :                       :     +- Exchange(distribution=[broadcast]): rowcount = 463.0, cumulative cost = {926.0 rows, 74080.0 cpu, 5556.0 io, 5556.0 network, 0.0 memory}
               :                       :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 463.0, cumulative cost = {463.0 rows, 0.0 cpu, 5556.0 io, 0.0 network, 0.0 memory}
               :                       +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 707533.2675, cumulative cost = {1.5565733885E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
               :                          +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 707533.2675, cumulative cost = {1.48582006175E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
               :                             :- Exchange(distribution=[hash[y]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
               :                             :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
               :                             +- Exchange(distribution=[hash[x]]): rowcount = 615246.45, cumulative cost = {5947383.350000001 rows, 1.074632056E8 cpu, 9.8439432E7 io, 1.4765938799999999E7 network, 28.0 memory}
               :                                +- Calc(select=[x, y0]): rowcount = 615246.45, cumulative cost = {5332136.9 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
               :                                   +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 615246.45, cumulative cost = {4716890.45 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
               :                                      :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
               :                                      +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
               :                                         +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[hash[y]]): rowcount = 615320.1, cumulative cost = {5948586.299999999 rows, 1.362695688E8 cpu, 9.8445312E7 io, 1.4773586399999999E7 network, 17712.0 memory}
                  +- Calc(select=[y, x0]): rowcount = 615320.1, cumulative cost = {5333266.199999999 rows, 3.2895792E7 cpu, 9.8445312E7 io, 5904.0 network, 17712.0 memory}
                     +- HashJoin(joinType=[InnerJoin], where=[=(x0, x)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 615320.1, cumulative cost = {4717946.1 rows, 3.2895792E7 cpu, 9.8445312E7 io, 5904.0 network, 17712.0 memory}
                        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
                        +- Exchange(distribution=[broadcast]): rowcount = 492.0, cumulative cost = {984.0 rows, 78720.0 cpu, 5904.0 io, 5904.0 network, 0.0 memory}
                           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 492.0, cumulative cost = {492.0 rows, 0.0 cpu, 5904.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[0,1,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[x000 AS X0, X0 AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[X0, X1, y, x000], build=[left])\n:     :- [#1] Exchange(distribution=[hash[X1]])\n:     +- [#2] Exchange(distribution=[hash[y]])\n+- Calc(select=[x0 AS X0, X0 AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(y = x)], select=[x, X0, y, x0], build=[right])\n      :- [#3] Exchange(distribution=[hash[x]])\n      +- [#4] Exchange(distribution=[hash[y]])\n])
         :- Exchange(distribution=[hash[X1]])(reuse_id=[3])
         :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
         :     +- Exchange(distribution=[hash[X0, X1]])
         :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
         :           +- MultipleInput(readOrder=[1,0,2,1], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[y AS X0, x AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:     :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- Calc(select=[y0 AS X0, x AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])\n      :- [#3] Exchange(distribution=[hash[y]])\n      +- [#4] Exchange(distribution=[hash[x]])\n])
         :              :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :              :- Exchange(distribution=[broadcast])
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :              :- Exchange(distribution=[hash[y]])
         :              :  +- Reused(reference_id=[1])
         :              +- Exchange(distribution=[hash[x]])
         :                 +- Calc(select=[x, y0])
         :                    +- NestedLoopJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])
         :                       :- Reused(reference_id=[1])
         :                       +- Exchange(distribution=[broadcast])(reuse_id=[2])
         :                          +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
         :- Exchange(distribution=[hash[y]])
         :  +- Calc(select=[y, x00 AS x000])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x00], build=[right])
         :        :- Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Exchange(distribution=[hash[y]])
         :           +- Calc(select=[y, x0 AS x00])
         :              +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x0], build=[right])
         :                 :- Exchange(distribution=[hash[x]])
         :                 :  +- Reused(reference_id=[1])
         :                 +- Exchange(distribution=[hash[y]])
         :                    +- Calc(select=[y, x0])
         :                       +- NestedLoopJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, x0, y0], build=[right])
         :                          :- Reused(reference_id=[1])
         :                          +- Reused(reference_id=[2])
         :- Exchange(distribution=[hash[x]])
         :  +- Calc(select=[x, X0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[x, y, X0, X1], build=[right])
         :        :- Exchange(distribution=[hash[y]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Reused(reference_id=[3])
         +- Exchange(distribution=[hash[y]])
            +- Calc(select=[y, x0])
               +- HashJoin(joinType=[InnerJoin], where=[(x0 = x)], select=[x, y, x0], isBroadcast=[true], build=[right])
                  :- Reused(reference_id=[1])
                  +- Exchange(distribution=[broadcast])
                     +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])

Job has been submitted with JobID 61a50fb0ac820cc55bfc0ea524cbe191
WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT s_2.y AS X0, r_0.x AS X1 FROM s AS s_2 INNER JOIN r AS r_1 on s_2.x = r_1.y INNER JOIN r AS r_0 on r_1.x = r_0.y )), p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1 FROM p12 AS p12_4 INNER JOIN r AS r_3 ON r_3.y = p12_4.X1 INNER JOIN r AS r_2 ON r_2.y = r_3.x INNER JOIN r AS r_1 ON r_1.y = r_2.x INNER JOIN s as s_0 ON s_0.y = r_1.x UNION (SELECT a_0.x AS X0, p12_3.X0 AS X1 FROM a AS a_0 INNER JOIN r AS r_1 ON a_0.x = r_1.x INNER JOIN r AS r_2 ON r_1.y = r_2.x INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...
waiting...
waiting...
waiting...

------------> using sink uuid: 2dd9849d_7b50_41a1_a4c5_64cc1294c3b1

Adding statistics for table s number 9 
Adding statistics for table a number 9 
Adding statistics for table b number 9 
Adding statistics for table r number 9 
Adding statistics for table t number 9 
sql argument: WITH p12 AS (SELECT r_0.y AS X0, r_0.x AS X1
             FROM r AS r_0
                      INNER JOIN b AS b_1 ON r_0.y = b_1.x
             UNION
             (SELECT s_2.y AS X0, r_0.x AS X1
              FROM s AS s_2
                       INNER JOIN r AS r_1 on s_2.x = r_1.y
                       INNER JOIN r AS r_0 on r_1.x = r_0.y
             )),
     p1 AS (SELECT s_0.x AS X0, p12_4.X0 AS X1
            FROM p12 AS p12_4
                INNER JOIN r AS r_3 ON r_3.y = p12_4.X1
                INNER JOIN r AS r_2 ON r_2.y = r_3.x
                INNER JOIN r AS r_1 ON r_1.y = r_2.x
                INNER JOIN s as s_0 ON s_0.y = r_1.x
            UNION
            (SELECT a_0.x AS X0, p12_3.X0 AS X1
            FROM a AS a_0
                     INNER JOIN r AS r_1 ON a_0.x = r_1.x
                     INNER JOIN r AS r_2 ON r_1.y = r_2.x
                     INNER JOIN p12 AS p12_3 ON r_2.y = p12_3.X1))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalProject(X0=[$8], X1=[$0])
   :  +- LogicalJoin(condition=[=($9, $6)], joinType=[inner])
   :     :- LogicalJoin(condition=[=($7, $4)], joinType=[inner])
   :     :  :- LogicalJoin(condition=[=($5, $2)], joinType=[inner])
   :     :  :  :- LogicalJoin(condition=[=($3, $1)], joinType=[inner])
   :     :  :  :  :- LogicalUnion(all=[false])
   :     :  :  :  :  :- LogicalProject(X0=[$1], X1=[$0])
   :     :  :  :  :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :     :  :  :  :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :     :  :  :  :  +- LogicalProject(X0=[$1], X1=[$4])
   :     :  :  :  :     +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
   :     :  :  :  :        :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
   :     :  :  :  :        :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  :        +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :     +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$5])
      +- LogicalJoin(condition=[=($4, $6)], joinType=[inner])
         :- LogicalJoin(condition=[=($2, $3)], joinType=[inner])
         :  :- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :  :  :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         :  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
         +- LogicalUnion(all=[false])
            :- LogicalProject(X0=[$1], X1=[$0])
            :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
            :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
            :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
            +- LogicalProject(X0=[$1], X1=[$4])
               +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
                  :- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
                  :  :- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
                  :  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
                  +- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 60572.11526244861, cumulative cost = {9.02922779559936E7 rows, 4.75845055108896E9 cpu, 1.082850576E9 io, 6.25676293930597E8 network, 2.7348895396489584E8 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 60572.11526244861, cumulative cost = {9.023170584073114E7 rows, 4.7574813972447605E9 cpu, 1.082850576E9 io, 6.25676293930597E8 network, 2.696123385880991E8 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 60572.11526244861, cumulative cost = {9.01711337254687E7 rows, 4.74682070495857E9 cpu, 1.082850576E9 io, 6.242225631642982E8 network, 2.696123385880991E8 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 334155.49681467295, cumulative cost = {9.011056161020625E7 rows, 4.741474217009535E9 cpu, 1.082850576E9 io, 6.242225631642982E8 network, 2.6573572321130243E8 memory}
         :- Calc(select=[x000 AS X0, X0 AS X1]): rowcount = 144175.22029781347, cumulative cost = {5.0109980246745646E7 rows, 2.785548164870803E9 cpu, 5.90642052E8 io, 3.7065949555230033E8 network, 1.5266788889565122E8 memory}
         :  +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[X0, X1, y, x000], build=[left]): rowcount = 144175.22029781347, cumulative cost = {4.996580502644783E7 rows, 2.785548164870803E9 cpu, 5.90642052E8 io, 3.7065949555230033E8 network, 1.5266788889565122E8 memory}
         :     :- Exchange(distribution=[hash[X1]]): rowcount = 239791.84519375666, cumulative cost = {2.318094978327502E7 rows, 9.759785867672524E8 cpu, 2.95323804E8 io, 1.2472091136930032E8 network, 6.5163853384800844E7 memory}
         :     :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 239791.84519375666, cumulative cost = {2.2941157938081264E7 rows, 9.356935567747014E8 cpu, 2.95323804E8 io, 1.1896590708465016E8 network, 6.5163853384800844E7 memory}
         :     :     +- Exchange(distribution=[hash[X0, X1]]): rowcount = 239791.84519375666, cumulative cost = {2.270136609288751E7 rows, 9.318568872516012E8 cpu, 2.95323804E8 io, 1.1896590708465016E8 network, 4.981717529240042E7 memory}
         :     :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 239791.84519375666, cumulative cost = {2.2461574247693755E7 rows, 8.896535224975001E8 cpu, 2.95323804E8 io, 1.132109028E8 network, 4.981717529240042E7 memory}
         :     :           +- Union(all=[true], union=[X0, X1]): rowcount = 1322849.0175, cumulative cost = {2.22217824025E7 rows, 8.684879382175001E8 cpu, 2.95323804E8 io, 1.132109028E8 network, 3.4470497199999996E7 memory}
         :     :              :- Calc(select=[y AS X0, x AS X1]): rowcount = 615315.75, cumulative cost = {5333199.5 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :     :              :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 615315.75, cumulative cost = {4717883.75 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :     :              :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :     :              :     +- Exchange(distribution=[broadcast]): rowcount = 463.0, cumulative cost = {926.0 rows, 74080.0 cpu, 5556.0 io, 5556.0 network, 0.0 memory}
         :     :              :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 463.0, cumulative cost = {463.0 rows, 0.0 cpu, 5556.0 io, 0.0 network, 0.0 memory}
         :     :              +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 707533.2675, cumulative cost = {1.5565733885E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
         :     :                 +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 707533.2675, cumulative cost = {1.48582006175E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
         :     :                    :- Exchange(distribution=[hash[y]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
         :     :                    :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :     :                    +- Exchange(distribution=[hash[x]]): rowcount = 615246.45, cumulative cost = {5947383.350000001 rows, 1.074632056E8 cpu, 9.8439432E7 io, 1.4765938799999999E7 network, 28.0 memory}
         :     :                       +- Calc(select=[x, y0]): rowcount = 615246.45, cumulative cost = {5332136.9 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
         :     :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 615246.45, cumulative cost = {4716890.45 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
         :     :                             :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :     :                             +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :     :                                +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :     +- Exchange(distribution=[hash[y]]): rowcount = 721376.2901249999, cumulative cost = {2.6640680022875004E7 rows, 1.8018802330210001E9 cpu, 2.95318248E8 io, 2.45938584183E8 network, 7.407569217999999E7 memory}
         :        +- Calc(select=[y, x00 AS x000]): rowcount = 721376.2901249999, cumulative cost = {2.5919303732750002E7 rows, 1.6806890162800002E9 cpu, 2.95318248E8 io, 2.2862555322E8 network, 7.407569217999999E7 memory}
         :           +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x00], build=[right]): rowcount = 721376.2901249999, cumulative cost = {2.5197927442625E7 rows, 1.6806890162800002E9 cpu, 2.95318248E8 io, 2.2862555322E8 network, 7.407569217999999E7 memory}
         :              :- Exchange(distribution=[hash[x]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :              +- Exchange(distribution=[hash[y]]): rowcount = 707533.2675, cumulative cost = {1.62732671525E7 rows, 9.531397581400001E8 cpu, 1.9687884E8 io, 1.3018614522E8 network, 3.4453829199999996E7 memory}
         :                 +- Calc(select=[y, x0 AS x00]): rowcount = 707533.2675, cumulative cost = {1.5565733885E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
         :                    +- HashJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, y0, x0], build=[right]): rowcount = 707533.2675, cumulative cost = {1.48582006175E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
         :                       :- Exchange(distribution=[hash[x]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
         :                       :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :                       +- Exchange(distribution=[hash[y]]): rowcount = 615246.45, cumulative cost = {5947383.350000001 rows, 1.074632056E8 cpu, 9.8439432E7 io, 1.4765938799999999E7 network, 28.0 memory}
         :                          +- Calc(select=[y, x0]): rowcount = 615246.45, cumulative cost = {5332136.9 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
         :                             +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y0, x)], select=[x, y, x0, y0], build=[right]): rowcount = 615246.45, cumulative cost = {4716890.45 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
         :                                :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :                                +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                                   +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x0 AS X0, X0 AS X1]): rowcount = 189980.2765168595, cumulative cost = {3.966642586664593E7 rows, 1.9555918966419175E9 cpu, 4.92208524E8 io, 2.5356306761199784E8 network, 1.1306783431565121E8 memory}
            +- HashJoin(joinType=[InnerJoin], where=[=(y, x)], select=[x, X0, y, x0], build=[right]): rowcount = 189980.2765168595, cumulative cost = {3.947644559012907E7 rows, 1.9555918966419175E9 cpu, 4.92208524E8 io, 2.5356306761199784E8 network, 1.1306783431565121E8 memory}
               :- Exchange(distribution=[hash[x]]): rowcount = 651215.0767790634, cumulative cost = {3.333787901361221E7 rows, 1.809190046427685E9 cpu, 3.93763212E8 io, 2.3878948121199784E8 network, 7.859219671565121E7 memory}
               :  +- Calc(select=[x, X0]): rowcount = 651215.0767790634, cumulative cost = {3.2686663936833147E7 rows, 1.6997859135288024E9 cpu, 3.93763212E8 io, 2.231603193693003E8 network, 7.859219671565121E7 memory}
               :     +- HashJoin(joinType=[InnerJoin], where=[=(y, X1)], select=[x, y, X0, X1], build=[right]): rowcount = 651215.0767790634, cumulative cost = {3.2035448860054083E7 rows, 1.6997859135288024E9 cpu, 3.93763212E8 io, 2.231603193693003E8 network, 7.859219671565121E7 memory}
               :        :- Exchange(distribution=[hash[y]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
               :        :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
               :        +- Exchange(distribution=[hash[X1]]): rowcount = 239791.84519375666, cumulative cost = {2.318094978327502E7 rows, 9.759785867672524E8 cpu, 2.95323804E8 io, 1.2472091136930032E8 network, 6.5163853384800844E7 memory}
               :           +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 239791.84519375666, cumulative cost = {2.2941157938081264E7 rows, 9.356935567747014E8 cpu, 2.95323804E8 io, 1.1896590708465016E8 network, 6.5163853384800844E7 memory}
               :              +- Exchange(distribution=[hash[X0, X1]]): rowcount = 239791.84519375666, cumulative cost = {2.270136609288751E7 rows, 9.318568872516012E8 cpu, 2.95323804E8 io, 1.1896590708465016E8 network, 4.981717529240042E7 memory}
               :                 +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 239791.84519375666, cumulative cost = {2.2461574247693755E7 rows, 8.896535224975001E8 cpu, 2.95323804E8 io, 1.132109028E8 network, 4.981717529240042E7 memory}
               :                    +- Union(all=[true], union=[X0, X1]): rowcount = 1322849.0175, cumulative cost = {2.22217824025E7 rows, 8.684879382175001E8 cpu, 2.95323804E8 io, 1.132109028E8 network, 3.4470497199999996E7 memory}
               :                       :- Calc(select=[y AS X0, x AS X1]): rowcount = 615315.75, cumulative cost = {5333199.5 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
               :                       :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 615315.75, cumulative cost = {4717883.75 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
               :                       :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
               :                       :     +- Exchange(distribution=[broadcast]): rowcount = 463.0, cumulative cost = {926.0 rows, 74080.0 cpu, 5556.0 io, 5556.0 network, 0.0 memory}
               :                       :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 463.0, cumulative cost = {463.0 rows, 0.0 cpu, 5556.0 io, 0.0 network, 0.0 memory}
               :                       +- Calc(select=[y0 AS X0, x AS X1]): rowcount = 707533.2675, cumulative cost = {1.5565733885E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
               :                          +- HashJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 707533.2675, cumulative cost = {1.48582006175E7 rows, 8.342741692E8 cpu, 1.9687884E8 io, 1.132053468E8 network, 3.4453829199999996E7 memory}
               :                             :- Exchange(distribution=[hash[y]]): rowcount = 4101642.0, cumulative cost = {8203284.0 rows, 6.89075856E8 cpu, 9.8439408E7 io, 9.8439408E7 network, 0.0 memory}
               :                             :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
               :                             +- Exchange(distribution=[hash[x]]): rowcount = 615246.45, cumulative cost = {5947383.350000001 rows, 1.074632056E8 cpu, 9.8439432E7 io, 1.4765938799999999E7 network, 28.0 memory}
               :                                +- Calc(select=[x, y0]): rowcount = 615246.45, cumulative cost = {5332136.9 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
               :                                   +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x0, y)], select=[x, y, x0, y0], build=[right]): rowcount = 615246.45, cumulative cost = {4716890.45 rows, 4101802.0 cpu, 9.8439432E7 io, 24.0 network, 28.0 memory}
               :                                      :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
               :                                      +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
               :                                         +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[hash[y]]): rowcount = 615320.1, cumulative cost = {5948586.299999999 rows, 1.362695688E8 cpu, 9.8445312E7 io, 1.4773586399999999E7 network, 17712.0 memory}
                  +- Calc(select=[y, x0]): rowcount = 615320.1, cumulative cost = {5333266.199999999 rows, 3.2895792E7 cpu, 9.8445312E7 io, 5904.0 network, 17712.0 memory}
                     +- HashJoin(joinType=[InnerJoin], where=[=(x0, x)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 615320.1, cumulative cost = {4717946.1 rows, 3.2895792E7 cpu, 9.8445312E7 io, 5904.0 network, 17712.0 memory}
                        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
                        +- Exchange(distribution=[broadcast]): rowcount = 492.0, cumulative cost = {984.0 rows, 78720.0 cpu, 5904.0 io, 5904.0 network, 0.0 memory}
                           +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 492.0, cumulative cost = {492.0 rows, 0.0 cpu, 5904.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[0,1,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[x000 AS X0, X0 AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[X0, X1, y, x000], build=[left])\n:     :- [#1] Exchange(distribution=[hash[X1]])\n:     +- [#2] Exchange(distribution=[hash[y]])\n+- Calc(select=[x0 AS X0, X0 AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(y = x)], select=[x, X0, y, x0], build=[right])\n      :- [#3] Exchange(distribution=[hash[x]])\n      +- [#4] Exchange(distribution=[hash[y]])\n])
         :- Exchange(distribution=[hash[X1]])(reuse_id=[3])
         :  +- HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
         :     +- Exchange(distribution=[hash[X0, X1]])
         :        +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
         :           +- MultipleInput(readOrder=[1,0,2,1], members=[\nUnion(all=[true], union=[X0, X1])\n:- Calc(select=[y AS X0, x AS X1])\n:  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:     :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- Calc(select=[y0 AS X0, x AS X1])\n   +- HashJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])\n      :- [#3] Exchange(distribution=[hash[y]])\n      +- [#4] Exchange(distribution=[hash[x]])\n])
         :              :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :              :- Exchange(distribution=[broadcast])
         :              :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :              :- Exchange(distribution=[hash[y]])
         :              :  +- Reused(reference_id=[1])
         :              +- Exchange(distribution=[hash[x]])
         :                 +- Calc(select=[x, y0])
         :                    +- NestedLoopJoin(joinType=[InnerJoin], where=[(x0 = y)], select=[x, y, x0, y0], build=[right])
         :                       :- Reused(reference_id=[1])
         :                       +- Exchange(distribution=[broadcast])(reuse_id=[2])
         :                          +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
         :- Exchange(distribution=[hash[y]])
         :  +- Calc(select=[y, x00 AS x000])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x00], build=[right])
         :        :- Exchange(distribution=[hash[x]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Exchange(distribution=[hash[y]])
         :           +- Calc(select=[y, x0 AS x00])
         :              +- HashJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, y0, x0], build=[right])
         :                 :- Exchange(distribution=[hash[x]])
         :                 :  +- Reused(reference_id=[1])
         :                 +- Exchange(distribution=[hash[y]])
         :                    +- Calc(select=[y, x0])
         :                       +- NestedLoopJoin(joinType=[InnerJoin], where=[(y0 = x)], select=[x, y, x0, y0], build=[right])
         :                          :- Reused(reference_id=[1])
         :                          +- Reused(reference_id=[2])
         :- Exchange(distribution=[hash[x]])
         :  +- Calc(select=[x, X0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(y = X1)], select=[x, y, X0, X1], build=[right])
         :        :- Exchange(distribution=[hash[y]], shuffle_mode=[BATCH])
         :        :  +- Reused(reference_id=[1])
         :        +- Reused(reference_id=[3])
         +- Exchange(distribution=[hash[y]])
            +- Calc(select=[y, x0])
               +- HashJoin(joinType=[InnerJoin], where=[(x0 = x)], select=[x, y, x0], isBroadcast=[true], build=[right])
                  :- Reused(reference_id=[1])
                  +- Exchange(distribution=[broadcast])
                     +- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])

Job has been submitted with JobID dfd9f45d465786942b437ce3c9bdbd37
