WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1

------------> using sink uuid: 654fc5ed_8695_40be_a830_0e11bae705f0

Adding statistics for table s number 3 
Adding statistics for table a number 3 
Adding statistics for table b number 3 
Adding statistics for table r number 3 
Adding statistics for table t number 3 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 13962.372505716601, cumulative cost = {863537.81751715 rows, 6385952.621097587 cpu, 1.2322872E7 io, 335732.9401371984 network, 1788959.680731725 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 13962.372505716601, cumulative cost = {849575.4450114333 rows, 6162554.661006121 cpu, 1.2322872E7 io, 335732.9401371984 network, 895367.8403658625 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 13962.372505716601, cumulative cost = {835613.0725057167 rows, 3705177.0999999996 cpu, 1.2322872E7 io, 636.0 network, 895367.8403658625 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 77025.59999999999, cumulative cost = {821650.7000000001 rows, 2472767.5 cpu, 1.2322872E7 io, 636.0 network, 1776.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 77016.9, cumulative cost = {744548.7000000001 rows, 2395524.9 cpu, 1.2322164E7 io, 612.0 network, 1748.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 38511.9, cumulative cost = {333816.80000000005 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 38511.9, cumulative cost = {295304.9 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 47.0, cumulative cost = {94.0 rows, 7520.0 cpu, 564.0 io, 564.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 47.0, cumulative cost = {47.0 rows, 0.0 cpu, 564.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 38505.0, cumulative cost = {333715.0 rows, 257020.0 cpu, 6160824.0 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 38505.0, cumulative cost = {295210.0 rows, 257020.0 cpu, 6160824.0 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 8.7, cumulative cost = {76.4 rows, 217.0 cpu, 708.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 8.7, cumulative cost = {67.7 rows, 217.0 cpu, 708.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 57.0, cumulative cost = {57.0 rows, 0.0 cpu, 684.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID f1fa0ac11df451c5c4023c1ce2c56c9b
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1

------------> using sink uuid: 261c321f_16b2_4d0b_86c0_4720b046d3e4

Adding statistics for table s number 3 
Adding statistics for table a number 3 
Adding statistics for table b number 3 
Adding statistics for table r number 3 
Adding statistics for table t number 3 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 13962.372505716601, cumulative cost = {863537.81751715 rows, 6385952.621097587 cpu, 1.2322872E7 io, 335732.9401371984 network, 1788959.680731725 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 13962.372505716601, cumulative cost = {849575.4450114333 rows, 6162554.661006121 cpu, 1.2322872E7 io, 335732.9401371984 network, 895367.8403658625 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 13962.372505716601, cumulative cost = {835613.0725057167 rows, 3705177.0999999996 cpu, 1.2322872E7 io, 636.0 network, 895367.8403658625 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 77025.59999999999, cumulative cost = {821650.7000000001 rows, 2472767.5 cpu, 1.2322872E7 io, 636.0 network, 1776.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 77016.9, cumulative cost = {744548.7000000001 rows, 2395524.9 cpu, 1.2322164E7 io, 612.0 network, 1748.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 38511.9, cumulative cost = {333816.80000000005 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 38511.9, cumulative cost = {295304.9 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 47.0, cumulative cost = {94.0 rows, 7520.0 cpu, 564.0 io, 564.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 47.0, cumulative cost = {47.0 rows, 0.0 cpu, 564.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 38505.0, cumulative cost = {333715.0 rows, 257020.0 cpu, 6160824.0 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 38505.0, cumulative cost = {295210.0 rows, 257020.0 cpu, 6160824.0 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 8.7, cumulative cost = {76.4 rows, 217.0 cpu, 708.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 8.7, cumulative cost = {67.7 rows, 217.0 cpu, 708.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 57.0, cumulative cost = {57.0 rows, 0.0 cpu, 684.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID 55412f12ed2d477a5a2ebbe62951bc28
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1

------------> using sink uuid: 5496c645_e73f_4a4b_9f48_edb393045145

Adding statistics for table s number 3 
Adding statistics for table a number 3 
Adding statistics for table b number 3 
Adding statistics for table r number 3 
Adding statistics for table t number 3 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 13962.372505716601, cumulative cost = {863537.81751715 rows, 6385952.621097587 cpu, 1.2322872E7 io, 335732.9401371984 network, 1788959.680731725 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 13962.372505716601, cumulative cost = {849575.4450114333 rows, 6162554.661006121 cpu, 1.2322872E7 io, 335732.9401371984 network, 895367.8403658625 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 13962.372505716601, cumulative cost = {835613.0725057167 rows, 3705177.0999999996 cpu, 1.2322872E7 io, 636.0 network, 895367.8403658625 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 77025.59999999999, cumulative cost = {821650.7000000001 rows, 2472767.5 cpu, 1.2322872E7 io, 636.0 network, 1776.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 77016.9, cumulative cost = {744548.7000000001 rows, 2395524.9 cpu, 1.2322164E7 io, 612.0 network, 1748.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 38511.9, cumulative cost = {333816.80000000005 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 38511.9, cumulative cost = {295304.9 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 47.0, cumulative cost = {94.0 rows, 7520.0 cpu, 564.0 io, 564.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 47.0, cumulative cost = {47.0 rows, 0.0 cpu, 564.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 38505.0, cumulative cost = {333715.0 rows, 257020.0 cpu, 6160824.0 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 38505.0, cumulative cost = {295210.0 rows, 257020.0 cpu, 6160824.0 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 8.7, cumulative cost = {76.4 rows, 217.0 cpu, 708.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 8.7, cumulative cost = {67.7 rows, 217.0 cpu, 708.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 57.0, cumulative cost = {57.0 rows, 0.0 cpu, 684.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID 02561001a74870530bebd0f73334f5eb
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1

------------> using sink uuid: 72aadcbd_8823_4d46_9e98_479f9f70c26d

Adding statistics for table s number 5 
Adding statistics for table a number 5 
Adding statistics for table b number 5 
Adding statistics for table r number 5 
Adding statistics for table t number 5 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 125478.27967552053, cumulative cost = {7760432.089026562 rows, 5.737602624769994E7 cpu, 1.1074698E8 io, 3015834.7122124927 network, 1.6074155798466628E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 125478.27967552053, cumulative cost = {7634953.809351041 rows, 5.536837377289161E7 cpu, 1.1074698E8 io, 3015834.7122124927 network, 8043545.899233314 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 125478.27967552053, cumulative cost = {7509475.52967552 rows, 3.3284196549999997E7 cpu, 1.1074698E8 io, 4356.0 network, 8043545.899233314 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 692220.45, cumulative cost = {7383997.249999999 rows, 2.2208669349999998E7 cpu, 1.1074698E8 io, 4356.0 network, 12936.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 692169.8999999999, cumulative cost = {6691337.699999999 rows, 2.15159529E7 cpu, 1.10742924E8 io, 4332.0 network, 12908.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 346111.64999999997, cumulative cost = {2999991.3 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 346111.64999999997, cumulative cost = {2653879.65 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 357.0, cumulative cost = {714.0 rows, 57120.0 cpu, 4284.0 io, 4284.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 357.0, cumulative cost = {357.0 rows, 0.0 cpu, 4284.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 346058.25, cumulative cost = {2999176.5 rows, 2307375.0 cpu, 5.5369344E7 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 346058.25, cumulative cost = {2653118.25 rows, 2307375.0 cpu, 5.5369344E7 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 50.55, cumulative cost = {439.1 rows, 496.0 cpu, 4056.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 50.55, cumulative cost = {388.55 rows, 496.0 cpu, 4056.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 336.0, cumulative cost = {336.0 rows, 0.0 cpu, 4032.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID ed89f7d50d21a0bec5c0495c1fdafd70
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...

------------> using sink uuid: fc566fd6_e11f_4d25_ac25_5d12c5aa0011

Adding statistics for table s number 5 
Adding statistics for table a number 5 
Adding statistics for table b number 5 
Adding statistics for table r number 5 
Adding statistics for table t number 5 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 125478.27967552053, cumulative cost = {7760432.089026562 rows, 5.737602624769994E7 cpu, 1.1074698E8 io, 3015834.7122124927 network, 1.6074155798466628E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 125478.27967552053, cumulative cost = {7634953.809351041 rows, 5.536837377289161E7 cpu, 1.1074698E8 io, 3015834.7122124927 network, 8043545.899233314 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 125478.27967552053, cumulative cost = {7509475.52967552 rows, 3.3284196549999997E7 cpu, 1.1074698E8 io, 4356.0 network, 8043545.899233314 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 692220.45, cumulative cost = {7383997.249999999 rows, 2.2208669349999998E7 cpu, 1.1074698E8 io, 4356.0 network, 12936.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 692169.8999999999, cumulative cost = {6691337.699999999 rows, 2.15159529E7 cpu, 1.10742924E8 io, 4332.0 network, 12908.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 346111.64999999997, cumulative cost = {2999991.3 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 346111.64999999997, cumulative cost = {2653879.65 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 357.0, cumulative cost = {714.0 rows, 57120.0 cpu, 4284.0 io, 4284.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 357.0, cumulative cost = {357.0 rows, 0.0 cpu, 4284.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 346058.25, cumulative cost = {2999176.5 rows, 2307375.0 cpu, 5.5369344E7 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 346058.25, cumulative cost = {2653118.25 rows, 2307375.0 cpu, 5.5369344E7 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 50.55, cumulative cost = {439.1 rows, 496.0 cpu, 4056.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 50.55, cumulative cost = {388.55 rows, 496.0 cpu, 4056.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 336.0, cumulative cost = {336.0 rows, 0.0 cpu, 4032.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID b70d383a6a92bfb2be174e3877c6d578
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...

------------> using sink uuid: 28625837_405c_4a8b_843b_be19d8b378d2

Adding statistics for table s number 5 
Adding statistics for table a number 5 
Adding statistics for table b number 5 
Adding statistics for table r number 5 
Adding statistics for table t number 5 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 125478.27967552053, cumulative cost = {7760432.089026562 rows, 5.737602624769994E7 cpu, 1.1074698E8 io, 3015834.7122124927 network, 1.6074155798466628E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 125478.27967552053, cumulative cost = {7634953.809351041 rows, 5.536837377289161E7 cpu, 1.1074698E8 io, 3015834.7122124927 network, 8043545.899233314 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 125478.27967552053, cumulative cost = {7509475.52967552 rows, 3.3284196549999997E7 cpu, 1.1074698E8 io, 4356.0 network, 8043545.899233314 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 692220.45, cumulative cost = {7383997.249999999 rows, 2.2208669349999998E7 cpu, 1.1074698E8 io, 4356.0 network, 12936.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 692169.8999999999, cumulative cost = {6691337.699999999 rows, 2.15159529E7 cpu, 1.10742924E8 io, 4332.0 network, 12908.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 346111.64999999997, cumulative cost = {2999991.3 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 346111.64999999997, cumulative cost = {2653879.65 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 357.0, cumulative cost = {714.0 rows, 57120.0 cpu, 4284.0 io, 4284.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 357.0, cumulative cost = {357.0 rows, 0.0 cpu, 4284.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 346058.25, cumulative cost = {2999176.5 rows, 2307375.0 cpu, 5.5369344E7 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 346058.25, cumulative cost = {2653118.25 rows, 2307375.0 cpu, 5.5369344E7 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 50.55, cumulative cost = {439.1 rows, 496.0 cpu, 4056.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 50.55, cumulative cost = {388.55 rows, 496.0 cpu, 4056.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 336.0, cumulative cost = {336.0 rows, 0.0 cpu, 4032.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID 6c4e6ebc4e0538a34cb868153d4b5e4b
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...

------------> using sink uuid: 1fb82512_93b2_4048_bf50_9589704d1663

Adding statistics for table s number 7 
Adding statistics for table a number 7 
Adding statistics for table b number 7 
Adding statistics for table r number 7 
Adding statistics for table t number 7 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 348617.6591862519, cumulative cost = {2.156050502755876E7 rows, 1.5933902031376037E8 cpu, 3.07698612E8 io, 8373675.820470046 network, 4.464348437584025E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 348617.6591862519, cumulative cost = {2.1211887368372507E7 rows, 1.5376113776678035E8 cpu, 3.07698612E8 io, 8373675.820470046 network, 2.2331954187920123E7 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 348617.6591862519, cumulative cost = {2.0863269709186256E7 rows, 9.240442975E7 cpu, 3.07698612E8 io, 6852.0 network, 2.2331954187920123E7 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 1923203.5499999998, cumulative cost = {2.0514652050000004E7 rows, 6.1633172949999996E7 cpu, 3.07698612E8 io, 6852.0 network, 20424.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 1923113.4, cumulative cost = {1.8590666200000003E7 rows, 5.97092094E7 cpu, 3.07691388E8 io, 6828.0 network, 20396.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 961599.0, cumulative cost = {8334423.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 961599.0, cumulative cost = {7372824.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 565.0, cumulative cost = {1130.0 rows, 90400.0 cpu, 6780.0 io, 6780.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 565.0, cumulative cost = {565.0 rows, 0.0 cpu, 6780.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 961514.3999999999, cumulative cost = {8333129.800000001 rows, 6410416.0 cpu, 1.53842328E8 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 961514.3999999999, cumulative cost = {7371615.4 rows, 6410416.0 cpu, 1.53842328E8 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 90.14999999999999, cumulative cost = {782.3 rows, 760.0 cpu, 7224.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 90.14999999999999, cumulative cost = {692.15 rows, 760.0 cpu, 7224.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 600.0, cumulative cost = {600.0 rows, 0.0 cpu, 7200.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID d0cb357e6831813f1f83b0e397d1ceb4
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...

------------> using sink uuid: de6a977a_c32f_44f5_9d7e_755d44336f9b

Adding statistics for table s number 7 
Adding statistics for table a number 7 
Adding statistics for table b number 7 
Adding statistics for table r number 7 
Adding statistics for table t number 7 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 348617.6591862519, cumulative cost = {2.156050502755876E7 rows, 1.5933902031376037E8 cpu, 3.07698612E8 io, 8373675.820470046 network, 4.464348437584025E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 348617.6591862519, cumulative cost = {2.1211887368372507E7 rows, 1.5376113776678035E8 cpu, 3.07698612E8 io, 8373675.820470046 network, 2.2331954187920123E7 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 348617.6591862519, cumulative cost = {2.0863269709186256E7 rows, 9.240442975E7 cpu, 3.07698612E8 io, 6852.0 network, 2.2331954187920123E7 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 1923203.5499999998, cumulative cost = {2.0514652050000004E7 rows, 6.1633172949999996E7 cpu, 3.07698612E8 io, 6852.0 network, 20424.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 1923113.4, cumulative cost = {1.8590666200000003E7 rows, 5.97092094E7 cpu, 3.07691388E8 io, 6828.0 network, 20396.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 961599.0, cumulative cost = {8334423.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 961599.0, cumulative cost = {7372824.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 565.0, cumulative cost = {1130.0 rows, 90400.0 cpu, 6780.0 io, 6780.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 565.0, cumulative cost = {565.0 rows, 0.0 cpu, 6780.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 961514.3999999999, cumulative cost = {8333129.800000001 rows, 6410416.0 cpu, 1.53842328E8 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 961514.3999999999, cumulative cost = {7371615.4 rows, 6410416.0 cpu, 1.53842328E8 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 90.14999999999999, cumulative cost = {782.3 rows, 760.0 cpu, 7224.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 90.14999999999999, cumulative cost = {692.15 rows, 760.0 cpu, 7224.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 600.0, cumulative cost = {600.0 rows, 0.0 cpu, 7200.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID 07ae582149e2a1ba76316bf991496fef
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...

------------> using sink uuid: 85a4dad9_6d47_4b1b_8ea0_6a69e2f64e4c

Adding statistics for table s number 7 
Adding statistics for table a number 7 
Adding statistics for table b number 7 
Adding statistics for table r number 7 
Adding statistics for table t number 7 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 348617.6591862519, cumulative cost = {2.156050502755876E7 rows, 1.5933902031376037E8 cpu, 3.07698612E8 io, 8373675.820470046 network, 4.464348437584025E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 348617.6591862519, cumulative cost = {2.1211887368372507E7 rows, 1.5376113776678035E8 cpu, 3.07698612E8 io, 8373675.820470046 network, 2.2331954187920123E7 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 348617.6591862519, cumulative cost = {2.0863269709186256E7 rows, 9.240442975E7 cpu, 3.07698612E8 io, 6852.0 network, 2.2331954187920123E7 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 1923203.5499999998, cumulative cost = {2.0514652050000004E7 rows, 6.1633172949999996E7 cpu, 3.07698612E8 io, 6852.0 network, 20424.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 1923113.4, cumulative cost = {1.8590666200000003E7 rows, 5.97092094E7 cpu, 3.07691388E8 io, 6828.0 network, 20396.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 961599.0, cumulative cost = {8334423.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 961599.0, cumulative cost = {7372824.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 565.0, cumulative cost = {1130.0 rows, 90400.0 cpu, 6780.0 io, 6780.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 565.0, cumulative cost = {565.0 rows, 0.0 cpu, 6780.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 961514.3999999999, cumulative cost = {8333129.800000001 rows, 6410416.0 cpu, 1.53842328E8 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 961514.3999999999, cumulative cost = {7371615.4 rows, 6410416.0 cpu, 1.53842328E8 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 90.14999999999999, cumulative cost = {782.3 rows, 760.0 cpu, 7224.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 90.14999999999999, cumulative cost = {692.15 rows, 760.0 cpu, 7224.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 600.0, cumulative cost = {600.0 rows, 0.0 cpu, 7200.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID 9eddf4ff7b1ac61f0b1aed4a7c9326f2
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...

------------> using sink uuid: 1c4360ad_57cb_4cb6_8992_fd2618fa21bc

Adding statistics for table s number 9 
Adding statistics for table a number 9 
Adding statistics for table b number 9 
Adding statistics for table r number 9 
Adding statistics for table t number 9 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 223076.48814551177, cumulative cost = {1.3796410114436537E7 rows, 1.0197559747393826E8 cpu, 1.96890348E8 io, 5359463.715492282 network, 2.8570542482625507E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 223076.48814551177, cumulative cost = {1.3573333626291025E7 rows, 9.840637366361007E7 cpu, 1.96890348E8 io, 5359463.715492282 network, 1.4293647241312753E7 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 223076.48814551177, cumulative cost = {1.3350257138145514E7 rows, 5.914491175E7 cpu, 1.96890348E8 io, 5628.0 network, 1.4293647241312753E7 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 1230636.15, cumulative cost = {1.3127180650000002E7 rows, 3.945473335E7 cpu, 1.96890348E8 io, 5628.0 network, 16752.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 1230562.2, cumulative cost = {1.1895902600000001E7 rows, 3.82234452E7 cpu, 1.9688442E8 io, 5604.0 network, 16724.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 615315.75, cumulative cost = {5333199.5 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 615315.75, cumulative cost = {4717883.75 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 463.0, cumulative cost = {926.0 rows, 74080.0 cpu, 5556.0 io, 5556.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 463.0, cumulative cost = {463.0 rows, 0.0 cpu, 5556.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 615246.45, cumulative cost = {5332140.9 rows, 4101963.0 cpu, 9.8439456E7 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 615246.45, cumulative cost = {4716894.45 rows, 4101963.0 cpu, 9.8439456E7 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 73.95, cumulative cost = {641.9000000000001 rows, 652.0 cpu, 5928.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 73.95, cumulative cost = {567.95 rows, 652.0 cpu, 5928.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 492.0, cumulative cost = {492.0 rows, 0.0 cpu, 5904.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID 9d9e86520a4bce258e7aec0e972e9806
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...
waiting...

------------> using sink uuid: ef04c528_98a6_4b3c_a334_bbc0e46b27a6

Adding statistics for table s number 9 
Adding statistics for table a number 9 
Adding statistics for table b number 9 
Adding statistics for table r number 9 
Adding statistics for table t number 9 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 223076.48814551177, cumulative cost = {1.3796410114436537E7 rows, 1.0197559747393826E8 cpu, 1.96890348E8 io, 5359463.715492282 network, 2.8570542482625507E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 223076.48814551177, cumulative cost = {1.3573333626291025E7 rows, 9.840637366361007E7 cpu, 1.96890348E8 io, 5359463.715492282 network, 1.4293647241312753E7 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 223076.48814551177, cumulative cost = {1.3350257138145514E7 rows, 5.914491175E7 cpu, 1.96890348E8 io, 5628.0 network, 1.4293647241312753E7 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 1230636.15, cumulative cost = {1.3127180650000002E7 rows, 3.945473335E7 cpu, 1.96890348E8 io, 5628.0 network, 16752.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 1230562.2, cumulative cost = {1.1895902600000001E7 rows, 3.82234452E7 cpu, 1.9688442E8 io, 5604.0 network, 16724.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 615315.75, cumulative cost = {5333199.5 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 615315.75, cumulative cost = {4717883.75 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 463.0, cumulative cost = {926.0 rows, 74080.0 cpu, 5556.0 io, 5556.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 463.0, cumulative cost = {463.0 rows, 0.0 cpu, 5556.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 615246.45, cumulative cost = {5332140.9 rows, 4101963.0 cpu, 9.8439456E7 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 615246.45, cumulative cost = {4716894.45 rows, 4101963.0 cpu, 9.8439456E7 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 73.95, cumulative cost = {641.9000000000001 rows, 652.0 cpu, 5928.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 73.95, cumulative cost = {567.95 rows, 652.0 cpu, 5928.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 492.0, cumulative cost = {492.0 rows, 0.0 cpu, 5904.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID eb4d2e79d8495144bf298ce0c7a1a7aa
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...
waiting...

------------> using sink uuid: 9b863ce0_7730_49e4_84c4_12d0de7435a9

Adding statistics for table s number 9 
Adding statistics for table a number 9 
Adding statistics for table b number 9 
Adding statistics for table r number 9 
Adding statistics for table t number 9 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 223076.48814551177, cumulative cost = {1.3796410114436537E7 rows, 1.0197559747393826E8 cpu, 1.96890348E8 io, 5359463.715492282 network, 2.8570542482625507E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 223076.48814551177, cumulative cost = {1.3573333626291025E7 rows, 9.840637366361007E7 cpu, 1.96890348E8 io, 5359463.715492282 network, 1.4293647241312753E7 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 223076.48814551177, cumulative cost = {1.3350257138145514E7 rows, 5.914491175E7 cpu, 1.96890348E8 io, 5628.0 network, 1.4293647241312753E7 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 1230636.15, cumulative cost = {1.3127180650000002E7 rows, 3.945473335E7 cpu, 1.96890348E8 io, 5628.0 network, 16752.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 1230562.2, cumulative cost = {1.1895902600000001E7 rows, 3.82234452E7 cpu, 1.9688442E8 io, 5604.0 network, 16724.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 615315.75, cumulative cost = {5333199.5 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 615315.75, cumulative cost = {4717883.75 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 463.0, cumulative cost = {926.0 rows, 74080.0 cpu, 5556.0 io, 5556.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 463.0, cumulative cost = {463.0 rows, 0.0 cpu, 5556.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 615246.45, cumulative cost = {5332140.9 rows, 4101963.0 cpu, 9.8439456E7 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 615246.45, cumulative cost = {4716894.45 rows, 4101963.0 cpu, 9.8439456E7 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 73.95, cumulative cost = {641.9000000000001 rows, 652.0 cpu, 5928.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 73.95, cumulative cost = {567.95 rows, 652.0 cpu, 5928.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 492.0, cumulative cost = {492.0 rows, 0.0 cpu, 5904.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID ec020f330255e76b8a1606630950d222
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...
waiting...

------------> using sink uuid: d9c33153_ef73_4c32_9516_e3f03006fdd0

Adding statistics for table s number 3 
Adding statistics for table a number 3 
Adding statistics for table b number 3 
Adding statistics for table r number 3 
Adding statistics for table t number 3 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 13962.372505716601, cumulative cost = {863537.81751715 rows, 6385952.621097587 cpu, 1.2322872E7 io, 335732.9401371984 network, 1788959.680731725 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 13962.372505716601, cumulative cost = {849575.4450114333 rows, 6162554.661006121 cpu, 1.2322872E7 io, 335732.9401371984 network, 895367.8403658625 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 13962.372505716601, cumulative cost = {835613.0725057167 rows, 3705177.0999999996 cpu, 1.2322872E7 io, 636.0 network, 895367.8403658625 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 77025.59999999999, cumulative cost = {821650.7000000001 rows, 2472767.5 cpu, 1.2322872E7 io, 636.0 network, 1776.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 77016.9, cumulative cost = {744548.7000000001 rows, 2395524.9 cpu, 1.2322164E7 io, 612.0 network, 1748.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 38511.9, cumulative cost = {333816.80000000005 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 38511.9, cumulative cost = {295304.9 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 47.0, cumulative cost = {94.0 rows, 7520.0 cpu, 564.0 io, 564.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 47.0, cumulative cost = {47.0 rows, 0.0 cpu, 564.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 38505.0, cumulative cost = {333715.0 rows, 257020.0 cpu, 6160824.0 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 38505.0, cumulative cost = {295210.0 rows, 257020.0 cpu, 6160824.0 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 8.7, cumulative cost = {76.4 rows, 217.0 cpu, 708.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 8.7, cumulative cost = {67.7 rows, 217.0 cpu, 708.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 57.0, cumulative cost = {57.0 rows, 0.0 cpu, 684.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID 93bd59f46d8f8a71343f6924093cd561
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1

------------> using sink uuid: 9b2a427a_54c0_474d_8618_59bec4b4d645

Adding statistics for table s number 3 
Adding statistics for table a number 3 
Adding statistics for table b number 3 
Adding statistics for table r number 3 
Adding statistics for table t number 3 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 13962.372505716601, cumulative cost = {863537.81751715 rows, 6385952.621097587 cpu, 1.2322872E7 io, 335732.9401371984 network, 1788959.680731725 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 13962.372505716601, cumulative cost = {849575.4450114333 rows, 6162554.661006121 cpu, 1.2322872E7 io, 335732.9401371984 network, 895367.8403658625 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 13962.372505716601, cumulative cost = {835613.0725057167 rows, 3705177.0999999996 cpu, 1.2322872E7 io, 636.0 network, 895367.8403658625 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 77025.59999999999, cumulative cost = {821650.7000000001 rows, 2472767.5 cpu, 1.2322872E7 io, 636.0 network, 1776.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 77016.9, cumulative cost = {744548.7000000001 rows, 2395524.9 cpu, 1.2322164E7 io, 612.0 network, 1748.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 38511.9, cumulative cost = {333816.80000000005 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 38511.9, cumulative cost = {295304.9 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 47.0, cumulative cost = {94.0 rows, 7520.0 cpu, 564.0 io, 564.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 47.0, cumulative cost = {47.0 rows, 0.0 cpu, 564.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 38505.0, cumulative cost = {333715.0 rows, 257020.0 cpu, 6160824.0 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 38505.0, cumulative cost = {295210.0 rows, 257020.0 cpu, 6160824.0 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 8.7, cumulative cost = {76.4 rows, 217.0 cpu, 708.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 8.7, cumulative cost = {67.7 rows, 217.0 cpu, 708.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 57.0, cumulative cost = {57.0 rows, 0.0 cpu, 684.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID a167f32c2832567e999d3894687b5e4f
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1

------------> using sink uuid: f804d225_4120_4a9d_99f7_e902d5724fd9

Adding statistics for table s number 3 
Adding statistics for table a number 3 
Adding statistics for table b number 3 
Adding statistics for table r number 3 
Adding statistics for table t number 3 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 13962.372505716601, cumulative cost = {863537.81751715 rows, 6385952.621097587 cpu, 1.2322872E7 io, 335732.9401371984 network, 1788959.680731725 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 13962.372505716601, cumulative cost = {849575.4450114333 rows, 6162554.661006121 cpu, 1.2322872E7 io, 335732.9401371984 network, 895367.8403658625 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 13962.372505716601, cumulative cost = {835613.0725057167 rows, 3705177.0999999996 cpu, 1.2322872E7 io, 636.0 network, 895367.8403658625 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 77025.59999999999, cumulative cost = {821650.7000000001 rows, 2472767.5 cpu, 1.2322872E7 io, 636.0 network, 1776.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 77016.9, cumulative cost = {744548.7000000001 rows, 2395524.9 cpu, 1.2322164E7 io, 612.0 network, 1748.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 38511.9, cumulative cost = {333816.80000000005 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 38511.9, cumulative cost = {295304.9 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 47.0, cumulative cost = {94.0 rows, 7520.0 cpu, 564.0 io, 564.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 47.0, cumulative cost = {47.0 rows, 0.0 cpu, 564.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 38505.0, cumulative cost = {333715.0 rows, 257020.0 cpu, 6160824.0 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 38505.0, cumulative cost = {295210.0 rows, 257020.0 cpu, 6160824.0 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 8.7, cumulative cost = {76.4 rows, 217.0 cpu, 708.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 8.7, cumulative cost = {67.7 rows, 217.0 cpu, 708.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 57.0, cumulative cost = {57.0 rows, 0.0 cpu, 684.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID 4401ba4a4302d83abb9d44e536279be4
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1

------------> using sink uuid: 4d1ac01d_8f65_44dd_be15_98ce18cc0f4b

Adding statistics for table s number 5 
Adding statistics for table a number 5 
Adding statistics for table b number 5 
Adding statistics for table r number 5 
Adding statistics for table t number 5 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 125478.27967552053, cumulative cost = {7760432.089026562 rows, 5.737602624769994E7 cpu, 1.1074698E8 io, 3015834.7122124927 network, 1.6074155798466628E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 125478.27967552053, cumulative cost = {7634953.809351041 rows, 5.536837377289161E7 cpu, 1.1074698E8 io, 3015834.7122124927 network, 8043545.899233314 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 125478.27967552053, cumulative cost = {7509475.52967552 rows, 3.3284196549999997E7 cpu, 1.1074698E8 io, 4356.0 network, 8043545.899233314 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 692220.45, cumulative cost = {7383997.249999999 rows, 2.2208669349999998E7 cpu, 1.1074698E8 io, 4356.0 network, 12936.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 692169.8999999999, cumulative cost = {6691337.699999999 rows, 2.15159529E7 cpu, 1.10742924E8 io, 4332.0 network, 12908.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 346111.64999999997, cumulative cost = {2999991.3 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 346111.64999999997, cumulative cost = {2653879.65 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 357.0, cumulative cost = {714.0 rows, 57120.0 cpu, 4284.0 io, 4284.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 357.0, cumulative cost = {357.0 rows, 0.0 cpu, 4284.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 346058.25, cumulative cost = {2999176.5 rows, 2307375.0 cpu, 5.5369344E7 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 346058.25, cumulative cost = {2653118.25 rows, 2307375.0 cpu, 5.5369344E7 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 50.55, cumulative cost = {439.1 rows, 496.0 cpu, 4056.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 50.55, cumulative cost = {388.55 rows, 496.0 cpu, 4056.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 336.0, cumulative cost = {336.0 rows, 0.0 cpu, 4032.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID ff054edf73646ffc71fc26ff16958b54
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1

------------> using sink uuid: 3c5b6452_7a31_427e_bbcc_15c32616f1c3

Adding statistics for table s number 5 
Adding statistics for table a number 5 
Adding statistics for table b number 5 
Adding statistics for table r number 5 
Adding statistics for table t number 5 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 125478.27967552053, cumulative cost = {7760432.089026562 rows, 5.737602624769994E7 cpu, 1.1074698E8 io, 3015834.7122124927 network, 1.6074155798466628E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 125478.27967552053, cumulative cost = {7634953.809351041 rows, 5.536837377289161E7 cpu, 1.1074698E8 io, 3015834.7122124927 network, 8043545.899233314 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 125478.27967552053, cumulative cost = {7509475.52967552 rows, 3.3284196549999997E7 cpu, 1.1074698E8 io, 4356.0 network, 8043545.899233314 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 692220.45, cumulative cost = {7383997.249999999 rows, 2.2208669349999998E7 cpu, 1.1074698E8 io, 4356.0 network, 12936.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 692169.8999999999, cumulative cost = {6691337.699999999 rows, 2.15159529E7 cpu, 1.10742924E8 io, 4332.0 network, 12908.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 346111.64999999997, cumulative cost = {2999991.3 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 346111.64999999997, cumulative cost = {2653879.65 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 357.0, cumulative cost = {714.0 rows, 57120.0 cpu, 4284.0 io, 4284.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 357.0, cumulative cost = {357.0 rows, 0.0 cpu, 4284.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 346058.25, cumulative cost = {2999176.5 rows, 2307375.0 cpu, 5.5369344E7 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 346058.25, cumulative cost = {2653118.25 rows, 2307375.0 cpu, 5.5369344E7 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 50.55, cumulative cost = {439.1 rows, 496.0 cpu, 4056.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 50.55, cumulative cost = {388.55 rows, 496.0 cpu, 4056.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 336.0, cumulative cost = {336.0 rows, 0.0 cpu, 4032.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID 73f2529c0ee73d9bf64ff2d0ab7818b0
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1

------------> using sink uuid: 82498f7d_47de_45d4_acee_92eae82fcc19

Adding statistics for table s number 5 
Adding statistics for table a number 5 
Adding statistics for table b number 5 
Adding statistics for table r number 5 
Adding statistics for table t number 5 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 125478.27967552053, cumulative cost = {7760432.089026562 rows, 5.737602624769994E7 cpu, 1.1074698E8 io, 3015834.7122124927 network, 1.6074155798466628E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 125478.27967552053, cumulative cost = {7634953.809351041 rows, 5.536837377289161E7 cpu, 1.1074698E8 io, 3015834.7122124927 network, 8043545.899233314 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 125478.27967552053, cumulative cost = {7509475.52967552 rows, 3.3284196549999997E7 cpu, 1.1074698E8 io, 4356.0 network, 8043545.899233314 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 692220.45, cumulative cost = {7383997.249999999 rows, 2.2208669349999998E7 cpu, 1.1074698E8 io, 4356.0 network, 12936.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 692169.8999999999, cumulative cost = {6691337.699999999 rows, 2.15159529E7 cpu, 1.10742924E8 io, 4332.0 network, 12908.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 346111.64999999997, cumulative cost = {2999991.3 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 346111.64999999997, cumulative cost = {2653879.65 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 357.0, cumulative cost = {714.0 rows, 57120.0 cpu, 4284.0 io, 4284.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 357.0, cumulative cost = {357.0 rows, 0.0 cpu, 4284.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 346058.25, cumulative cost = {2999176.5 rows, 2307375.0 cpu, 5.5369344E7 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 346058.25, cumulative cost = {2653118.25 rows, 2307375.0 cpu, 5.5369344E7 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 50.55, cumulative cost = {439.1 rows, 496.0 cpu, 4056.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 50.55, cumulative cost = {388.55 rows, 496.0 cpu, 4056.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 336.0, cumulative cost = {336.0 rows, 0.0 cpu, 4032.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID 45d6e3e83d20b1923946a7ab52767fb8
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1

------------> using sink uuid: 27e4976c_508d_4120_a07c_64c1d22fe93f

Adding statistics for table s number 7 
Adding statistics for table a number 7 
Adding statistics for table b number 7 
Adding statistics for table r number 7 
Adding statistics for table t number 7 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 348617.6591862519, cumulative cost = {2.156050502755876E7 rows, 1.5933902031376037E8 cpu, 3.07698612E8 io, 8373675.820470046 network, 4.464348437584025E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 348617.6591862519, cumulative cost = {2.1211887368372507E7 rows, 1.5376113776678035E8 cpu, 3.07698612E8 io, 8373675.820470046 network, 2.2331954187920123E7 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 348617.6591862519, cumulative cost = {2.0863269709186256E7 rows, 9.240442975E7 cpu, 3.07698612E8 io, 6852.0 network, 2.2331954187920123E7 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 1923203.5499999998, cumulative cost = {2.0514652050000004E7 rows, 6.1633172949999996E7 cpu, 3.07698612E8 io, 6852.0 network, 20424.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 1923113.4, cumulative cost = {1.8590666200000003E7 rows, 5.97092094E7 cpu, 3.07691388E8 io, 6828.0 network, 20396.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 961599.0, cumulative cost = {8334423.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 961599.0, cumulative cost = {7372824.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 565.0, cumulative cost = {1130.0 rows, 90400.0 cpu, 6780.0 io, 6780.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 565.0, cumulative cost = {565.0 rows, 0.0 cpu, 6780.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 961514.3999999999, cumulative cost = {8333129.800000001 rows, 6410416.0 cpu, 1.53842328E8 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 961514.3999999999, cumulative cost = {7371615.4 rows, 6410416.0 cpu, 1.53842328E8 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 90.14999999999999, cumulative cost = {782.3 rows, 760.0 cpu, 7224.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 90.14999999999999, cumulative cost = {692.15 rows, 760.0 cpu, 7224.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 600.0, cumulative cost = {600.0 rows, 0.0 cpu, 7200.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID 9f4ce98182424cb0b9885984da67491a
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...

------------> using sink uuid: 97aa1cd5_e3c2_40ce_a43e_fce4a70ce594

Adding statistics for table s number 7 
Adding statistics for table a number 7 
Adding statistics for table b number 7 
Adding statistics for table r number 7 
Adding statistics for table t number 7 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 348617.6591862519, cumulative cost = {2.156050502755876E7 rows, 1.5933902031376037E8 cpu, 3.07698612E8 io, 8373675.820470046 network, 4.464348437584025E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 348617.6591862519, cumulative cost = {2.1211887368372507E7 rows, 1.5376113776678035E8 cpu, 3.07698612E8 io, 8373675.820470046 network, 2.2331954187920123E7 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 348617.6591862519, cumulative cost = {2.0863269709186256E7 rows, 9.240442975E7 cpu, 3.07698612E8 io, 6852.0 network, 2.2331954187920123E7 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 1923203.5499999998, cumulative cost = {2.0514652050000004E7 rows, 6.1633172949999996E7 cpu, 3.07698612E8 io, 6852.0 network, 20424.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 1923113.4, cumulative cost = {1.8590666200000003E7 rows, 5.97092094E7 cpu, 3.07691388E8 io, 6828.0 network, 20396.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 961599.0, cumulative cost = {8334423.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 961599.0, cumulative cost = {7372824.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 565.0, cumulative cost = {1130.0 rows, 90400.0 cpu, 6780.0 io, 6780.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 565.0, cumulative cost = {565.0 rows, 0.0 cpu, 6780.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 961514.3999999999, cumulative cost = {8333129.800000001 rows, 6410416.0 cpu, 1.53842328E8 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 961514.3999999999, cumulative cost = {7371615.4 rows, 6410416.0 cpu, 1.53842328E8 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 90.14999999999999, cumulative cost = {782.3 rows, 760.0 cpu, 7224.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 90.14999999999999, cumulative cost = {692.15 rows, 760.0 cpu, 7224.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 600.0, cumulative cost = {600.0 rows, 0.0 cpu, 7200.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID 3d5e74d596d04963ac20c5b1cf4d9ad5
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...

------------> using sink uuid: b5f93c7e_f0f6_4861_9d08_100b5ae790a7

Adding statistics for table s number 7 
Adding statistics for table a number 7 
Adding statistics for table b number 7 
Adding statistics for table r number 7 
Adding statistics for table t number 7 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 348617.6591862519, cumulative cost = {2.156050502755876E7 rows, 1.5933902031376037E8 cpu, 3.07698612E8 io, 8373675.820470046 network, 4.464348437584025E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 348617.6591862519, cumulative cost = {2.1211887368372507E7 rows, 1.5376113776678035E8 cpu, 3.07698612E8 io, 8373675.820470046 network, 2.2331954187920123E7 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 348617.6591862519, cumulative cost = {2.0863269709186256E7 rows, 9.240442975E7 cpu, 3.07698612E8 io, 6852.0 network, 2.2331954187920123E7 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 1923203.5499999998, cumulative cost = {2.0514652050000004E7 rows, 6.1633172949999996E7 cpu, 3.07698612E8 io, 6852.0 network, 20424.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 1923113.4, cumulative cost = {1.8590666200000003E7 rows, 5.97092094E7 cpu, 3.07691388E8 io, 6828.0 network, 20396.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 961599.0, cumulative cost = {8334423.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 961599.0, cumulative cost = {7372824.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 565.0, cumulative cost = {1130.0 rows, 90400.0 cpu, 6780.0 io, 6780.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 565.0, cumulative cost = {565.0 rows, 0.0 cpu, 6780.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 961514.3999999999, cumulative cost = {8333129.800000001 rows, 6410416.0 cpu, 1.53842328E8 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 961514.3999999999, cumulative cost = {7371615.4 rows, 6410416.0 cpu, 1.53842328E8 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 90.14999999999999, cumulative cost = {782.3 rows, 760.0 cpu, 7224.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 90.14999999999999, cumulative cost = {692.15 rows, 760.0 cpu, 7224.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 600.0, cumulative cost = {600.0 rows, 0.0 cpu, 7200.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID 193a68fa9e863ef8f2f52c331aca100e
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...

------------> using sink uuid: 60d352cb_0b6d_40cf_afe8_d85ab8d37b9e

Adding statistics for table s number 9 
Adding statistics for table a number 9 
Adding statistics for table b number 9 
Adding statistics for table r number 9 
Adding statistics for table t number 9 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 223076.48814551177, cumulative cost = {1.3796410114436537E7 rows, 1.0197559747393826E8 cpu, 1.96890348E8 io, 5359463.715492282 network, 2.8570542482625507E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 223076.48814551177, cumulative cost = {1.3573333626291025E7 rows, 9.840637366361007E7 cpu, 1.96890348E8 io, 5359463.715492282 network, 1.4293647241312753E7 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 223076.48814551177, cumulative cost = {1.3350257138145514E7 rows, 5.914491175E7 cpu, 1.96890348E8 io, 5628.0 network, 1.4293647241312753E7 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 1230636.15, cumulative cost = {1.3127180650000002E7 rows, 3.945473335E7 cpu, 1.96890348E8 io, 5628.0 network, 16752.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 1230562.2, cumulative cost = {1.1895902600000001E7 rows, 3.82234452E7 cpu, 1.9688442E8 io, 5604.0 network, 16724.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 615315.75, cumulative cost = {5333199.5 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 615315.75, cumulative cost = {4717883.75 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 463.0, cumulative cost = {926.0 rows, 74080.0 cpu, 5556.0 io, 5556.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 463.0, cumulative cost = {463.0 rows, 0.0 cpu, 5556.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 615246.45, cumulative cost = {5332140.9 rows, 4101963.0 cpu, 9.8439456E7 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 615246.45, cumulative cost = {4716894.45 rows, 4101963.0 cpu, 9.8439456E7 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 73.95, cumulative cost = {641.9000000000001 rows, 652.0 cpu, 5928.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 73.95, cumulative cost = {567.95 rows, 652.0 cpu, 5928.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 492.0, cumulative cost = {492.0 rows, 0.0 cpu, 5904.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID 6215c547bce956c3843300f37d74dabc
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...

------------> using sink uuid: 764e7fe7_53df_47a7_94fc_1200d58964bd

Adding statistics for table s number 9 
Adding statistics for table a number 9 
Adding statistics for table b number 9 
Adding statistics for table r number 9 
Adding statistics for table t number 9 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 223076.48814551177, cumulative cost = {1.3796410114436537E7 rows, 1.0197559747393826E8 cpu, 1.96890348E8 io, 5359463.715492282 network, 2.8570542482625507E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 223076.48814551177, cumulative cost = {1.3573333626291025E7 rows, 9.840637366361007E7 cpu, 1.96890348E8 io, 5359463.715492282 network, 1.4293647241312753E7 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 223076.48814551177, cumulative cost = {1.3350257138145514E7 rows, 5.914491175E7 cpu, 1.96890348E8 io, 5628.0 network, 1.4293647241312753E7 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 1230636.15, cumulative cost = {1.3127180650000002E7 rows, 3.945473335E7 cpu, 1.96890348E8 io, 5628.0 network, 16752.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 1230562.2, cumulative cost = {1.1895902600000001E7 rows, 3.82234452E7 cpu, 1.9688442E8 io, 5604.0 network, 16724.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 615315.75, cumulative cost = {5333199.5 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 615315.75, cumulative cost = {4717883.75 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 463.0, cumulative cost = {926.0 rows, 74080.0 cpu, 5556.0 io, 5556.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 463.0, cumulative cost = {463.0 rows, 0.0 cpu, 5556.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 615246.45, cumulative cost = {5332140.9 rows, 4101963.0 cpu, 9.8439456E7 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 615246.45, cumulative cost = {4716894.45 rows, 4101963.0 cpu, 9.8439456E7 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 73.95, cumulative cost = {641.9000000000001 rows, 652.0 cpu, 5928.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 73.95, cumulative cost = {567.95 rows, 652.0 cpu, 5928.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 492.0, cumulative cost = {492.0 rows, 0.0 cpu, 5904.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID ded4453365361460dcf7225b8a13cb09
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...

------------> using sink uuid: 66307fbc_9365_4069_a751_b49e066a24f8

Adding statistics for table s number 9 
Adding statistics for table a number 9 
Adding statistics for table b number 9 
Adding statistics for table r number 9 
Adding statistics for table t number 9 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 223076.48814551177, cumulative cost = {1.3796410114436537E7 rows, 1.0197559747393826E8 cpu, 1.96890348E8 io, 5359463.715492282 network, 2.8570542482625507E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 223076.48814551177, cumulative cost = {1.3573333626291025E7 rows, 9.840637366361007E7 cpu, 1.96890348E8 io, 5359463.715492282 network, 1.4293647241312753E7 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 223076.48814551177, cumulative cost = {1.3350257138145514E7 rows, 5.914491175E7 cpu, 1.96890348E8 io, 5628.0 network, 1.4293647241312753E7 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 1230636.15, cumulative cost = {1.3127180650000002E7 rows, 3.945473335E7 cpu, 1.96890348E8 io, 5628.0 network, 16752.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 1230562.2, cumulative cost = {1.1895902600000001E7 rows, 3.82234452E7 cpu, 1.9688442E8 io, 5604.0 network, 16724.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 615315.75, cumulative cost = {5333199.5 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 615315.75, cumulative cost = {4717883.75 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 463.0, cumulative cost = {926.0 rows, 74080.0 cpu, 5556.0 io, 5556.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 463.0, cumulative cost = {463.0 rows, 0.0 cpu, 5556.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 615246.45, cumulative cost = {5332140.9 rows, 4101963.0 cpu, 9.8439456E7 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 615246.45, cumulative cost = {4716894.45 rows, 4101963.0 cpu, 9.8439456E7 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 73.95, cumulative cost = {641.9000000000001 rows, 652.0 cpu, 5928.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 73.95, cumulative cost = {567.95 rows, 652.0 cpu, 5928.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 492.0, cumulative cost = {492.0 rows, 0.0 cpu, 5904.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID fa2930fc0db9a848f54a82b43db66c8c
waiting...
