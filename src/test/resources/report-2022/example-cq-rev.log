WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1

------------> using sink uuid: 5de3797d_0472_408b_93b5_0a1c64000ff4

Adding statistics for table s number 3 
Adding statistics for table a number 3 
Adding statistics for table b number 3 
Adding statistics for table r number 3 
Adding statistics for table t number 3 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 13962.372505716601, cumulative cost = {863537.81751715 rows, 6385952.621097587 cpu, 1.2322872E7 io, 335732.9401371984 network, 1788959.680731725 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 13962.372505716601, cumulative cost = {849575.4450114333 rows, 6162554.661006121 cpu, 1.2322872E7 io, 335732.9401371984 network, 895367.8403658625 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 13962.372505716601, cumulative cost = {835613.0725057167 rows, 3705177.0999999996 cpu, 1.2322872E7 io, 636.0 network, 895367.8403658625 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 77025.59999999999, cumulative cost = {821650.7000000001 rows, 2472767.5 cpu, 1.2322872E7 io, 636.0 network, 1776.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 77016.9, cumulative cost = {744548.7000000001 rows, 2395524.9 cpu, 1.2322164E7 io, 612.0 network, 1748.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 38511.9, cumulative cost = {333816.80000000005 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 38511.9, cumulative cost = {295304.9 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 47.0, cumulative cost = {94.0 rows, 7520.0 cpu, 564.0 io, 564.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 47.0, cumulative cost = {47.0 rows, 0.0 cpu, 564.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 38505.0, cumulative cost = {333715.0 rows, 257020.0 cpu, 6160824.0 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 38505.0, cumulative cost = {295210.0 rows, 257020.0 cpu, 6160824.0 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 8.7, cumulative cost = {76.4 rows, 217.0 cpu, 708.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 8.7, cumulative cost = {67.7 rows, 217.0 cpu, 708.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 57.0, cumulative cost = {57.0 rows, 0.0 cpu, 684.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID eb54db27321f8be633dfee7ff49f7def
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1

------------> using sink uuid: 1fcdf323_c87e_4863_9e0b_09f8fda7dc26

Adding statistics for table s number 3 
Adding statistics for table a number 3 
Adding statistics for table b number 3 
Adding statistics for table r number 3 
Adding statistics for table t number 3 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 13962.372505716601, cumulative cost = {863537.81751715 rows, 6385952.621097587 cpu, 1.2322872E7 io, 335732.9401371984 network, 1788959.680731725 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 13962.372505716601, cumulative cost = {849575.4450114333 rows, 6162554.661006121 cpu, 1.2322872E7 io, 335732.9401371984 network, 895367.8403658625 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 13962.372505716601, cumulative cost = {835613.0725057167 rows, 3705177.0999999996 cpu, 1.2322872E7 io, 636.0 network, 895367.8403658625 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 77025.59999999999, cumulative cost = {821650.7000000001 rows, 2472767.5 cpu, 1.2322872E7 io, 636.0 network, 1776.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 77016.9, cumulative cost = {744548.7000000001 rows, 2395524.9 cpu, 1.2322164E7 io, 612.0 network, 1748.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 38511.9, cumulative cost = {333816.80000000005 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 38511.9, cumulative cost = {295304.9 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 47.0, cumulative cost = {94.0 rows, 7520.0 cpu, 564.0 io, 564.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 47.0, cumulative cost = {47.0 rows, 0.0 cpu, 564.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 38505.0, cumulative cost = {333715.0 rows, 257020.0 cpu, 6160824.0 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 38505.0, cumulative cost = {295210.0 rows, 257020.0 cpu, 6160824.0 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 8.7, cumulative cost = {76.4 rows, 217.0 cpu, 708.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 8.7, cumulative cost = {67.7 rows, 217.0 cpu, 708.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 57.0, cumulative cost = {57.0 rows, 0.0 cpu, 684.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID f53a0a859b7aefcdddee529661aea233
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1

------------> using sink uuid: 5aced176_5489_4304_b8a7_4a4daa01db61

Adding statistics for table s number 3 
Adding statistics for table a number 3 
Adding statistics for table b number 3 
Adding statistics for table r number 3 
Adding statistics for table t number 3 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 13962.372505716601, cumulative cost = {863537.81751715 rows, 6385952.621097587 cpu, 1.2322872E7 io, 335732.9401371984 network, 1788959.680731725 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 13962.372505716601, cumulative cost = {849575.4450114333 rows, 6162554.661006121 cpu, 1.2322872E7 io, 335732.9401371984 network, 895367.8403658625 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 13962.372505716601, cumulative cost = {835613.0725057167 rows, 3705177.0999999996 cpu, 1.2322872E7 io, 636.0 network, 895367.8403658625 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 77025.59999999999, cumulative cost = {821650.7000000001 rows, 2472767.5 cpu, 1.2322872E7 io, 636.0 network, 1776.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 77016.9, cumulative cost = {744548.7000000001 rows, 2395524.9 cpu, 1.2322164E7 io, 612.0 network, 1748.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 38511.9, cumulative cost = {333816.80000000005 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 38511.9, cumulative cost = {295304.9 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 47.0, cumulative cost = {94.0 rows, 7520.0 cpu, 564.0 io, 564.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 47.0, cumulative cost = {47.0 rows, 0.0 cpu, 564.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 38505.0, cumulative cost = {333715.0 rows, 257020.0 cpu, 6160824.0 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 38505.0, cumulative cost = {295210.0 rows, 257020.0 cpu, 6160824.0 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 8.7, cumulative cost = {76.4 rows, 217.0 cpu, 708.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 8.7, cumulative cost = {67.7 rows, 217.0 cpu, 708.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 57.0, cumulative cost = {57.0 rows, 0.0 cpu, 684.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID d350b8ba80667805eb9daf0dcb3e901f
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1

------------> using sink uuid: e9dc852b_f255_4b3c_9b98_ddb1c4aac077

Adding statistics for table s number 5 
Adding statistics for table a number 5 
Adding statistics for table b number 5 
Adding statistics for table r number 5 
Adding statistics for table t number 5 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 125478.27967552053, cumulative cost = {7760432.089026562 rows, 5.737602624769994E7 cpu, 1.1074698E8 io, 3015834.7122124927 network, 1.6074155798466628E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 125478.27967552053, cumulative cost = {7634953.809351041 rows, 5.536837377289161E7 cpu, 1.1074698E8 io, 3015834.7122124927 network, 8043545.899233314 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 125478.27967552053, cumulative cost = {7509475.52967552 rows, 3.3284196549999997E7 cpu, 1.1074698E8 io, 4356.0 network, 8043545.899233314 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 692220.45, cumulative cost = {7383997.249999999 rows, 2.2208669349999998E7 cpu, 1.1074698E8 io, 4356.0 network, 12936.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 692169.8999999999, cumulative cost = {6691337.699999999 rows, 2.15159529E7 cpu, 1.10742924E8 io, 4332.0 network, 12908.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 346111.64999999997, cumulative cost = {2999991.3 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 346111.64999999997, cumulative cost = {2653879.65 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 357.0, cumulative cost = {714.0 rows, 57120.0 cpu, 4284.0 io, 4284.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 357.0, cumulative cost = {357.0 rows, 0.0 cpu, 4284.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 346058.25, cumulative cost = {2999176.5 rows, 2307375.0 cpu, 5.5369344E7 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 346058.25, cumulative cost = {2653118.25 rows, 2307375.0 cpu, 5.5369344E7 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 50.55, cumulative cost = {439.1 rows, 496.0 cpu, 4056.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 50.55, cumulative cost = {388.55 rows, 496.0 cpu, 4056.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 336.0, cumulative cost = {336.0 rows, 0.0 cpu, 4032.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID ae792ac53fd0cb7377ffb8a7dd074826
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...

------------> using sink uuid: 5db5102c_b344_42f6_978f_8c3c325b44dd

Adding statistics for table s number 5 
Adding statistics for table a number 5 
Adding statistics for table b number 5 
Adding statistics for table r number 5 
Adding statistics for table t number 5 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 125478.27967552053, cumulative cost = {7760432.089026562 rows, 5.737602624769994E7 cpu, 1.1074698E8 io, 3015834.7122124927 network, 1.6074155798466628E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 125478.27967552053, cumulative cost = {7634953.809351041 rows, 5.536837377289161E7 cpu, 1.1074698E8 io, 3015834.7122124927 network, 8043545.899233314 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 125478.27967552053, cumulative cost = {7509475.52967552 rows, 3.3284196549999997E7 cpu, 1.1074698E8 io, 4356.0 network, 8043545.899233314 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 692220.45, cumulative cost = {7383997.249999999 rows, 2.2208669349999998E7 cpu, 1.1074698E8 io, 4356.0 network, 12936.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 692169.8999999999, cumulative cost = {6691337.699999999 rows, 2.15159529E7 cpu, 1.10742924E8 io, 4332.0 network, 12908.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 346111.64999999997, cumulative cost = {2999991.3 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 346111.64999999997, cumulative cost = {2653879.65 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 357.0, cumulative cost = {714.0 rows, 57120.0 cpu, 4284.0 io, 4284.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 357.0, cumulative cost = {357.0 rows, 0.0 cpu, 4284.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 346058.25, cumulative cost = {2999176.5 rows, 2307375.0 cpu, 5.5369344E7 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 346058.25, cumulative cost = {2653118.25 rows, 2307375.0 cpu, 5.5369344E7 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 50.55, cumulative cost = {439.1 rows, 496.0 cpu, 4056.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 50.55, cumulative cost = {388.55 rows, 496.0 cpu, 4056.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 336.0, cumulative cost = {336.0 rows, 0.0 cpu, 4032.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID f70ef022f68cee0a399d008291ae7604
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...

------------> using sink uuid: 54e33a4f_b98f_4e0f_bb10_f2423663b9f6

Adding statistics for table s number 5 
Adding statistics for table a number 5 
Adding statistics for table b number 5 
Adding statistics for table r number 5 
Adding statistics for table t number 5 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 125478.27967552053, cumulative cost = {7760432.089026562 rows, 5.737602624769994E7 cpu, 1.1074698E8 io, 3015834.7122124927 network, 1.6074155798466628E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 125478.27967552053, cumulative cost = {7634953.809351041 rows, 5.536837377289161E7 cpu, 1.1074698E8 io, 3015834.7122124927 network, 8043545.899233314 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 125478.27967552053, cumulative cost = {7509475.52967552 rows, 3.3284196549999997E7 cpu, 1.1074698E8 io, 4356.0 network, 8043545.899233314 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 692220.45, cumulative cost = {7383997.249999999 rows, 2.2208669349999998E7 cpu, 1.1074698E8 io, 4356.0 network, 12936.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 692169.8999999999, cumulative cost = {6691337.699999999 rows, 2.15159529E7 cpu, 1.10742924E8 io, 4332.0 network, 12908.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 346111.64999999997, cumulative cost = {2999991.3 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 346111.64999999997, cumulative cost = {2653879.65 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 357.0, cumulative cost = {714.0 rows, 57120.0 cpu, 4284.0 io, 4284.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 357.0, cumulative cost = {357.0 rows, 0.0 cpu, 4284.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 346058.25, cumulative cost = {2999176.5 rows, 2307375.0 cpu, 5.5369344E7 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 346058.25, cumulative cost = {2653118.25 rows, 2307375.0 cpu, 5.5369344E7 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 50.55, cumulative cost = {439.1 rows, 496.0 cpu, 4056.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 50.55, cumulative cost = {388.55 rows, 496.0 cpu, 4056.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 336.0, cumulative cost = {336.0 rows, 0.0 cpu, 4032.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID 516e8875a4317a7d6a0df98c12dbc61f
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...

------------> using sink uuid: f5f7a768_59b4_4087_a0c2_869b1d1681d8

Adding statistics for table s number 7 
Adding statistics for table a number 7 
Adding statistics for table b number 7 
Adding statistics for table r number 7 
Adding statistics for table t number 7 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 348617.6591862519, cumulative cost = {2.156050502755876E7 rows, 1.5933902031376037E8 cpu, 3.07698612E8 io, 8373675.820470046 network, 4.464348437584025E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 348617.6591862519, cumulative cost = {2.1211887368372507E7 rows, 1.5376113776678035E8 cpu, 3.07698612E8 io, 8373675.820470046 network, 2.2331954187920123E7 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 348617.6591862519, cumulative cost = {2.0863269709186256E7 rows, 9.240442975E7 cpu, 3.07698612E8 io, 6852.0 network, 2.2331954187920123E7 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 1923203.5499999998, cumulative cost = {2.0514652050000004E7 rows, 6.1633172949999996E7 cpu, 3.07698612E8 io, 6852.0 network, 20424.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 1923113.4, cumulative cost = {1.8590666200000003E7 rows, 5.97092094E7 cpu, 3.07691388E8 io, 6828.0 network, 20396.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 961599.0, cumulative cost = {8334423.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 961599.0, cumulative cost = {7372824.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 565.0, cumulative cost = {1130.0 rows, 90400.0 cpu, 6780.0 io, 6780.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 565.0, cumulative cost = {565.0 rows, 0.0 cpu, 6780.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 961514.3999999999, cumulative cost = {8333129.800000001 rows, 6410416.0 cpu, 1.53842328E8 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 961514.3999999999, cumulative cost = {7371615.4 rows, 6410416.0 cpu, 1.53842328E8 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 90.14999999999999, cumulative cost = {782.3 rows, 760.0 cpu, 7224.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 90.14999999999999, cumulative cost = {692.15 rows, 760.0 cpu, 7224.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 600.0, cumulative cost = {600.0 rows, 0.0 cpu, 7200.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID 623b1c860a6dda54019200be150bf4f0
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...

------------> using sink uuid: b01cb463_a482_4c4c_8725_6cd14c5ae3a9

Adding statistics for table s number 7 
Adding statistics for table a number 7 
Adding statistics for table b number 7 
Adding statistics for table r number 7 
Adding statistics for table t number 7 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 348617.6591862519, cumulative cost = {2.156050502755876E7 rows, 1.5933902031376037E8 cpu, 3.07698612E8 io, 8373675.820470046 network, 4.464348437584025E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 348617.6591862519, cumulative cost = {2.1211887368372507E7 rows, 1.5376113776678035E8 cpu, 3.07698612E8 io, 8373675.820470046 network, 2.2331954187920123E7 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 348617.6591862519, cumulative cost = {2.0863269709186256E7 rows, 9.240442975E7 cpu, 3.07698612E8 io, 6852.0 network, 2.2331954187920123E7 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 1923203.5499999998, cumulative cost = {2.0514652050000004E7 rows, 6.1633172949999996E7 cpu, 3.07698612E8 io, 6852.0 network, 20424.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 1923113.4, cumulative cost = {1.8590666200000003E7 rows, 5.97092094E7 cpu, 3.07691388E8 io, 6828.0 network, 20396.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 961599.0, cumulative cost = {8334423.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 961599.0, cumulative cost = {7372824.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 565.0, cumulative cost = {1130.0 rows, 90400.0 cpu, 6780.0 io, 6780.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 565.0, cumulative cost = {565.0 rows, 0.0 cpu, 6780.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 961514.3999999999, cumulative cost = {8333129.800000001 rows, 6410416.0 cpu, 1.53842328E8 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 961514.3999999999, cumulative cost = {7371615.4 rows, 6410416.0 cpu, 1.53842328E8 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 90.14999999999999, cumulative cost = {782.3 rows, 760.0 cpu, 7224.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 90.14999999999999, cumulative cost = {692.15 rows, 760.0 cpu, 7224.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 600.0, cumulative cost = {600.0 rows, 0.0 cpu, 7200.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID 0f870a08f409b209b947ebbeccb28a6e
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...

------------> using sink uuid: c1c5851b_62f2_4ba4_a927_ac9bbbf3ca6d

Adding statistics for table s number 7 
Adding statistics for table a number 7 
Adding statistics for table b number 7 
Adding statistics for table r number 7 
Adding statistics for table t number 7 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 348617.6591862519, cumulative cost = {2.156050502755876E7 rows, 1.5933902031376037E8 cpu, 3.07698612E8 io, 8373675.820470046 network, 4.464348437584025E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 348617.6591862519, cumulative cost = {2.1211887368372507E7 rows, 1.5376113776678035E8 cpu, 3.07698612E8 io, 8373675.820470046 network, 2.2331954187920123E7 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 348617.6591862519, cumulative cost = {2.0863269709186256E7 rows, 9.240442975E7 cpu, 3.07698612E8 io, 6852.0 network, 2.2331954187920123E7 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 1923203.5499999998, cumulative cost = {2.0514652050000004E7 rows, 6.1633172949999996E7 cpu, 3.07698612E8 io, 6852.0 network, 20424.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 1923113.4, cumulative cost = {1.8590666200000003E7 rows, 5.97092094E7 cpu, 3.07691388E8 io, 6828.0 network, 20396.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 961599.0, cumulative cost = {8334423.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 961599.0, cumulative cost = {7372824.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 565.0, cumulative cost = {1130.0 rows, 90400.0 cpu, 6780.0 io, 6780.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 565.0, cumulative cost = {565.0 rows, 0.0 cpu, 6780.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 961514.3999999999, cumulative cost = {8333129.800000001 rows, 6410416.0 cpu, 1.53842328E8 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 961514.3999999999, cumulative cost = {7371615.4 rows, 6410416.0 cpu, 1.53842328E8 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 90.14999999999999, cumulative cost = {782.3 rows, 760.0 cpu, 7224.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 90.14999999999999, cumulative cost = {692.15 rows, 760.0 cpu, 7224.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 600.0, cumulative cost = {600.0 rows, 0.0 cpu, 7200.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID 88ca7b361a383fc02ce01201558756e3
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...
waiting...

------------> using sink uuid: 0280fe53_48fb_4d93_9264_c0d4ff6a12c1

Adding statistics for table s number 9 
Adding statistics for table a number 9 
Adding statistics for table b number 9 
Adding statistics for table r number 9 
Adding statistics for table t number 9 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 223076.48814551177, cumulative cost = {1.3796410114436537E7 rows, 1.0197559747393826E8 cpu, 1.96890348E8 io, 5359463.715492282 network, 2.8570542482625507E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 223076.48814551177, cumulative cost = {1.3573333626291025E7 rows, 9.840637366361007E7 cpu, 1.96890348E8 io, 5359463.715492282 network, 1.4293647241312753E7 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 223076.48814551177, cumulative cost = {1.3350257138145514E7 rows, 5.914491175E7 cpu, 1.96890348E8 io, 5628.0 network, 1.4293647241312753E7 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 1230636.15, cumulative cost = {1.3127180650000002E7 rows, 3.945473335E7 cpu, 1.96890348E8 io, 5628.0 network, 16752.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 1230562.2, cumulative cost = {1.1895902600000001E7 rows, 3.82234452E7 cpu, 1.9688442E8 io, 5604.0 network, 16724.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 615315.75, cumulative cost = {5333199.5 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 615315.75, cumulative cost = {4717883.75 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 463.0, cumulative cost = {926.0 rows, 74080.0 cpu, 5556.0 io, 5556.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 463.0, cumulative cost = {463.0 rows, 0.0 cpu, 5556.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 615246.45, cumulative cost = {5332140.9 rows, 4101963.0 cpu, 9.8439456E7 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 615246.45, cumulative cost = {4716894.45 rows, 4101963.0 cpu, 9.8439456E7 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 73.95, cumulative cost = {641.9000000000001 rows, 652.0 cpu, 5928.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 73.95, cumulative cost = {567.95 rows, 652.0 cpu, 5928.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 492.0, cumulative cost = {492.0 rows, 0.0 cpu, 5904.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID cc5381acaa070ace159c1c4f541730a5
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...
waiting...

------------> using sink uuid: ad0fc886_34df_4873_89f9_54f0fa1e7690

Adding statistics for table s number 9 
Adding statistics for table a number 9 
Adding statistics for table b number 9 
Adding statistics for table r number 9 
Adding statistics for table t number 9 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 223076.48814551177, cumulative cost = {1.3796410114436537E7 rows, 1.0197559747393826E8 cpu, 1.96890348E8 io, 5359463.715492282 network, 2.8570542482625507E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 223076.48814551177, cumulative cost = {1.3573333626291025E7 rows, 9.840637366361007E7 cpu, 1.96890348E8 io, 5359463.715492282 network, 1.4293647241312753E7 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 223076.48814551177, cumulative cost = {1.3350257138145514E7 rows, 5.914491175E7 cpu, 1.96890348E8 io, 5628.0 network, 1.4293647241312753E7 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 1230636.15, cumulative cost = {1.3127180650000002E7 rows, 3.945473335E7 cpu, 1.96890348E8 io, 5628.0 network, 16752.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 1230562.2, cumulative cost = {1.1895902600000001E7 rows, 3.82234452E7 cpu, 1.9688442E8 io, 5604.0 network, 16724.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 615315.75, cumulative cost = {5333199.5 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 615315.75, cumulative cost = {4717883.75 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 463.0, cumulative cost = {926.0 rows, 74080.0 cpu, 5556.0 io, 5556.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 463.0, cumulative cost = {463.0 rows, 0.0 cpu, 5556.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 615246.45, cumulative cost = {5332140.9 rows, 4101963.0 cpu, 9.8439456E7 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 615246.45, cumulative cost = {4716894.45 rows, 4101963.0 cpu, 9.8439456E7 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 73.95, cumulative cost = {641.9000000000001 rows, 652.0 cpu, 5928.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 73.95, cumulative cost = {567.95 rows, 652.0 cpu, 5928.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 492.0, cumulative cost = {492.0 rows, 0.0 cpu, 5904.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID cee5e1cab60a2226a57e16e538e93054
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...
waiting...

------------> using sink uuid: f0fd3ed1_e910_434b_9f9f_523819eb37f9

Adding statistics for table s number 9 
Adding statistics for table a number 9 
Adding statistics for table b number 9 
Adding statistics for table r number 9 
Adding statistics for table t number 9 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 223076.48814551177, cumulative cost = {1.3796410114436537E7 rows, 1.0197559747393826E8 cpu, 1.96890348E8 io, 5359463.715492282 network, 2.8570542482625507E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 223076.48814551177, cumulative cost = {1.3573333626291025E7 rows, 9.840637366361007E7 cpu, 1.96890348E8 io, 5359463.715492282 network, 1.4293647241312753E7 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 223076.48814551177, cumulative cost = {1.3350257138145514E7 rows, 5.914491175E7 cpu, 1.96890348E8 io, 5628.0 network, 1.4293647241312753E7 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 1230636.15, cumulative cost = {1.3127180650000002E7 rows, 3.945473335E7 cpu, 1.96890348E8 io, 5628.0 network, 16752.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 1230562.2, cumulative cost = {1.1895902600000001E7 rows, 3.82234452E7 cpu, 1.9688442E8 io, 5604.0 network, 16724.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 615315.75, cumulative cost = {5333199.5 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 615315.75, cumulative cost = {4717883.75 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 463.0, cumulative cost = {926.0 rows, 74080.0 cpu, 5556.0 io, 5556.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 463.0, cumulative cost = {463.0 rows, 0.0 cpu, 5556.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 615246.45, cumulative cost = {5332140.9 rows, 4101963.0 cpu, 9.8439456E7 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 615246.45, cumulative cost = {4716894.45 rows, 4101963.0 cpu, 9.8439456E7 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 73.95, cumulative cost = {641.9000000000001 rows, 652.0 cpu, 5928.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 73.95, cumulative cost = {567.95 rows, 652.0 cpu, 5928.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 492.0, cumulative cost = {492.0 rows, 0.0 cpu, 5904.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID fc704e53fa4774d1965d48bce4cbee93
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...
waiting...

------------> using sink uuid: 7fa52fdd_8272_418a_9f30_45f9d06f769b

Adding statistics for table s number 3 
Adding statistics for table a number 3 
Adding statistics for table b number 3 
Adding statistics for table r number 3 
Adding statistics for table t number 3 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 13962.372505716601, cumulative cost = {863537.81751715 rows, 6385952.621097587 cpu, 1.2322872E7 io, 335732.9401371984 network, 1788959.680731725 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 13962.372505716601, cumulative cost = {849575.4450114333 rows, 6162554.661006121 cpu, 1.2322872E7 io, 335732.9401371984 network, 895367.8403658625 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 13962.372505716601, cumulative cost = {835613.0725057167 rows, 3705177.0999999996 cpu, 1.2322872E7 io, 636.0 network, 895367.8403658625 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 77025.59999999999, cumulative cost = {821650.7000000001 rows, 2472767.5 cpu, 1.2322872E7 io, 636.0 network, 1776.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 77016.9, cumulative cost = {744548.7000000001 rows, 2395524.9 cpu, 1.2322164E7 io, 612.0 network, 1748.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 38511.9, cumulative cost = {333816.80000000005 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 38511.9, cumulative cost = {295304.9 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 47.0, cumulative cost = {94.0 rows, 7520.0 cpu, 564.0 io, 564.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 47.0, cumulative cost = {47.0 rows, 0.0 cpu, 564.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 38505.0, cumulative cost = {333715.0 rows, 257020.0 cpu, 6160824.0 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 38505.0, cumulative cost = {295210.0 rows, 257020.0 cpu, 6160824.0 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 8.7, cumulative cost = {76.4 rows, 217.0 cpu, 708.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 8.7, cumulative cost = {67.7 rows, 217.0 cpu, 708.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 57.0, cumulative cost = {57.0 rows, 0.0 cpu, 684.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID ddb8e84f00e8345161d7ba1f59850b26
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1

------------> using sink uuid: 22b71d6f_066e_4f55_9603_fce49bbbcc32

Adding statistics for table s number 3 
Adding statistics for table a number 3 
Adding statistics for table b number 3 
Adding statistics for table r number 3 
Adding statistics for table t number 3 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 13962.372505716601, cumulative cost = {863537.81751715 rows, 6385952.621097587 cpu, 1.2322872E7 io, 335732.9401371984 network, 1788959.680731725 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 13962.372505716601, cumulative cost = {849575.4450114333 rows, 6162554.661006121 cpu, 1.2322872E7 io, 335732.9401371984 network, 895367.8403658625 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 13962.372505716601, cumulative cost = {835613.0725057167 rows, 3705177.0999999996 cpu, 1.2322872E7 io, 636.0 network, 895367.8403658625 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 77025.59999999999, cumulative cost = {821650.7000000001 rows, 2472767.5 cpu, 1.2322872E7 io, 636.0 network, 1776.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 77016.9, cumulative cost = {744548.7000000001 rows, 2395524.9 cpu, 1.2322164E7 io, 612.0 network, 1748.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 38511.9, cumulative cost = {333816.80000000005 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 38511.9, cumulative cost = {295304.9 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 47.0, cumulative cost = {94.0 rows, 7520.0 cpu, 564.0 io, 564.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 47.0, cumulative cost = {47.0 rows, 0.0 cpu, 564.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 38505.0, cumulative cost = {333715.0 rows, 257020.0 cpu, 6160824.0 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 38505.0, cumulative cost = {295210.0 rows, 257020.0 cpu, 6160824.0 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 8.7, cumulative cost = {76.4 rows, 217.0 cpu, 708.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 8.7, cumulative cost = {67.7 rows, 217.0 cpu, 708.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 57.0, cumulative cost = {57.0 rows, 0.0 cpu, 684.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID 347d4eabb6c9402b6c368d0de7cb3683
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1

------------> using sink uuid: 2c0c08da_ad08_4469_b84a_b27a3105c6ce

Adding statistics for table s number 3 
Adding statistics for table a number 3 
Adding statistics for table b number 3 
Adding statistics for table r number 3 
Adding statistics for table t number 3 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 13962.372505716601, cumulative cost = {863537.81751715 rows, 6385952.621097587 cpu, 1.2322872E7 io, 335732.9401371984 network, 1788959.680731725 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 13962.372505716601, cumulative cost = {849575.4450114333 rows, 6162554.661006121 cpu, 1.2322872E7 io, 335732.9401371984 network, 895367.8403658625 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 13962.372505716601, cumulative cost = {835613.0725057167 rows, 3705177.0999999996 cpu, 1.2322872E7 io, 636.0 network, 895367.8403658625 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 77025.59999999999, cumulative cost = {821650.7000000001 rows, 2472767.5 cpu, 1.2322872E7 io, 636.0 network, 1776.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 77016.9, cumulative cost = {744548.7000000001 rows, 2395524.9 cpu, 1.2322164E7 io, 612.0 network, 1748.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 38511.9, cumulative cost = {333816.80000000005 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 38511.9, cumulative cost = {295304.9 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 47.0, cumulative cost = {94.0 rows, 7520.0 cpu, 564.0 io, 564.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 47.0, cumulative cost = {47.0 rows, 0.0 cpu, 564.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 38505.0, cumulative cost = {333715.0 rows, 257020.0 cpu, 6160824.0 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 38505.0, cumulative cost = {295210.0 rows, 257020.0 cpu, 6160824.0 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 8.7, cumulative cost = {76.4 rows, 217.0 cpu, 708.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 8.7, cumulative cost = {67.7 rows, 217.0 cpu, 708.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 57.0, cumulative cost = {57.0 rows, 0.0 cpu, 684.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID a24d1b08421adfd365ba51dd2183d312
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1

------------> using sink uuid: 9eb87687_c087_4bb3_a6c8_2581598ae443

Adding statistics for table s number 5 
Adding statistics for table a number 5 
Adding statistics for table b number 5 
Adding statistics for table r number 5 
Adding statistics for table t number 5 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 125478.27967552053, cumulative cost = {7760432.089026562 rows, 5.737602624769994E7 cpu, 1.1074698E8 io, 3015834.7122124927 network, 1.6074155798466628E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 125478.27967552053, cumulative cost = {7634953.809351041 rows, 5.536837377289161E7 cpu, 1.1074698E8 io, 3015834.7122124927 network, 8043545.899233314 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 125478.27967552053, cumulative cost = {7509475.52967552 rows, 3.3284196549999997E7 cpu, 1.1074698E8 io, 4356.0 network, 8043545.899233314 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 692220.45, cumulative cost = {7383997.249999999 rows, 2.2208669349999998E7 cpu, 1.1074698E8 io, 4356.0 network, 12936.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 692169.8999999999, cumulative cost = {6691337.699999999 rows, 2.15159529E7 cpu, 1.10742924E8 io, 4332.0 network, 12908.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 346111.64999999997, cumulative cost = {2999991.3 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 346111.64999999997, cumulative cost = {2653879.65 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 357.0, cumulative cost = {714.0 rows, 57120.0 cpu, 4284.0 io, 4284.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 357.0, cumulative cost = {357.0 rows, 0.0 cpu, 4284.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 346058.25, cumulative cost = {2999176.5 rows, 2307375.0 cpu, 5.5369344E7 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 346058.25, cumulative cost = {2653118.25 rows, 2307375.0 cpu, 5.5369344E7 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 50.55, cumulative cost = {439.1 rows, 496.0 cpu, 4056.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 50.55, cumulative cost = {388.55 rows, 496.0 cpu, 4056.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 336.0, cumulative cost = {336.0 rows, 0.0 cpu, 4032.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID 88f243c5b6625092f5bff0e8574be6a4
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1

------------> using sink uuid: 615b76d7_197a_435f_8c7f_80bd03f0f745

Adding statistics for table s number 5 
Adding statistics for table a number 5 
Adding statistics for table b number 5 
Adding statistics for table r number 5 
Adding statistics for table t number 5 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 125478.27967552053, cumulative cost = {7760432.089026562 rows, 5.737602624769994E7 cpu, 1.1074698E8 io, 3015834.7122124927 network, 1.6074155798466628E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 125478.27967552053, cumulative cost = {7634953.809351041 rows, 5.536837377289161E7 cpu, 1.1074698E8 io, 3015834.7122124927 network, 8043545.899233314 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 125478.27967552053, cumulative cost = {7509475.52967552 rows, 3.3284196549999997E7 cpu, 1.1074698E8 io, 4356.0 network, 8043545.899233314 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 692220.45, cumulative cost = {7383997.249999999 rows, 2.2208669349999998E7 cpu, 1.1074698E8 io, 4356.0 network, 12936.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 692169.8999999999, cumulative cost = {6691337.699999999 rows, 2.15159529E7 cpu, 1.10742924E8 io, 4332.0 network, 12908.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 346111.64999999997, cumulative cost = {2999991.3 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 346111.64999999997, cumulative cost = {2653879.65 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 357.0, cumulative cost = {714.0 rows, 57120.0 cpu, 4284.0 io, 4284.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 357.0, cumulative cost = {357.0 rows, 0.0 cpu, 4284.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 346058.25, cumulative cost = {2999176.5 rows, 2307375.0 cpu, 5.5369344E7 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 346058.25, cumulative cost = {2653118.25 rows, 2307375.0 cpu, 5.5369344E7 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 50.55, cumulative cost = {439.1 rows, 496.0 cpu, 4056.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 50.55, cumulative cost = {388.55 rows, 496.0 cpu, 4056.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 336.0, cumulative cost = {336.0 rows, 0.0 cpu, 4032.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID 3b915ba8d486f0d215243d44232907bb
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1

------------> using sink uuid: b01aed8a_c568_4221_9135_a6567c2ffca8

Adding statistics for table s number 5 
Adding statistics for table a number 5 
Adding statistics for table b number 5 
Adding statistics for table r number 5 
Adding statistics for table t number 5 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 125478.27967552053, cumulative cost = {7760432.089026562 rows, 5.737602624769994E7 cpu, 1.1074698E8 io, 3015834.7122124927 network, 1.6074155798466628E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 125478.27967552053, cumulative cost = {7634953.809351041 rows, 5.536837377289161E7 cpu, 1.1074698E8 io, 3015834.7122124927 network, 8043545.899233314 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 125478.27967552053, cumulative cost = {7509475.52967552 rows, 3.3284196549999997E7 cpu, 1.1074698E8 io, 4356.0 network, 8043545.899233314 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 692220.45, cumulative cost = {7383997.249999999 rows, 2.2208669349999998E7 cpu, 1.1074698E8 io, 4356.0 network, 12936.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 692169.8999999999, cumulative cost = {6691337.699999999 rows, 2.15159529E7 cpu, 1.10742924E8 io, 4332.0 network, 12908.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 346111.64999999997, cumulative cost = {2999991.3 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 346111.64999999997, cumulative cost = {2653879.65 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 357.0, cumulative cost = {714.0 rows, 57120.0 cpu, 4284.0 io, 4284.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 357.0, cumulative cost = {357.0 rows, 0.0 cpu, 4284.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 346058.25, cumulative cost = {2999176.5 rows, 2307375.0 cpu, 5.5369344E7 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 346058.25, cumulative cost = {2653118.25 rows, 2307375.0 cpu, 5.5369344E7 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 50.55, cumulative cost = {439.1 rows, 496.0 cpu, 4056.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 50.55, cumulative cost = {388.55 rows, 496.0 cpu, 4056.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 336.0, cumulative cost = {336.0 rows, 0.0 cpu, 4032.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID 35f6934d7f18336747a643cd796ca891
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1

------------> using sink uuid: 2fb87ce0_d204_4d3d_9631_95c17855e03c

Adding statistics for table s number 7 
Adding statistics for table a number 7 
Adding statistics for table b number 7 
Adding statistics for table r number 7 
Adding statistics for table t number 7 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 348617.6591862519, cumulative cost = {2.156050502755876E7 rows, 1.5933902031376037E8 cpu, 3.07698612E8 io, 8373675.820470046 network, 4.464348437584025E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 348617.6591862519, cumulative cost = {2.1211887368372507E7 rows, 1.5376113776678035E8 cpu, 3.07698612E8 io, 8373675.820470046 network, 2.2331954187920123E7 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 348617.6591862519, cumulative cost = {2.0863269709186256E7 rows, 9.240442975E7 cpu, 3.07698612E8 io, 6852.0 network, 2.2331954187920123E7 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 1923203.5499999998, cumulative cost = {2.0514652050000004E7 rows, 6.1633172949999996E7 cpu, 3.07698612E8 io, 6852.0 network, 20424.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 1923113.4, cumulative cost = {1.8590666200000003E7 rows, 5.97092094E7 cpu, 3.07691388E8 io, 6828.0 network, 20396.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 961599.0, cumulative cost = {8334423.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 961599.0, cumulative cost = {7372824.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 565.0, cumulative cost = {1130.0 rows, 90400.0 cpu, 6780.0 io, 6780.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 565.0, cumulative cost = {565.0 rows, 0.0 cpu, 6780.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 961514.3999999999, cumulative cost = {8333129.800000001 rows, 6410416.0 cpu, 1.53842328E8 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 961514.3999999999, cumulative cost = {7371615.4 rows, 6410416.0 cpu, 1.53842328E8 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 90.14999999999999, cumulative cost = {782.3 rows, 760.0 cpu, 7224.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 90.14999999999999, cumulative cost = {692.15 rows, 760.0 cpu, 7224.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 600.0, cumulative cost = {600.0 rows, 0.0 cpu, 7200.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID 877421639893f3750d2529045aadba62
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...

------------> using sink uuid: f753e220_1298_442f_8638_0ba9c34f0a1f

Adding statistics for table s number 7 
Adding statistics for table a number 7 
Adding statistics for table b number 7 
Adding statistics for table r number 7 
Adding statistics for table t number 7 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 348617.6591862519, cumulative cost = {2.156050502755876E7 rows, 1.5933902031376037E8 cpu, 3.07698612E8 io, 8373675.820470046 network, 4.464348437584025E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 348617.6591862519, cumulative cost = {2.1211887368372507E7 rows, 1.5376113776678035E8 cpu, 3.07698612E8 io, 8373675.820470046 network, 2.2331954187920123E7 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 348617.6591862519, cumulative cost = {2.0863269709186256E7 rows, 9.240442975E7 cpu, 3.07698612E8 io, 6852.0 network, 2.2331954187920123E7 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 1923203.5499999998, cumulative cost = {2.0514652050000004E7 rows, 6.1633172949999996E7 cpu, 3.07698612E8 io, 6852.0 network, 20424.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 1923113.4, cumulative cost = {1.8590666200000003E7 rows, 5.97092094E7 cpu, 3.07691388E8 io, 6828.0 network, 20396.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 961599.0, cumulative cost = {8334423.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 961599.0, cumulative cost = {7372824.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 565.0, cumulative cost = {1130.0 rows, 90400.0 cpu, 6780.0 io, 6780.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 565.0, cumulative cost = {565.0 rows, 0.0 cpu, 6780.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 961514.3999999999, cumulative cost = {8333129.800000001 rows, 6410416.0 cpu, 1.53842328E8 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 961514.3999999999, cumulative cost = {7371615.4 rows, 6410416.0 cpu, 1.53842328E8 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 90.14999999999999, cumulative cost = {782.3 rows, 760.0 cpu, 7224.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 90.14999999999999, cumulative cost = {692.15 rows, 760.0 cpu, 7224.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 600.0, cumulative cost = {600.0 rows, 0.0 cpu, 7200.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID e9ea0c6f3804264d2a050ed5895d1393
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...

------------> using sink uuid: 494fa997_41f8_494a_bab0_cd083072d6a7

Adding statistics for table s number 7 
Adding statistics for table a number 7 
Adding statistics for table b number 7 
Adding statistics for table r number 7 
Adding statistics for table t number 7 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 348617.6591862519, cumulative cost = {2.156050502755876E7 rows, 1.5933902031376037E8 cpu, 3.07698612E8 io, 8373675.820470046 network, 4.464348437584025E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 348617.6591862519, cumulative cost = {2.1211887368372507E7 rows, 1.5376113776678035E8 cpu, 3.07698612E8 io, 8373675.820470046 network, 2.2331954187920123E7 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 348617.6591862519, cumulative cost = {2.0863269709186256E7 rows, 9.240442975E7 cpu, 3.07698612E8 io, 6852.0 network, 2.2331954187920123E7 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 1923203.5499999998, cumulative cost = {2.0514652050000004E7 rows, 6.1633172949999996E7 cpu, 3.07698612E8 io, 6852.0 network, 20424.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 1923113.4, cumulative cost = {1.8590666200000003E7 rows, 5.97092094E7 cpu, 3.07691388E8 io, 6828.0 network, 20396.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 961599.0, cumulative cost = {8334423.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 961599.0, cumulative cost = {7372824.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 565.0, cumulative cost = {1130.0 rows, 90400.0 cpu, 6780.0 io, 6780.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 565.0, cumulative cost = {565.0 rows, 0.0 cpu, 6780.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 961514.3999999999, cumulative cost = {8333129.800000001 rows, 6410416.0 cpu, 1.53842328E8 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 961514.3999999999, cumulative cost = {7371615.4 rows, 6410416.0 cpu, 1.53842328E8 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 90.14999999999999, cumulative cost = {782.3 rows, 760.0 cpu, 7224.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 90.14999999999999, cumulative cost = {692.15 rows, 760.0 cpu, 7224.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 600.0, cumulative cost = {600.0 rows, 0.0 cpu, 7200.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID 93dfc44ef136429858348ca5775fca1e
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...

------------> using sink uuid: 84e13f34_d745_41cf_8059_8672d684b381

Adding statistics for table s number 9 
Adding statistics for table a number 9 
Adding statistics for table b number 9 
Adding statistics for table r number 9 
Adding statistics for table t number 9 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 223076.48814551177, cumulative cost = {1.3796410114436537E7 rows, 1.0197559747393826E8 cpu, 1.96890348E8 io, 5359463.715492282 network, 2.8570542482625507E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 223076.48814551177, cumulative cost = {1.3573333626291025E7 rows, 9.840637366361007E7 cpu, 1.96890348E8 io, 5359463.715492282 network, 1.4293647241312753E7 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 223076.48814551177, cumulative cost = {1.3350257138145514E7 rows, 5.914491175E7 cpu, 1.96890348E8 io, 5628.0 network, 1.4293647241312753E7 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 1230636.15, cumulative cost = {1.3127180650000002E7 rows, 3.945473335E7 cpu, 1.96890348E8 io, 5628.0 network, 16752.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 1230562.2, cumulative cost = {1.1895902600000001E7 rows, 3.82234452E7 cpu, 1.9688442E8 io, 5604.0 network, 16724.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 615315.75, cumulative cost = {5333199.5 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 615315.75, cumulative cost = {4717883.75 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 463.0, cumulative cost = {926.0 rows, 74080.0 cpu, 5556.0 io, 5556.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 463.0, cumulative cost = {463.0 rows, 0.0 cpu, 5556.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 615246.45, cumulative cost = {5332140.9 rows, 4101963.0 cpu, 9.8439456E7 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 615246.45, cumulative cost = {4716894.45 rows, 4101963.0 cpu, 9.8439456E7 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 73.95, cumulative cost = {641.9000000000001 rows, 652.0 cpu, 5928.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 73.95, cumulative cost = {567.95 rows, 652.0 cpu, 5928.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 492.0, cumulative cost = {492.0 rows, 0.0 cpu, 5904.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID e28a74e6ab5fc47b525a9674cfdfbe69
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...

------------> using sink uuid: 5350f49b_d8ca_48b4_bb0a_f80deaf5a749

Adding statistics for table s number 9 
Adding statistics for table a number 9 
Adding statistics for table b number 9 
Adding statistics for table r number 9 
Adding statistics for table t number 9 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 223076.48814551177, cumulative cost = {1.3796410114436537E7 rows, 1.0197559747393826E8 cpu, 1.96890348E8 io, 5359463.715492282 network, 2.8570542482625507E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 223076.48814551177, cumulative cost = {1.3573333626291025E7 rows, 9.840637366361007E7 cpu, 1.96890348E8 io, 5359463.715492282 network, 1.4293647241312753E7 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 223076.48814551177, cumulative cost = {1.3350257138145514E7 rows, 5.914491175E7 cpu, 1.96890348E8 io, 5628.0 network, 1.4293647241312753E7 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 1230636.15, cumulative cost = {1.3127180650000002E7 rows, 3.945473335E7 cpu, 1.96890348E8 io, 5628.0 network, 16752.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 1230562.2, cumulative cost = {1.1895902600000001E7 rows, 3.82234452E7 cpu, 1.9688442E8 io, 5604.0 network, 16724.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 615315.75, cumulative cost = {5333199.5 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 615315.75, cumulative cost = {4717883.75 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 463.0, cumulative cost = {926.0 rows, 74080.0 cpu, 5556.0 io, 5556.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 463.0, cumulative cost = {463.0 rows, 0.0 cpu, 5556.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 615246.45, cumulative cost = {5332140.9 rows, 4101963.0 cpu, 9.8439456E7 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 615246.45, cumulative cost = {4716894.45 rows, 4101963.0 cpu, 9.8439456E7 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 73.95, cumulative cost = {641.9000000000001 rows, 652.0 cpu, 5928.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 73.95, cumulative cost = {567.95 rows, 652.0 cpu, 5928.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 492.0, cumulative cost = {492.0 rows, 0.0 cpu, 5904.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID e445df15d8017eb97be40db218807e0f
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...

------------> using sink uuid: d3f59c6b_c9cd_46c4_886c_8aafcf61356d

Adding statistics for table s number 9 
Adding statistics for table a number 9 
Adding statistics for table b number 9 
Adding statistics for table r number 9 
Adding statistics for table t number 9 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 223076.48814551177, cumulative cost = {1.3796410114436537E7 rows, 1.0197559747393826E8 cpu, 1.96890348E8 io, 5359463.715492282 network, 2.8570542482625507E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 223076.48814551177, cumulative cost = {1.3573333626291025E7 rows, 9.840637366361007E7 cpu, 1.96890348E8 io, 5359463.715492282 network, 1.4293647241312753E7 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 223076.48814551177, cumulative cost = {1.3350257138145514E7 rows, 5.914491175E7 cpu, 1.96890348E8 io, 5628.0 network, 1.4293647241312753E7 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 1230636.15, cumulative cost = {1.3127180650000002E7 rows, 3.945473335E7 cpu, 1.96890348E8 io, 5628.0 network, 16752.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 1230562.2, cumulative cost = {1.1895902600000001E7 rows, 3.82234452E7 cpu, 1.9688442E8 io, 5604.0 network, 16724.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 615315.75, cumulative cost = {5333199.5 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 615315.75, cumulative cost = {4717883.75 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 463.0, cumulative cost = {926.0 rows, 74080.0 cpu, 5556.0 io, 5556.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 463.0, cumulative cost = {463.0 rows, 0.0 cpu, 5556.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 615246.45, cumulative cost = {5332140.9 rows, 4101963.0 cpu, 9.8439456E7 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 615246.45, cumulative cost = {4716894.45 rows, 4101963.0 cpu, 9.8439456E7 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 73.95, cumulative cost = {641.9000000000001 rows, 652.0 cpu, 5928.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 73.95, cumulative cost = {567.95 rows, 652.0 cpu, 5928.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 492.0, cumulative cost = {492.0 rows, 0.0 cpu, 5904.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID 76f1e2e1c6286a807dfe43a66da5b1f7
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...

------------> using sink uuid: 0bc16dcf_a14a_4eb2_9f59_78e1c2a3c3cc

Adding statistics for table s number 3 
Adding statistics for table a number 3 
Adding statistics for table b number 3 
Adding statistics for table r number 3 
Adding statistics for table t number 3 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 13962.372505716601, cumulative cost = {863537.81751715 rows, 6385952.621097587 cpu, 1.2322872E7 io, 335732.9401371984 network, 1788959.680731725 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 13962.372505716601, cumulative cost = {849575.4450114333 rows, 6162554.661006121 cpu, 1.2322872E7 io, 335732.9401371984 network, 895367.8403658625 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 13962.372505716601, cumulative cost = {835613.0725057167 rows, 3705177.0999999996 cpu, 1.2322872E7 io, 636.0 network, 895367.8403658625 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 77025.59999999999, cumulative cost = {821650.7000000001 rows, 2472767.5 cpu, 1.2322872E7 io, 636.0 network, 1776.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 77016.9, cumulative cost = {744548.7000000001 rows, 2395524.9 cpu, 1.2322164E7 io, 612.0 network, 1748.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 38511.9, cumulative cost = {333816.80000000005 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 38511.9, cumulative cost = {295304.9 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 47.0, cumulative cost = {94.0 rows, 7520.0 cpu, 564.0 io, 564.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 47.0, cumulative cost = {47.0 rows, 0.0 cpu, 564.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 38505.0, cumulative cost = {333715.0 rows, 257020.0 cpu, 6160824.0 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 38505.0, cumulative cost = {295210.0 rows, 257020.0 cpu, 6160824.0 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 8.7, cumulative cost = {76.4 rows, 217.0 cpu, 708.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 8.7, cumulative cost = {67.7 rows, 217.0 cpu, 708.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 57.0, cumulative cost = {57.0 rows, 0.0 cpu, 684.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID 3f056ba3c847c1553ae88d26a7fee8f5
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1

------------> using sink uuid: e78ad7bc_b8bd_430a_8f91_134840ddbc49

Adding statistics for table s number 3 
Adding statistics for table a number 3 
Adding statistics for table b number 3 
Adding statistics for table r number 3 
Adding statistics for table t number 3 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 13962.372505716601, cumulative cost = {863537.81751715 rows, 6385952.621097587 cpu, 1.2322872E7 io, 335732.9401371984 network, 1788959.680731725 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 13962.372505716601, cumulative cost = {849575.4450114333 rows, 6162554.661006121 cpu, 1.2322872E7 io, 335732.9401371984 network, 895367.8403658625 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 13962.372505716601, cumulative cost = {835613.0725057167 rows, 3705177.0999999996 cpu, 1.2322872E7 io, 636.0 network, 895367.8403658625 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 77025.59999999999, cumulative cost = {821650.7000000001 rows, 2472767.5 cpu, 1.2322872E7 io, 636.0 network, 1776.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 77016.9, cumulative cost = {744548.7000000001 rows, 2395524.9 cpu, 1.2322164E7 io, 612.0 network, 1748.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 38511.9, cumulative cost = {333816.80000000005 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 38511.9, cumulative cost = {295304.9 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 47.0, cumulative cost = {94.0 rows, 7520.0 cpu, 564.0 io, 564.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 47.0, cumulative cost = {47.0 rows, 0.0 cpu, 564.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 38505.0, cumulative cost = {333715.0 rows, 257020.0 cpu, 6160824.0 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 38505.0, cumulative cost = {295210.0 rows, 257020.0 cpu, 6160824.0 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 8.7, cumulative cost = {76.4 rows, 217.0 cpu, 708.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 8.7, cumulative cost = {67.7 rows, 217.0 cpu, 708.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 57.0, cumulative cost = {57.0 rows, 0.0 cpu, 684.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID 56598d4fa830affe0e2af7e1a3be0b30
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1

------------> using sink uuid: b321f23a_c975_4281_b552_e3ea371881d9

Adding statistics for table s number 3 
Adding statistics for table a number 3 
Adding statistics for table b number 3 
Adding statistics for table r number 3 
Adding statistics for table t number 3 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 13962.372505716601, cumulative cost = {863537.81751715 rows, 6385952.621097587 cpu, 1.2322872E7 io, 335732.9401371984 network, 1788959.680731725 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 13962.372505716601, cumulative cost = {849575.4450114333 rows, 6162554.661006121 cpu, 1.2322872E7 io, 335732.9401371984 network, 895367.8403658625 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 13962.372505716601, cumulative cost = {835613.0725057167 rows, 3705177.0999999996 cpu, 1.2322872E7 io, 636.0 network, 895367.8403658625 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 77025.59999999999, cumulative cost = {821650.7000000001 rows, 2472767.5 cpu, 1.2322872E7 io, 636.0 network, 1776.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 77016.9, cumulative cost = {744548.7000000001 rows, 2395524.9 cpu, 1.2322164E7 io, 612.0 network, 1748.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 38511.9, cumulative cost = {333816.80000000005 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 38511.9, cumulative cost = {295304.9 rows, 2061488.0 cpu, 6161340.0 io, 564.0 network, 1692.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 47.0, cumulative cost = {94.0 rows, 7520.0 cpu, 564.0 io, 564.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 47.0, cumulative cost = {47.0 rows, 0.0 cpu, 564.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 38505.0, cumulative cost = {333715.0 rows, 257020.0 cpu, 6160824.0 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 38505.0, cumulative cost = {295210.0 rows, 257020.0 cpu, 6160824.0 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 256699.0, cumulative cost = {256699.0 rows, 0.0 cpu, 6160776.0 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 8.7, cumulative cost = {76.4 rows, 217.0 cpu, 708.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 8.7, cumulative cost = {67.7 rows, 217.0 cpu, 708.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 57.0, cumulative cost = {57.0 rows, 0.0 cpu, 684.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID fb1e7e8bcaab6fe635792f83fe376d9b
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1

------------> using sink uuid: 5f7bff85_8e5b_41a1_a3c9_5f0aacf25be1

Adding statistics for table s number 5 
Adding statistics for table a number 5 
Adding statistics for table b number 5 
Adding statistics for table r number 5 
Adding statistics for table t number 5 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 125478.27967552053, cumulative cost = {7760432.089026562 rows, 5.737602624769994E7 cpu, 1.1074698E8 io, 3015834.7122124927 network, 1.6074155798466628E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 125478.27967552053, cumulative cost = {7634953.809351041 rows, 5.536837377289161E7 cpu, 1.1074698E8 io, 3015834.7122124927 network, 8043545.899233314 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 125478.27967552053, cumulative cost = {7509475.52967552 rows, 3.3284196549999997E7 cpu, 1.1074698E8 io, 4356.0 network, 8043545.899233314 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 692220.45, cumulative cost = {7383997.249999999 rows, 2.2208669349999998E7 cpu, 1.1074698E8 io, 4356.0 network, 12936.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 692169.8999999999, cumulative cost = {6691337.699999999 rows, 2.15159529E7 cpu, 1.10742924E8 io, 4332.0 network, 12908.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 346111.64999999997, cumulative cost = {2999991.3 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 346111.64999999997, cumulative cost = {2653879.65 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 357.0, cumulative cost = {714.0 rows, 57120.0 cpu, 4284.0 io, 4284.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 357.0, cumulative cost = {357.0 rows, 0.0 cpu, 4284.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 346058.25, cumulative cost = {2999176.5 rows, 2307375.0 cpu, 5.5369344E7 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 346058.25, cumulative cost = {2653118.25 rows, 2307375.0 cpu, 5.5369344E7 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 50.55, cumulative cost = {439.1 rows, 496.0 cpu, 4056.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 50.55, cumulative cost = {388.55 rows, 496.0 cpu, 4056.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 336.0, cumulative cost = {336.0 rows, 0.0 cpu, 4032.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID f2a7b955ebd3a81ae9ec6e1f53667bb5
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1

------------> using sink uuid: 6741e1e9_9634_43fe_bf05_17c47fc2a1b2

Adding statistics for table s number 5 
Adding statistics for table a number 5 
Adding statistics for table b number 5 
Adding statistics for table r number 5 
Adding statistics for table t number 5 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 125478.27967552053, cumulative cost = {7760432.089026562 rows, 5.737602624769994E7 cpu, 1.1074698E8 io, 3015834.7122124927 network, 1.6074155798466628E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 125478.27967552053, cumulative cost = {7634953.809351041 rows, 5.536837377289161E7 cpu, 1.1074698E8 io, 3015834.7122124927 network, 8043545.899233314 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 125478.27967552053, cumulative cost = {7509475.52967552 rows, 3.3284196549999997E7 cpu, 1.1074698E8 io, 4356.0 network, 8043545.899233314 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 692220.45, cumulative cost = {7383997.249999999 rows, 2.2208669349999998E7 cpu, 1.1074698E8 io, 4356.0 network, 12936.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 692169.8999999999, cumulative cost = {6691337.699999999 rows, 2.15159529E7 cpu, 1.10742924E8 io, 4332.0 network, 12908.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 346111.64999999997, cumulative cost = {2999991.3 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 346111.64999999997, cumulative cost = {2653879.65 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 357.0, cumulative cost = {714.0 rows, 57120.0 cpu, 4284.0 io, 4284.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 357.0, cumulative cost = {357.0 rows, 0.0 cpu, 4284.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 346058.25, cumulative cost = {2999176.5 rows, 2307375.0 cpu, 5.5369344E7 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 346058.25, cumulative cost = {2653118.25 rows, 2307375.0 cpu, 5.5369344E7 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 50.55, cumulative cost = {439.1 rows, 496.0 cpu, 4056.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 50.55, cumulative cost = {388.55 rows, 496.0 cpu, 4056.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 336.0, cumulative cost = {336.0 rows, 0.0 cpu, 4032.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID 6f23e764ab8f9a5fd81ba001f3c27df1
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1

------------> using sink uuid: d810aa72_5543_4e70_9f2f_e2a5117b1a38

Adding statistics for table s number 5 
Adding statistics for table a number 5 
Adding statistics for table b number 5 
Adding statistics for table r number 5 
Adding statistics for table t number 5 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 125478.27967552053, cumulative cost = {7760432.089026562 rows, 5.737602624769994E7 cpu, 1.1074698E8 io, 3015834.7122124927 network, 1.6074155798466628E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 125478.27967552053, cumulative cost = {7634953.809351041 rows, 5.536837377289161E7 cpu, 1.1074698E8 io, 3015834.7122124927 network, 8043545.899233314 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 125478.27967552053, cumulative cost = {7509475.52967552 rows, 3.3284196549999997E7 cpu, 1.1074698E8 io, 4356.0 network, 8043545.899233314 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 692220.45, cumulative cost = {7383997.249999999 rows, 2.2208669349999998E7 cpu, 1.1074698E8 io, 4356.0 network, 12936.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 692169.8999999999, cumulative cost = {6691337.699999999 rows, 2.15159529E7 cpu, 1.10742924E8 io, 4332.0 network, 12908.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 346111.64999999997, cumulative cost = {2999991.3 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 346111.64999999997, cumulative cost = {2653879.65 rows, 1.8516408E7 cpu, 5.537358E7 io, 4284.0 network, 12852.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 357.0, cumulative cost = {714.0 rows, 57120.0 cpu, 4284.0 io, 4284.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 357.0, cumulative cost = {357.0 rows, 0.0 cpu, 4284.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 346058.25, cumulative cost = {2999176.5 rows, 2307375.0 cpu, 5.5369344E7 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 346058.25, cumulative cost = {2653118.25 rows, 2307375.0 cpu, 5.5369344E7 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 2307054.0, cumulative cost = {2307054.0 rows, 0.0 cpu, 5.5369296E7 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 50.55, cumulative cost = {439.1 rows, 496.0 cpu, 4056.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 50.55, cumulative cost = {388.55 rows, 496.0 cpu, 4056.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 336.0, cumulative cost = {336.0 rows, 0.0 cpu, 4032.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID e9916411d8cfdedaa0340584933ed566
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1

------------> using sink uuid: fdc4f288_fe01_438e_85a7_02520ff47126

Adding statistics for table s number 7 
Adding statistics for table a number 7 
Adding statistics for table b number 7 
Adding statistics for table r number 7 
Adding statistics for table t number 7 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 348617.6591862519, cumulative cost = {2.156050502755876E7 rows, 1.5933902031376037E8 cpu, 3.07698612E8 io, 8373675.820470046 network, 4.464348437584025E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 348617.6591862519, cumulative cost = {2.1211887368372507E7 rows, 1.5376113776678035E8 cpu, 3.07698612E8 io, 8373675.820470046 network, 2.2331954187920123E7 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 348617.6591862519, cumulative cost = {2.0863269709186256E7 rows, 9.240442975E7 cpu, 3.07698612E8 io, 6852.0 network, 2.2331954187920123E7 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 1923203.5499999998, cumulative cost = {2.0514652050000004E7 rows, 6.1633172949999996E7 cpu, 3.07698612E8 io, 6852.0 network, 20424.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 1923113.4, cumulative cost = {1.8590666200000003E7 rows, 5.97092094E7 cpu, 3.07691388E8 io, 6828.0 network, 20396.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 961599.0, cumulative cost = {8334423.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 961599.0, cumulative cost = {7372824.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 565.0, cumulative cost = {1130.0 rows, 90400.0 cpu, 6780.0 io, 6780.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 565.0, cumulative cost = {565.0 rows, 0.0 cpu, 6780.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 961514.3999999999, cumulative cost = {8333129.800000001 rows, 6410416.0 cpu, 1.53842328E8 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 961514.3999999999, cumulative cost = {7371615.4 rows, 6410416.0 cpu, 1.53842328E8 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 90.14999999999999, cumulative cost = {782.3 rows, 760.0 cpu, 7224.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 90.14999999999999, cumulative cost = {692.15 rows, 760.0 cpu, 7224.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 600.0, cumulative cost = {600.0 rows, 0.0 cpu, 7200.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID 3f29295ed9e2ff10cbff19d2d5084f5e
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...

------------> using sink uuid: 5f974569_4c25_4022_b731_7407d700fd06

Adding statistics for table s number 7 
Adding statistics for table a number 7 
Adding statistics for table b number 7 
Adding statistics for table r number 7 
Adding statistics for table t number 7 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 348617.6591862519, cumulative cost = {2.156050502755876E7 rows, 1.5933902031376037E8 cpu, 3.07698612E8 io, 8373675.820470046 network, 4.464348437584025E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 348617.6591862519, cumulative cost = {2.1211887368372507E7 rows, 1.5376113776678035E8 cpu, 3.07698612E8 io, 8373675.820470046 network, 2.2331954187920123E7 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 348617.6591862519, cumulative cost = {2.0863269709186256E7 rows, 9.240442975E7 cpu, 3.07698612E8 io, 6852.0 network, 2.2331954187920123E7 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 1923203.5499999998, cumulative cost = {2.0514652050000004E7 rows, 6.1633172949999996E7 cpu, 3.07698612E8 io, 6852.0 network, 20424.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 1923113.4, cumulative cost = {1.8590666200000003E7 rows, 5.97092094E7 cpu, 3.07691388E8 io, 6828.0 network, 20396.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 961599.0, cumulative cost = {8334423.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 961599.0, cumulative cost = {7372824.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 565.0, cumulative cost = {1130.0 rows, 90400.0 cpu, 6780.0 io, 6780.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 565.0, cumulative cost = {565.0 rows, 0.0 cpu, 6780.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 961514.3999999999, cumulative cost = {8333129.800000001 rows, 6410416.0 cpu, 1.53842328E8 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 961514.3999999999, cumulative cost = {7371615.4 rows, 6410416.0 cpu, 1.53842328E8 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 90.14999999999999, cumulative cost = {782.3 rows, 760.0 cpu, 7224.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 90.14999999999999, cumulative cost = {692.15 rows, 760.0 cpu, 7224.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 600.0, cumulative cost = {600.0 rows, 0.0 cpu, 7200.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID e2d5ee11c270e9342e1d158b1f886364
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1

------------> using sink uuid: 342722cd_6a98_4e9a_b78c_dcb93ecad51e

Adding statistics for table s number 7 
Adding statistics for table a number 7 
Adding statistics for table b number 7 
Adding statistics for table r number 7 
Adding statistics for table t number 7 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 348617.6591862519, cumulative cost = {2.156050502755876E7 rows, 1.5933902031376037E8 cpu, 3.07698612E8 io, 8373675.820470046 network, 4.464348437584025E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 348617.6591862519, cumulative cost = {2.1211887368372507E7 rows, 1.5376113776678035E8 cpu, 3.07698612E8 io, 8373675.820470046 network, 2.2331954187920123E7 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 348617.6591862519, cumulative cost = {2.0863269709186256E7 rows, 9.240442975E7 cpu, 3.07698612E8 io, 6852.0 network, 2.2331954187920123E7 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 1923203.5499999998, cumulative cost = {2.0514652050000004E7 rows, 6.1633172949999996E7 cpu, 3.07698612E8 io, 6852.0 network, 20424.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 1923113.4, cumulative cost = {1.8590666200000003E7 rows, 5.97092094E7 cpu, 3.07691388E8 io, 6828.0 network, 20396.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 961599.0, cumulative cost = {8334423.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 961599.0, cumulative cost = {7372824.0 rows, 5.137568E7 cpu, 1.5384906E8 io, 6780.0 network, 20340.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 565.0, cumulative cost = {1130.0 rows, 90400.0 cpu, 6780.0 io, 6780.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 565.0, cumulative cost = {565.0 rows, 0.0 cpu, 6780.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 961514.3999999999, cumulative cost = {8333129.800000001 rows, 6410416.0 cpu, 1.53842328E8 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 961514.3999999999, cumulative cost = {7371615.4 rows, 6410416.0 cpu, 1.53842328E8 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 6410095.0, cumulative cost = {6410095.0 rows, 0.0 cpu, 1.5384228E8 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 90.14999999999999, cumulative cost = {782.3 rows, 760.0 cpu, 7224.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 90.14999999999999, cumulative cost = {692.15 rows, 760.0 cpu, 7224.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 600.0, cumulative cost = {600.0 rows, 0.0 cpu, 7200.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID d8323acf8a1904812db07bd945be5919
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1

------------> using sink uuid: 2ff6d844_46b1_40ef_a313_52dc25fd6344

Adding statistics for table s number 9 
Adding statistics for table a number 9 
Adding statistics for table b number 9 
Adding statistics for table r number 9 
Adding statistics for table t number 9 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 223076.48814551177, cumulative cost = {1.3796410114436537E7 rows, 1.0197559747393826E8 cpu, 1.96890348E8 io, 5359463.715492282 network, 2.8570542482625507E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 223076.48814551177, cumulative cost = {1.3573333626291025E7 rows, 9.840637366361007E7 cpu, 1.96890348E8 io, 5359463.715492282 network, 1.4293647241312753E7 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 223076.48814551177, cumulative cost = {1.3350257138145514E7 rows, 5.914491175E7 cpu, 1.96890348E8 io, 5628.0 network, 1.4293647241312753E7 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 1230636.15, cumulative cost = {1.3127180650000002E7 rows, 3.945473335E7 cpu, 1.96890348E8 io, 5628.0 network, 16752.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 1230562.2, cumulative cost = {1.1895902600000001E7 rows, 3.82234452E7 cpu, 1.9688442E8 io, 5604.0 network, 16724.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 615315.75, cumulative cost = {5333199.5 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 615315.75, cumulative cost = {4717883.75 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 463.0, cumulative cost = {926.0 rows, 74080.0 cpu, 5556.0 io, 5556.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 463.0, cumulative cost = {463.0 rows, 0.0 cpu, 5556.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 615246.45, cumulative cost = {5332140.9 rows, 4101963.0 cpu, 9.8439456E7 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 615246.45, cumulative cost = {4716894.45 rows, 4101963.0 cpu, 9.8439456E7 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 73.95, cumulative cost = {641.9000000000001 rows, 652.0 cpu, 5928.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 73.95, cumulative cost = {567.95 rows, 652.0 cpu, 5928.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 492.0, cumulative cost = {492.0 rows, 0.0 cpu, 5904.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID f5303c423384940a0e3749e25ddb1414
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...

------------> using sink uuid: c0fee8f1_03df_4ec2_9dfa_7c2bffd86fab

Adding statistics for table s number 9 
Adding statistics for table a number 9 
Adding statistics for table b number 9 
Adding statistics for table r number 9 
Adding statistics for table t number 9 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 223076.48814551177, cumulative cost = {1.3796410114436537E7 rows, 1.0197559747393826E8 cpu, 1.96890348E8 io, 5359463.715492282 network, 2.8570542482625507E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 223076.48814551177, cumulative cost = {1.3573333626291025E7 rows, 9.840637366361007E7 cpu, 1.96890348E8 io, 5359463.715492282 network, 1.4293647241312753E7 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 223076.48814551177, cumulative cost = {1.3350257138145514E7 rows, 5.914491175E7 cpu, 1.96890348E8 io, 5628.0 network, 1.4293647241312753E7 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 1230636.15, cumulative cost = {1.3127180650000002E7 rows, 3.945473335E7 cpu, 1.96890348E8 io, 5628.0 network, 16752.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 1230562.2, cumulative cost = {1.1895902600000001E7 rows, 3.82234452E7 cpu, 1.9688442E8 io, 5604.0 network, 16724.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 615315.75, cumulative cost = {5333199.5 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 615315.75, cumulative cost = {4717883.75 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 463.0, cumulative cost = {926.0 rows, 74080.0 cpu, 5556.0 io, 5556.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 463.0, cumulative cost = {463.0 rows, 0.0 cpu, 5556.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 615246.45, cumulative cost = {5332140.9 rows, 4101963.0 cpu, 9.8439456E7 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 615246.45, cumulative cost = {4716894.45 rows, 4101963.0 cpu, 9.8439456E7 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 73.95, cumulative cost = {641.9000000000001 rows, 652.0 cpu, 5928.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 73.95, cumulative cost = {567.95 rows, 652.0 cpu, 5928.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 492.0, cumulative cost = {492.0 rows, 0.0 cpu, 5904.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID 0c64b5a0f935d377e936bf2fe2874b86
WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1 FROM r AS r_0 INNER JOIN b AS b_1 ON r_0.y = b_1.x UNION (SELECT r_0.x AS X0, t_2.y AS X1 FROM r AS r_0 INNER JOIN s AS s_1 ON r_0.y = s_1.x INNER JOIN t AS t_2 ON s_1.y = t_2.x) UNION (SELECT a_0.x AS X0, t_1.y AS X1 FROM a AS a_0 INNER JOIN t AS t_1 ON a_0.x = t_1.x)) SELECT p1.X0 AS x, p1.X1 AS y FROM p1
waiting...

------------> using sink uuid: 1b1acd19_66f7_454f_8511_eb9ce024a9fe

Adding statistics for table s number 9 
Adding statistics for table a number 9 
Adding statistics for table b number 9 
Adding statistics for table r number 9 
Adding statistics for table t number 9 
sql argument: WITH p1 AS (SELECT r_0.x AS X0, r_0.y AS X1
            FROM r AS r_0
                     INNER JOIN b AS b_1 ON r_0.y = b_1.x
            UNION
            (SELECT r_0.x AS X0, t_2.y AS X1
             FROM r AS r_0
                      INNER JOIN s AS s_1 ON r_0.y = s_1.x
                      INNER JOIN t AS t_2 ON s_1.y = t_2.x)
            UNION
            (SELECT a_0.x AS X0, t_1.y AS X1
             FROM a AS a_0
                      INNER JOIN t AS t_1 ON a_0.x = t_1.x))
SELECT p1.X0 AS x, p1.X1 AS y
FROM p1
== Abstract Syntax Tree ==
LogicalProject(x=[$0], y=[$1])
+- LogicalUnion(all=[false])
   :- LogicalUnion(all=[false])
   :  :- LogicalProject(X0=[$0], X1=[$1])
   :  :  +- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :  :     +- LogicalTableScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]])
   :  +- LogicalProject(X0=[$0], X1=[$5])
   :     +- LogicalJoin(condition=[=($3, $4)], joinType=[inner])
   :        :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
   :        :  :- LogicalTableScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]])
   :        :  +- LogicalTableScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]])
   :        +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])
   +- LogicalProject(X0=[$0], X1=[$2])
      +- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
         :- LogicalTableScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]])
         +- LogicalTableScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]])

== Optimized Physical Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1]): rowcount = 223076.48814551177, cumulative cost = {1.3796410114436537E7 rows, 1.0197559747393826E8 cpu, 1.96890348E8 io, 5359463.715492282 network, 2.8570542482625507E7 memory}
+- Exchange(distribution=[hash[X0, X1]]): rowcount = 223076.48814551177, cumulative cost = {1.3573333626291025E7 rows, 9.840637366361007E7 cpu, 1.96890348E8 io, 5359463.715492282 network, 1.4293647241312753E7 memory}
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1]): rowcount = 223076.48814551177, cumulative cost = {1.3350257138145514E7 rows, 5.914491175E7 cpu, 1.96890348E8 io, 5628.0 network, 1.4293647241312753E7 memory}
      +- Union(all=[true], union=[X0, X1]): rowcount = 1230636.15, cumulative cost = {1.3127180650000002E7 rows, 3.945473335E7 cpu, 1.96890348E8 io, 5628.0 network, 16752.0 memory}
         :- Union(all=[true], union=[X0, X1]): rowcount = 1230562.2, cumulative cost = {1.1895902600000001E7 rows, 3.82234452E7 cpu, 1.9688442E8 io, 5604.0 network, 16724.0 memory}
         :  :- Calc(select=[x AS X0, y AS X1]): rowcount = 615315.75, cumulative cost = {5333199.5 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :  :  +- HashJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0], isBroadcast=[true], build=[right]): rowcount = 615315.75, cumulative cost = {4717883.75 rows, 3.289092E7 cpu, 9.8444964E7 io, 5556.0 network, 16668.0 memory}
         :  :     :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :  :     +- Exchange(distribution=[broadcast]): rowcount = 463.0, cumulative cost = {926.0 rows, 74080.0 cpu, 5556.0 io, 5556.0 network, 0.0 memory}
         :  :        +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 463.0, cumulative cost = {463.0 rows, 0.0 cpu, 5556.0 io, 0.0 network, 0.0 memory}
         :  +- Calc(select=[x AS X0, y0 AS X1]): rowcount = 615246.45, cumulative cost = {5332140.9 rows, 4101963.0 cpu, 9.8439456E7 io, 48.0 network, 56.0 memory}
         :     +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[right]): rowcount = 615246.45, cumulative cost = {4716894.45 rows, 4101963.0 cpu, 9.8439456E7 io, 48.0 network, 56.0 memory}
         :        :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 4101642.0, cumulative cost = {4101642.0 rows, 0.0 cpu, 9.8439408E7 io, 0.0 network, 0.0 memory}
         :        +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {6.0 rows, 321.0 cpu, 48.0 io, 48.0 network, 28.0 memory}
         :           +- Calc(select=[x, y0]): rowcount = 1.0, cumulative cost = {5.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :              +- NestedLoopJoin(joinType=[InnerJoin], where=[=(y, x0)], select=[x, y, x0, y0], build=[left]): rowcount = 1.0, cumulative cost = {4.0 rows, 161.0 cpu, 48.0 io, 24.0 network, 28.0 memory}
         :                 :- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
         :                 :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         :                 +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}
         +- Calc(select=[x AS X0, y AS X1]): rowcount = 73.95, cumulative cost = {641.9000000000001 rows, 652.0 cpu, 5928.0 io, 24.0 network, 28.0 memory}
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(x, x0)], select=[x, x0, y], build=[right]): rowcount = 73.95, cumulative cost = {567.95 rows, 652.0 cpu, 5928.0 io, 24.0 network, 28.0 memory}
               :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x]): rowcount = 492.0, cumulative cost = {492.0 rows, 0.0 cpu, 5904.0 io, 0.0 network, 0.0 memory}
               +- Exchange(distribution=[broadcast]): rowcount = 1.0, cumulative cost = {2.0 rows, 160.0 cpu, 24.0 io, 24.0 network, 0.0 memory}
                  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y]): rowcount = 1.0, cumulative cost = {1.0 rows, 0.0 cpu, 24.0 io, 0.0 network, 0.0 memory}

== Optimized Execution Plan ==
HashAggregate(isMerge=[true], groupBy=[X0, X1], select=[X0, X1])
+- Exchange(distribution=[hash[X0, X1]])
   +- LocalHashAggregate(groupBy=[X0, X1], select=[X0, X1])
      +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[X0, X1])\n:- Union(all=[true], union=[X0, X1])\n:  :- Calc(select=[x AS X0, y AS X1])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0], isBroadcast=[true], build=[right])\n:  :     :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- Calc(select=[x AS X0, y0 AS X1])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[right])\n:        :- [#3] LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])\n:        +- [#6] Exchange(distribution=[broadcast])\n+- Calc(select=[x AS X0, y AS X1])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(x = x0)], select=[x, x0, y], build=[right])\n      :- [#1] LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])\n      +- [#2] Exchange(distribution=[broadcast])\n])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, a, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, t, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[2])
         :- LegacyTableSourceScan(table=[[S_CAT, default_database, r, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])(reuse_id=[1])
         :- Exchange(distribution=[broadcast])
         :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, b, source: [CsvTableSource(read fields: x)]]], fields=[x])
         :- Reused(reference_id=[1])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[x, y0])
               +- NestedLoopJoin(joinType=[InnerJoin], where=[(y = x0)], select=[x, y, x0, y0], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- LegacyTableSourceScan(table=[[S_CAT, default_database, s, source: [CsvTableSource(read fields: x, y)]]], fields=[x, y])
                  +- Reused(reference_id=[2])

Job has been submitted with JobID 1034df6e6a1d90ac91bf7af70859ac21
waiting...
